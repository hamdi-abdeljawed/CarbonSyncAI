{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport ModelPerformance from './components/ModelPerformance';\nimport Login from './components/Login';\nimport { AuthProvider, useAuth } from './components/AuthContext';\nimport axios from 'axios';\n\n// API base URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Main App component wrapped with AuthProvider\nconst AppWithAuth = () => {\n  return /*#__PURE__*/_jsxDEV(AuthProvider, {\n    children: /*#__PURE__*/_jsxDEV(AppContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n// App content with authentication logic\n_c = AppWithAuth;\nconst AppContent = () => {\n  _s();\n  const {\n    isAuthenticated,\n    currentUser,\n    logout,\n    login\n  } = useAuth();\n  const [forceUpdate, setForceUpdate] = useState(false);\n\n  // Debug current authentication state\n  useEffect(() => {\n    console.log('AppContent: Authentication state:', {\n      isAuthenticated,\n      currentUser,\n      forceUpdate\n    });\n  }, [isAuthenticated, currentUser, forceUpdate]);\n\n  // Handle login success\n  const handleLoginSuccess = user => {\n    console.log('Login success handler called with user:', user);\n    // Force a re-render to show the main app\n    setForceUpdate(prev => !prev);\n\n    // Add a small delay to ensure state updates are processed\n    setTimeout(() => {\n      console.log('After timeout - Auth state:', {\n        isAuthenticated: !!currentUser,\n        user: currentUser\n      });\n    }, 100);\n  };\n\n  // Check if we have a user in localStorage/sessionStorage even if isAuthenticated is false\n  const storedUser = JSON.parse(localStorage.getItem('user') || sessionStorage.getItem('user') || 'null');\n  const hasStoredCredentials = !!storedUser && (localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken'));\n\n  // If not authenticated and no stored credentials, show login page\n  if (!isAuthenticated && !hasStoredCredentials) {\n    return /*#__PURE__*/_jsxDEV(Login, {\n      onLoginSuccess: handleLoginSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated or has stored credentials, show main app\n  // Use stored user as fallback if currentUser is not yet set\n  return /*#__PURE__*/_jsxDEV(MainApp, {\n    user: currentUser || storedUser,\n    onLogout: logout\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n\n// Main application functionality\n_s(AppContent, \"5adH1GrXfFPvw+2qQJ06mcXrEIA=\", false, function () {\n  return [useAuth];\n});\n_c2 = AppContent;\nfunction MainApp({\n  user,\n  onLogout\n}) {\n  _s2();\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success'\n  });\n  const [savings, setSavings] = useState(null);\n  const [impacts, setImpacts] = useState(null);\n  const [forecastError, setForecastError] = useState(null);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n\n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        // Rename fields to match the required format if needed\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0,\n          // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0,\n          // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      setData(processedData);\n\n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  }, []);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, [fetchSampleData]);\n\n  // Calculate standard deviation for each numeric column\n  const calculateStdDev = data => {\n    if (!data || data.length === 0) return {};\n    const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    const stdDev = {};\n    numericColumns.forEach(col => {\n      // Get values for this column, filtering out non-numeric values\n      const values = data.map(item => parseFloat(item[col])).filter(val => !isNaN(val));\n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n\n        // Calculate sum of squared differences\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const sumSquaredDiffs = squaredDiffs.reduce((sum, val) => sum + val, 0);\n\n        // Calculate standard deviation\n        stdDev[col] = Math.sqrt(sumSquaredDiffs / values.length);\n      } else {\n        stdDev[col] = 0;\n      }\n    });\n    return stdDev;\n  };\n\n  // Handle file upload\n  const handleFileUpload = async file => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      console.log('Uploading file:', file.name, 'Size:', file.size, 'Type:', file.type);\n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 30000 // Increase timeout to 30 seconds\n      });\n      console.log('Upload response:', response.data);\n      if (!response.data || !response.data.data) {\n        throw new Error('Invalid response from server');\n      }\n\n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        // Ensure all numeric values are properly converted from strings if needed\n        const processNumeric = value => {\n          if (value === null || value === undefined || value === '') return 0;\n          // If it's a string, remove any non-numeric characters except decimal point\n          if (typeof value === 'string') {\n            value = value.replace(/[^0-9.]/g, '');\n          }\n          const num = parseFloat(value);\n          return isNaN(num) ? 0 : num;\n        };\n\n        // Log the raw item to see what we're getting from the backend\n        console.log('Raw data item:', item);\n\n        // Create a processed item with all the required fields\n        const processedItem = {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': processNumeric(item.energy_kwh),\n          'transport': processNumeric(item.transport_km),\n          'waste': processNumeric(item.waste_kg) / 1000,\n          // Convert kg to tons\n          'water': processNumeric(item.water_m3) * 1000,\n          // Convert m3 to liters\n          'fuel': processNumeric(item.fuel_l),\n          'emissions': processNumeric(item.y),\n          'production': processNumeric(item.production_units),\n          'grid_intensity': processNumeric(item.grid_intensity)\n        };\n\n        // Log the processed item to verify conversion\n        console.log('Processed item:', processedItem);\n        return processedItem;\n      });\n      console.log('Processed data:', processedData);\n      setData(processedData);\n\n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n\n      // Reset forecast and optimization data\n      setForecast(null);\n      setOptimizedForecast(null);\n      setSuggestions([]);\n      setImpacts(null);\n      setSavings(null);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || 'Failed to upload file. Please check file format and try again.', 'error');\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = updatedData => {\n    setData(updatedData);\n\n    // Calculate summary statistics\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      std: {},\n      total_rows: updatedData.length\n    };\n\n    // Determine available columns\n    const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    numericColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = updatedData.map(item => item[col]).filter(value => value !== '' && value !== null && value !== undefined).map(value => parseFloat(value));\n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.mean[col] = mean;\n\n        // Calculate min and max\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n\n        // Calculate standard deviation\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.std[col] = Math.sqrt(avgSquaredDiff);\n      }\n    });\n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = () => {\n    setLoading(true);\n    setForecastError(null);\n    try {\n      // Validate data\n      if (!data || data.length < 3) {\n        setForecastError(\"Please provide at least 3 months of data to generate a forecast\");\n        setLoading(false);\n        return;\n      }\n\n      // Sort data by date\n      const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));\n\n      // Get the last date from the data\n      const lastDate = new Date(sortedData[sortedData.length - 1].date);\n\n      // Create a new date for the first forecast month (next month after the last data point)\n      const firstForecastDate = new Date(lastDate);\n      firstForecastDate.setDate(1); // Set to first day of month\n      firstForecastDate.setMonth(firstForecastDate.getMonth() + 1); // Move to next month\n      firstForecastDate.setHours(0, 0, 0, 0); // Reset time\n\n      const mockForecast = [];\n\n      // Calculate average monthly growth rate from historical data\n      const monthlyGrowthRate = calculateGrowthRate(sortedData);\n\n      // Get the last month's emissions as base\n      const lastEmissions = parseFloat(sortedData[sortedData.length - 1].emissions) || 8;\n\n      // Generate forecast for exactly 6 months starting from the month after the last data point\n      const forecastMonths = 6;\n      for (let i = 0; i < forecastMonths; i++) {\n        const forecastDate = new Date(firstForecastDate);\n        forecastDate.setMonth(firstForecastDate.getMonth() + i);\n\n        // Add some randomness to the forecast\n        const randomFactor = 0.9 + Math.random() * 0.2; // Between 0.9 and 1.1\n        const predictedEmissions = lastEmissions * Math.pow(1 + monthlyGrowthRate, i + 1) * randomFactor;\n\n        // Add confidence bounds\n        const confidenceFactor = 0.05 + i * 0.01; // Increases with time\n        const lowerBound = predictedEmissions * (1 - confidenceFactor);\n        const upperBound = predictedEmissions * (1 + confidenceFactor);\n        mockForecast.push({\n          ds: forecastDate.toISOString().split('T')[0],\n          predicted_emissions: predictedEmissions,\n          lower_bound: lowerBound,\n          upper_bound: upperBound\n        });\n      }\n\n      // Generate mock optimized forecast\n      const optimizedForecast = mockForecast.map(item => ({\n        ds: item.ds,\n        predicted_emissions: item.predicted_emissions * (0.7 + Math.random() * 0.1),\n        // 70-80% of original\n        lower_bound: item.lower_bound * (0.7 + Math.random() * 0.1),\n        upper_bound: item.upper_bound * (0.7 + Math.random() * 0.1)\n      }));\n\n      // Generate mock impact factors\n      const mockImpacts = {\n        energy_use: {\n          impact_score: 0.7 + Math.random() * 0.3\n        },\n        transport: {\n          impact_score: 0.5 + Math.random() * 0.3\n        },\n        waste: {\n          impact_score: 0.3 + Math.random() * 0.3\n        },\n        water: {\n          impact_score: 0.2 + Math.random() * 0.2\n        },\n        fuel: {\n          impact_score: 0.4 + Math.random() * 0.3\n        },\n        grid_intensity: {\n          impact_score: 0.6 + Math.random() * 0.3\n        }\n      };\n\n      // Add a small delay to simulate API call\n      setTimeout(() => {\n        setForecast(mockForecast);\n        setOptimizedForecast(optimizedForecast);\n        setImpacts(mockImpacts);\n        setLoading(false);\n        setActiveTab('forecast'); // Switch to forecast tab\n      }, 1500);\n    } catch (error) {\n      console.error(\"Error generating forecast:\", error);\n      setForecastError(\"Error generating forecast. Please try again.\");\n      setLoading(false);\n    }\n  };\n\n  // Helper function to calculate growth rate from historical data\n  const calculateGrowthRate = data => {\n    if (data.length < 2) return 0.01; // Default growth rate\n\n    // Use only the most recent 6 months or all if less\n    const recentData = data.slice(-6);\n\n    // If we have enough data, calculate the average monthly change\n    let totalChange = 0;\n    let count = 0;\n    for (let i = 1; i < recentData.length; i++) {\n      const prevEmissions = parseFloat(recentData[i - 1].emissions) || 0;\n      const currEmissions = parseFloat(recentData[i].emissions) || 0;\n      if (prevEmissions > 0) {\n        const monthlyChange = (currEmissions - prevEmissions) / prevEmissions;\n        totalChange += monthlyChange;\n        count++;\n      }\n    }\n\n    // Return the average monthly change, with a small positive bias\n    return count > 0 ? totalChange / count + 0.005 : 0.01;\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      if (!forecast) {\n        showNotification('Please generate a forecast first', 'error');\n        return;\n      }\n      setLoading(true);\n\n      // Create a mock optimized forecast with 15% reduction\n      const optimized = forecast.map(item => {\n        const reduction = item.predicted_emissions * 0.15;\n        return {\n          ...item,\n          predicted_emissions: item.predicted_emissions - reduction,\n          lower_bound: item.lower_bound - reduction * 0.8,\n          upper_bound: item.upper_bound - reduction * 0.8\n        };\n      });\n      setOptimizedForecast(optimized);\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n    } catch (error) {\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification('Failed to optimize forecast: ' + (error.message || 'Unknown error'), 'error');\n    }\n  };\n\n  // Export forecast data\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n\n      // Determine which forecast to export\n      const forecastToExport = optimizedForecast || forecast;\n      if (!forecastToExport) {\n        showNotification('No forecast data to export', 'error');\n        setLoading(false);\n        return;\n      }\n      console.log('Exporting forecast data:', forecastToExport.length, 'records');\n      const response = await axios.post(`${API_BASE_URL}/export`, {\n        forecast: forecastToExport\n      }, {\n        responseType: 'blob',\n        timeout: 30000,\n        // Increase timeout to 30 seconds\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        }\n      });\n      console.log('Export response received, content type:', response.headers['content-type']);\n\n      // Ensure we have a valid blob\n      if (!(response.data instanceof Blob)) {\n        throw new Error('Invalid response format');\n      }\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      }));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'carbon_forecast.xlsx');\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      setTimeout(() => {\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(link);\n      }, 100);\n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || error.message || 'Failed to export forecast. Please try again.', 'error');\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type = 'success') => {\n    setNotification({\n      show: true,\n      message,\n      type\n    });\n\n    // Auto-hide notification after 5 seconds\n    setTimeout(() => {\n      setNotification(prev => ({\n        ...prev,\n        show: false\n      }));\n    }, 5000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      user: user,\n      onLogout: onLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadingBar, {\n      isLoading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), notification.show && /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type,\n      onClose: () => setNotification({\n        ...notification,\n        show: false\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(TabPanel, {\n        activeTab: activeTab,\n        onTabChange: setActiveTab,\n        children: [/*#__PURE__*/_jsxDEV(TabPanel.Tab, {\n          id: \"data\",\n          label: \"Data\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-tab\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"data-controls\",\n              children: /*#__PURE__*/_jsxDEV(UploadZone, {\n                onFileUpload: handleFileUpload\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 545,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n              data: data,\n              onDataUpdate: handleDataUpdate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 15\n            }, this), data && data.length >= 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"generate-forecast-button-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"generate-forecast-button\",\n                onClick: handleGenerateForecast,\n                children: \"Generate Forecast\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 552,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel.Tab, {\n          id: \"forecast\",\n          label: \"Forecast\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-left\",\n              children: [/*#__PURE__*/_jsxDEV(ForecastControls, {\n                forecastPeriods: forecastPeriods,\n                onForecastPeriodsChange: setForecastPeriods,\n                onGenerateForecast: handleGenerateForecast,\n                onOptimizeForecast: handleOptimizeForecast,\n                onExportForecast: handleExportForecast,\n                disableOptimize: !forecast,\n                disableExport: !forecast && !optimizedForecast\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 17\n              }, this), (forecast || optimizedForecast) && /*#__PURE__*/_jsxDEV(OptimizationPanel, {\n                suggestions: suggestions,\n                savings: savings,\n                forecast: forecast,\n                optimizedForecast: optimizedForecast,\n                impacts: impacts,\n                onOptimize: handleOptimizeForecast\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-right\",\n              children: [forecast && /*#__PURE__*/_jsxDEV(ForecastChart, {\n                data: data,\n                forecast: forecast,\n                optimizedForecast: optimizedForecast,\n                impacts: impacts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 591,\n                columnNumber: 19\n              }, this), !forecast && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"no-forecast-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"No Forecast Available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 600,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Please generate a forecast first by clicking the \\\"Generate Forecast\\\" button in the Data tab or in the controls above.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 601,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 599,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel.Tab, {\n          id: \"performance\",\n          label: \"Performance\",\n          children: impacts ? /*#__PURE__*/_jsxDEV(ModelPerformance, {\n            data: data,\n            forecast: forecast,\n            impacts: impacts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-forecast-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"No Performance Data Available\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Please generate a forecast first to view performance metrics.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 608,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 529,\n    columnNumber: 5\n  }, this);\n}\n_s2(MainApp, \"R8m25zeKr7fXbqLv29HKA0Xlx3c=\");\n_c3 = MainApp;\nexport default AppWithAuth;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"AppWithAuth\");\n$RefreshReg$(_c2, \"AppContent\");\n$RefreshReg$(_c3, \"MainApp\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Header","DataTable","UploadZone","ForecastControls","ForecastChart","OptimizationPanel","Notification","LoadingBar","TabPanel","ModelPerformance","Login","AuthProvider","useAuth","axios","jsxDEV","_jsxDEV","API_BASE_URL","AppWithAuth","children","AppContent","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","isAuthenticated","currentUser","logout","login","forceUpdate","setForceUpdate","console","log","handleLoginSuccess","user","prev","setTimeout","storedUser","JSON","parse","localStorage","getItem","sessionStorage","hasStoredCredentials","onLoginSuccess","MainApp","onLogout","_c2","_s2","data","setData","summary","setSummary","forecastPeriods","setForecastPeriods","forecast","setForecast","optimizedForecast","setOptimizedForecast","suggestions","setSuggestions","activeTab","setActiveTab","loading","setLoading","notification","setNotification","show","message","type","savings","setSavings","impacts","setImpacts","forecastError","setForecastError","fetchSampleData","response","get","processedData","map","item","id","Date","now","Math","random","date","ds","energy_kwh","transport_km","waste_kg","water_m3","fuel_l","y","production_units","grid_intensity","enhancedSummary","std","calculateStdDev","showNotification","error","length","numericColumns","stdDev","forEach","col","values","parseFloat","filter","val","isNaN","mean","reduce","sum","squaredDiffs","pow","sumSquaredDiffs","sqrt","handleFileUpload","file","formData","FormData","append","name","size","post","headers","timeout","Error","processNumeric","value","undefined","replace","num","processedItem","_error$response","_error$response$data","handleDataUpdate","updatedData","summaryData","min","max","total_rows","avgSquaredDiff","handleGenerateForecast","sortedData","sort","a","b","lastDate","firstForecastDate","setDate","setMonth","getMonth","setHours","mockForecast","monthlyGrowthRate","calculateGrowthRate","lastEmissions","emissions","forecastMonths","i","forecastDate","randomFactor","predictedEmissions","confidenceFactor","lowerBound","upperBound","push","toISOString","split","predicted_emissions","lower_bound","upper_bound","mockImpacts","energy_use","impact_score","transport","waste","water","fuel","recentData","slice","totalChange","count","prevEmissions","currEmissions","monthlyChange","handleOptimizeForecast","optimized","reduction","handleExportForecast","forecastToExport","responseType","Blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","revokeObjectURL","removeChild","_error$response2","_error$response2$data","className","isLoading","onClose","onTabChange","Tab","label","onFileUpload","onDataUpdate","onClick","onForecastPeriodsChange","onGenerateForecast","onOptimizeForecast","onExportForecast","disableOptimize","disableExport","onOptimize","_c3","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport ModelPerformance from './components/ModelPerformance';\nimport Login from './components/Login';\nimport { AuthProvider, useAuth } from './components/AuthContext';\nimport axios from 'axios';\n\n// API base URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Main App component wrapped with AuthProvider\nconst AppWithAuth = () => {\n  return (\n    <AuthProvider>\n      <AppContent />\n    </AuthProvider>\n  );\n};\n\n// App content with authentication logic\nconst AppContent = () => {\n  const { isAuthenticated, currentUser, logout, login } = useAuth();\n  const [forceUpdate, setForceUpdate] = useState(false);\n  \n  // Debug current authentication state\n  useEffect(() => {\n    console.log('AppContent: Authentication state:', { isAuthenticated, currentUser, forceUpdate });\n  }, [isAuthenticated, currentUser, forceUpdate]);\n  \n  // Handle login success\n  const handleLoginSuccess = (user) => {\n    console.log('Login success handler called with user:', user);\n    // Force a re-render to show the main app\n    setForceUpdate(prev => !prev);\n    \n    // Add a small delay to ensure state updates are processed\n    setTimeout(() => {\n      console.log('After timeout - Auth state:', { isAuthenticated: !!currentUser, user: currentUser });\n    }, 100);\n  };\n  \n  // Check if we have a user in localStorage/sessionStorage even if isAuthenticated is false\n  const storedUser = JSON.parse(localStorage.getItem('user') || sessionStorage.getItem('user') || 'null');\n  const hasStoredCredentials = !!storedUser && (localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken'));\n  \n  // If not authenticated and no stored credentials, show login page\n  if (!isAuthenticated && !hasStoredCredentials) {\n    return <Login onLoginSuccess={handleLoginSuccess} />;\n  }\n  \n  // If authenticated or has stored credentials, show main app\n  // Use stored user as fallback if currentUser is not yet set\n  return <MainApp user={currentUser || storedUser} onLogout={logout} />;\n};\n\n// Main application functionality\nfunction MainApp({ user, onLogout }) {\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' });\n  const [savings, setSavings] = useState(null);\n  const [impacts, setImpacts] = useState(null);\n  const [forecastError, setForecastError] = useState(null);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n      \n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        // Rename fields to match the required format if needed\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0, // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0, // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      \n      setData(processedData);\n      \n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      \n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  }, []);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, [fetchSampleData]);\n\n  // Calculate standard deviation for each numeric column\n  const calculateStdDev = (data) => {\n    if (!data || data.length === 0) return {};\n    \n    const numericColumns = [\n      'energy_use', 'transport', 'waste', 'water', \n      'fuel', 'emissions', 'production', 'grid_intensity'\n    ];\n    \n    const stdDev = {};\n    \n    numericColumns.forEach(col => {\n      // Get values for this column, filtering out non-numeric values\n      const values = data\n        .map(item => parseFloat(item[col]))\n        .filter(val => !isNaN(val));\n      \n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        \n        // Calculate sum of squared differences\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const sumSquaredDiffs = squaredDiffs.reduce((sum, val) => sum + val, 0);\n        \n        // Calculate standard deviation\n        stdDev[col] = Math.sqrt(sumSquaredDiffs / values.length);\n      } else {\n        stdDev[col] = 0;\n      }\n    });\n    \n    return stdDev;\n  };\n\n  // Handle file upload\n  const handleFileUpload = async (file) => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      console.log('Uploading file:', file.name, 'Size:', file.size, 'Type:', file.type);\n      \n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 30000 // Increase timeout to 30 seconds\n      });\n      \n      console.log('Upload response:', response.data);\n      \n      if (!response.data || !response.data.data) {\n        throw new Error('Invalid response from server');\n      }\n      \n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        // Ensure all numeric values are properly converted from strings if needed\n        const processNumeric = (value) => {\n          if (value === null || value === undefined || value === '') return 0;\n          // If it's a string, remove any non-numeric characters except decimal point\n          if (typeof value === 'string') {\n            value = value.replace(/[^0-9.]/g, '');\n          }\n          const num = parseFloat(value);\n          return isNaN(num) ? 0 : num;\n        };\n        \n        // Log the raw item to see what we're getting from the backend\n        console.log('Raw data item:', item);\n        \n        // Create a processed item with all the required fields\n        const processedItem = {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': processNumeric(item.energy_kwh),\n          'transport': processNumeric(item.transport_km),\n          'waste': processNumeric(item.waste_kg) / 1000, // Convert kg to tons\n          'water': processNumeric(item.water_m3) * 1000, // Convert m3 to liters\n          'fuel': processNumeric(item.fuel_l),\n          'emissions': processNumeric(item.y),\n          'production': processNumeric(item.production_units),\n          'grid_intensity': processNumeric(item.grid_intensity)\n        };\n        \n        // Log the processed item to verify conversion\n        console.log('Processed item:', processedItem);\n        \n        return processedItem;\n      });\n      \n      console.log('Processed data:', processedData);\n      \n      setData(processedData);\n      \n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      \n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n      \n      // Reset forecast and optimization data\n      setForecast(null);\n      setOptimizedForecast(null);\n      setSuggestions([]);\n      setImpacts(null);\n      setSavings(null);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(\n        error.response?.data?.error || \n        error.message || \n        'Failed to upload file. Please check file format and try again.', \n        'error'\n      );\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = (updatedData) => {\n    setData(updatedData);\n    \n    // Calculate summary statistics\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      std: {},\n      total_rows: updatedData.length\n    };\n    \n    // Determine available columns\n    const numericColumns = [\n      'energy_use', 'transport', 'waste', 'water', \n      'fuel', 'emissions', 'production', 'grid_intensity'\n    ];\n    \n    numericColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = updatedData\n        .map(item => item[col])\n        .filter(value => value !== '' && value !== null && value !== undefined)\n        .map(value => parseFloat(value));\n      \n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.mean[col] = mean;\n        \n        // Calculate min and max\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n        \n        // Calculate standard deviation\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.std[col] = Math.sqrt(avgSquaredDiff);\n      }\n    });\n    \n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = () => {\n    setLoading(true);\n    setForecastError(null);\n    \n    try {\n      // Validate data\n      if (!data || data.length < 3) {\n        setForecastError(\"Please provide at least 3 months of data to generate a forecast\");\n        setLoading(false);\n        return;\n      }\n      \n      // Sort data by date\n      const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));\n      \n      // Get the last date from the data\n      const lastDate = new Date(sortedData[sortedData.length - 1].date);\n      \n      // Create a new date for the first forecast month (next month after the last data point)\n      const firstForecastDate = new Date(lastDate);\n      firstForecastDate.setDate(1); // Set to first day of month\n      firstForecastDate.setMonth(firstForecastDate.getMonth() + 1); // Move to next month\n      firstForecastDate.setHours(0, 0, 0, 0); // Reset time\n      \n      const mockForecast = [];\n      \n      // Calculate average monthly growth rate from historical data\n      const monthlyGrowthRate = calculateGrowthRate(sortedData);\n      \n      // Get the last month's emissions as base\n      const lastEmissions = parseFloat(sortedData[sortedData.length - 1].emissions) || 8;\n      \n      // Generate forecast for exactly 6 months starting from the month after the last data point\n      const forecastMonths = 6;\n      for (let i = 0; i < forecastMonths; i++) {\n        const forecastDate = new Date(firstForecastDate);\n        forecastDate.setMonth(firstForecastDate.getMonth() + i);\n        \n        // Add some randomness to the forecast\n        const randomFactor = 0.9 + Math.random() * 0.2; // Between 0.9 and 1.1\n        const predictedEmissions = lastEmissions * Math.pow(1 + monthlyGrowthRate, i + 1) * randomFactor;\n        \n        // Add confidence bounds\n        const confidenceFactor = 0.05 + (i * 0.01); // Increases with time\n        const lowerBound = predictedEmissions * (1 - confidenceFactor);\n        const upperBound = predictedEmissions * (1 + confidenceFactor);\n        \n        mockForecast.push({\n          ds: forecastDate.toISOString().split('T')[0],\n          predicted_emissions: predictedEmissions,\n          lower_bound: lowerBound,\n          upper_bound: upperBound\n        });\n      }\n      \n      // Generate mock optimized forecast\n      const optimizedForecast = mockForecast.map(item => ({\n        ds: item.ds,\n        predicted_emissions: item.predicted_emissions * (0.7 + Math.random() * 0.1), // 70-80% of original\n        lower_bound: item.lower_bound * (0.7 + Math.random() * 0.1),\n        upper_bound: item.upper_bound * (0.7 + Math.random() * 0.1)\n      }));\n      \n      // Generate mock impact factors\n      const mockImpacts = {\n        energy_use: { impact_score: 0.7 + Math.random() * 0.3 },\n        transport: { impact_score: 0.5 + Math.random() * 0.3 },\n        waste: { impact_score: 0.3 + Math.random() * 0.3 },\n        water: { impact_score: 0.2 + Math.random() * 0.2 },\n        fuel: { impact_score: 0.4 + Math.random() * 0.3 },\n        grid_intensity: { impact_score: 0.6 + Math.random() * 0.3 }\n      };\n      \n      // Add a small delay to simulate API call\n      setTimeout(() => {\n        setForecast(mockForecast);\n        setOptimizedForecast(optimizedForecast);\n        setImpacts(mockImpacts);\n        setLoading(false);\n        setActiveTab('forecast'); // Switch to forecast tab\n      }, 1500);\n      \n    } catch (error) {\n      console.error(\"Error generating forecast:\", error);\n      setForecastError(\"Error generating forecast. Please try again.\");\n      setLoading(false);\n    }\n  };\n\n  // Helper function to calculate growth rate from historical data\n  const calculateGrowthRate = (data) => {\n    if (data.length < 2) return 0.01; // Default growth rate\n    \n    // Use only the most recent 6 months or all if less\n    const recentData = data.slice(-6);\n    \n    // If we have enough data, calculate the average monthly change\n    let totalChange = 0;\n    let count = 0;\n    \n    for (let i = 1; i < recentData.length; i++) {\n      const prevEmissions = parseFloat(recentData[i-1].emissions) || 0;\n      const currEmissions = parseFloat(recentData[i].emissions) || 0;\n      \n      if (prevEmissions > 0) {\n        const monthlyChange = (currEmissions - prevEmissions) / prevEmissions;\n        totalChange += monthlyChange;\n        count++;\n      }\n    }\n    \n    // Return the average monthly change, with a small positive bias\n    return count > 0 ? (totalChange / count) + 0.005 : 0.01;\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      if (!forecast) {\n        showNotification('Please generate a forecast first', 'error');\n        return;\n      }\n      \n      setLoading(true);\n      \n      // Create a mock optimized forecast with 15% reduction\n      const optimized = forecast.map(item => {\n        const reduction = item.predicted_emissions * 0.15;\n        return {\n          ...item,\n          predicted_emissions: item.predicted_emissions - reduction,\n          lower_bound: item.lower_bound - (reduction * 0.8),\n          upper_bound: item.upper_bound - (reduction * 0.8)\n        };\n      });\n      \n      setOptimizedForecast(optimized);\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n    } catch (error) {\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification('Failed to optimize forecast: ' + (error.message || 'Unknown error'), 'error');\n    }\n  };\n\n  // Export forecast data\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n      \n      // Determine which forecast to export\n      const forecastToExport = optimizedForecast || forecast;\n      \n      if (!forecastToExport) {\n        showNotification('No forecast data to export', 'error');\n        setLoading(false);\n        return;\n      }\n      \n      console.log('Exporting forecast data:', forecastToExport.length, 'records');\n      \n      const response = await axios.post(\n        `${API_BASE_URL}/export`,\n        { forecast: forecastToExport },\n        { \n          responseType: 'blob',\n          timeout: 30000, // Increase timeout to 30 seconds\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n          }\n        }\n      );\n      \n      console.log('Export response received, content type:', response.headers['content-type']);\n      \n      // Ensure we have a valid blob\n      if (!(response.data instanceof Blob)) {\n        throw new Error('Invalid response format');\n      }\n      \n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data], {\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n      }));\n      \n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'carbon_forecast.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      setTimeout(() => {\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(link);\n      }, 100);\n      \n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification(\n        error.response?.data?.error || \n        error.message || \n        'Failed to export forecast. Please try again.', \n        'error'\n      );\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type = 'success') => {\n    setNotification({\n      show: true,\n      message,\n      type\n    });\n    \n    // Auto-hide notification after 5 seconds\n    setTimeout(() => {\n      setNotification(prev => ({ ...prev, show: false }));\n    }, 5000);\n  };\n\n  return (\n    <div className=\"app\">\n      <Header user={user} onLogout={onLogout} />\n      <LoadingBar isLoading={loading} />\n      {notification.show && (\n        <Notification\n          message={notification.message}\n          type={notification.type}\n          onClose={() => setNotification({ ...notification, show: false })}\n        />\n      )}\n      \n      <div className=\"main-content\">\n        <TabPanel activeTab={activeTab} onTabChange={setActiveTab}>\n          <TabPanel.Tab id=\"data\" label=\"Data\">\n            <div className=\"data-tab\">\n              <div className=\"data-controls\">\n                <UploadZone onFileUpload={handleFileUpload} />\n              </div>\n              <DataTable \n                data={data} \n                onDataUpdate={handleDataUpdate} \n              />\n              {data && data.length >= 3 && (\n                <div className=\"generate-forecast-button-container\">\n                  <button \n                    className=\"generate-forecast-button\"\n                    onClick={handleGenerateForecast}\n                  >\n                    Generate Forecast\n                  </button>\n                </div>\n              )}\n            </div>\n          </TabPanel.Tab>\n          \n          <TabPanel.Tab id=\"forecast\" label=\"Forecast\">\n            <div className=\"forecast-container\">\n              <div className=\"forecast-left\">\n                <ForecastControls \n                  forecastPeriods={forecastPeriods}\n                  onForecastPeriodsChange={setForecastPeriods}\n                  onGenerateForecast={handleGenerateForecast}\n                  onOptimizeForecast={handleOptimizeForecast}\n                  onExportForecast={handleExportForecast}\n                  disableOptimize={!forecast}\n                  disableExport={!forecast && !optimizedForecast}\n                />\n                \n                {(forecast || optimizedForecast) && (\n                  <OptimizationPanel \n                    suggestions={suggestions}\n                    savings={savings}\n                    forecast={forecast}\n                    optimizedForecast={optimizedForecast}\n                    impacts={impacts}\n                    onOptimize={handleOptimizeForecast}\n                  />\n                )}\n              </div>\n              \n              <div className=\"forecast-right\">\n                {forecast && (\n                  <ForecastChart \n                    data={data}\n                    forecast={forecast}\n                    optimizedForecast={optimizedForecast}\n                    impacts={impacts}\n                  />\n                )}\n                {!forecast && (\n                  <div className=\"no-forecast-message\">\n                    <h3>No Forecast Available</h3>\n                    <p>Please generate a forecast first by clicking the \"Generate Forecast\" button in the Data tab or in the controls above.</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </TabPanel.Tab>\n          \n          <TabPanel.Tab id=\"performance\" label=\"Performance\">\n            {impacts ? (\n              <ModelPerformance \n                data={data}\n                forecast={forecast}\n                impacts={impacts}\n              />\n            ) : (\n              <div className=\"no-forecast-message\">\n                <h3>No Performance Data Available</h3>\n                <p>Please generate a forecast first to view performance metrics.</p>\n              </div>\n            )}\n          </TabPanel.Tab>\n        </TabPanel>\n      </div>\n    </div>\n  );\n}\n\nexport default AppWithAuth;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}