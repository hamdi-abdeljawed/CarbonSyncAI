{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\ModelPerformance.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './ModelPerformance.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModelPerformance = ({\n  data,\n  forecast,\n  impacts\n}) => {\n  _s();\n  const [performanceData, setPerformanceData] = useState(null);\n\n  // Prepare performance data\n  useEffect(() => {\n    if (!data || !forecast || data.length < 3) return;\n    try {\n      // Calculate performance metrics\n      calculatePerformanceMetrics();\n    } catch (error) {\n      console.error(\"Error calculating performance metrics:\", error);\n    }\n  }, [data, forecast, impacts]);\n\n  // Calculate performance metrics without using Chart.js\n  const calculatePerformanceMetrics = () => {\n    // Get the last 12 months of actual data\n    const actualData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date)).slice(-12);\n\n    // Format dates for display\n    const labels = actualData.map(item => {\n      const date = new Date(item.date);\n      return date.toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n      });\n    });\n\n    // Get actual emissions values\n    const actualValues = actualData.map(item => parseFloat(item.emissions) || 0);\n\n    // Calculate error metrics\n    let mae = 0;\n    let rmse = 0;\n    let count = 0;\n\n    // Calculate errors if we have forecast data for comparison\n    if (forecast && forecast.length > 0) {\n      actualData.forEach((actual, index) => {\n        if (index < forecast.length) {\n          const actualValue = parseFloat(actual.emissions) || 0;\n          const predictedValue = forecast[index].predicted_emissions;\n          const error = Math.abs(actualValue - predictedValue);\n          mae += error;\n          rmse += error * error;\n          count++;\n        }\n      });\n    }\n\n    // Calculate final metrics\n    mae = count > 0 ? mae / count : 0;\n    rmse = count > 0 ? Math.sqrt(rmse / count) : 0;\n\n    // Calculate impact factors\n    const impactFactors = impacts ? Object.entries(impacts).sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score)).map(([key, value]) => ({\n      name: formatFactorName(key),\n      score: Math.abs(value.impact_score)\n    })) : [];\n    setPerformanceData({\n      labels,\n      actualValues,\n      mae,\n      rmse,\n      impactFactors\n    });\n  };\n\n  // Format factor name for display\n  const formatFactorName = factor => {\n    switch (factor) {\n      case 'energy_use':\n        return 'Energy Use';\n      case 'transport':\n        return 'Transport';\n      case 'waste':\n        return 'Waste';\n      case 'water':\n        return 'Water';\n      case 'fuel':\n        return 'Fuel';\n      case 'grid_intensity':\n        return 'Grid Intensity';\n      default:\n        return factor.replace('_', ' ');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"model-performance\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"section-title\",\n      children: \"Model Performance Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), performanceData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"performance-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"performance-metrics\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Mean Absolute Error (MAE)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-value\",\n            children: performanceData.mae.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-description\",\n            children: \"Average absolute difference between predicted and actual values\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Root Mean Square Error (RMSE)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-value\",\n            children: performanceData.rmse.toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-description\",\n            children: \"Square root of the average squared differences between predicted and actual values\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"impact-analysis\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Impact Factor Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"impact-bars\",\n          children: performanceData.impactFactors.map((factor, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"impact-bar-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"impact-bar-label\",\n              children: factor.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"impact-bar-wrapper\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"impact-bar\",\n                style: {\n                  width: `${Math.min(100, factor.score * 100)}%`,\n                  backgroundColor: getColorForIndex(index)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"impact-bar-value\",\n                children: factor.score.toFixed(2)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"emissions-trend\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Monthly Emissions Trend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"trend-chart\",\n          children: performanceData.labels.map((label, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"trend-bar-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"trend-bar\",\n              style: {\n                height: `${performanceData.actualValues[index] / Math.max(...performanceData.actualValues) * 100}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"trend-label\",\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Insufficient data to calculate performance metrics. Please ensure you have at least 3 months of data and generate a forecast.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get color for impact bars\n_s(ModelPerformance, \"mqAlAL8uQ259hzYViVSCRVSmdHA=\");\n_c = ModelPerformance;\nconst getColorForIndex = index => {\n  const colors = ['#FF00FF',\n  // Magenta\n  '#00FFFF',\n  // Cyan\n  '#00FF00',\n  // Green\n  '#FFFF00',\n  // Yellow\n  '#FF8000',\n  // Orange\n  '#FF0080' // Pink\n  ];\n  return colors[index % colors.length];\n};\nexport default ModelPerformance;\nvar _c;\n$RefreshReg$(_c, \"ModelPerformance\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","ModelPerformance","data","forecast","impacts","_s","performanceData","setPerformanceData","length","calculatePerformanceMetrics","error","console","actualData","sort","a","b","Date","date","slice","labels","map","item","toLocaleDateString","month","year","actualValues","parseFloat","emissions","mae","rmse","count","forEach","actual","index","actualValue","predictedValue","predicted_emissions","Math","abs","sqrt","impactFactors","Object","entries","impact_score","key","value","name","formatFactorName","score","factor","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","style","width","min","backgroundColor","getColorForIndex","label","height","max","_c","colors","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/ModelPerformance.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './ModelPerformance.css';\n\nconst ModelPerformance = ({ data, forecast, impacts }) => {\n  const [performanceData, setPerformanceData] = useState(null);\n\n  // Prepare performance data\n  useEffect(() => {\n    if (!data || !forecast || data.length < 3) return;\n    \n    try {\n      // Calculate performance metrics\n      calculatePerformanceMetrics();\n    } catch (error) {\n      console.error(\"Error calculating performance metrics:\", error);\n    }\n  }, [data, forecast, impacts]);\n\n  // Calculate performance metrics without using Chart.js\n  const calculatePerformanceMetrics = () => {\n    // Get the last 12 months of actual data\n    const actualData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date)).slice(-12);\n    \n    // Format dates for display\n    const labels = actualData.map(item => {\n      const date = new Date(item.date);\n      return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    });\n    \n    // Get actual emissions values\n    const actualValues = actualData.map(item => parseFloat(item.emissions) || 0);\n    \n    // Calculate error metrics\n    let mae = 0;\n    let rmse = 0;\n    let count = 0;\n    \n    // Calculate errors if we have forecast data for comparison\n    if (forecast && forecast.length > 0) {\n      actualData.forEach((actual, index) => {\n        if (index < forecast.length) {\n          const actualValue = parseFloat(actual.emissions) || 0;\n          const predictedValue = forecast[index].predicted_emissions;\n          \n          const error = Math.abs(actualValue - predictedValue);\n          mae += error;\n          rmse += error * error;\n          count++;\n        }\n      });\n    }\n    \n    // Calculate final metrics\n    mae = count > 0 ? mae / count : 0;\n    rmse = count > 0 ? Math.sqrt(rmse / count) : 0;\n    \n    // Calculate impact factors\n    const impactFactors = impacts ? Object.entries(impacts)\n      .sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score))\n      .map(([key, value]) => ({\n        name: formatFactorName(key),\n        score: Math.abs(value.impact_score)\n      })) : [];\n    \n    setPerformanceData({\n      labels,\n      actualValues,\n      mae,\n      rmse,\n      impactFactors\n    });\n  };\n  \n  // Format factor name for display\n  const formatFactorName = (factor) => {\n    switch(factor) {\n      case 'energy_use': return 'Energy Use';\n      case 'transport': return 'Transport';\n      case 'waste': return 'Waste';\n      case 'water': return 'Water';\n      case 'fuel': return 'Fuel';\n      case 'grid_intensity': return 'Grid Intensity';\n      default: return factor.replace('_', ' ');\n    }\n  };\n\n  return (\n    <div className=\"model-performance\">\n      <h2 className=\"section-title\">Model Performance Analysis</h2>\n      \n      {performanceData ? (\n        <div className=\"performance-content\">\n          <div className=\"performance-metrics\">\n            <div className=\"metric-card\">\n              <h3>Mean Absolute Error (MAE)</h3>\n              <div className=\"metric-value\">{performanceData.mae.toFixed(2)}</div>\n              <div className=\"metric-description\">\n                Average absolute difference between predicted and actual values\n              </div>\n            </div>\n            \n            <div className=\"metric-card\">\n              <h3>Root Mean Square Error (RMSE)</h3>\n              <div className=\"metric-value\">{performanceData.rmse.toFixed(2)}</div>\n              <div className=\"metric-description\">\n                Square root of the average squared differences between predicted and actual values\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"impact-analysis\">\n            <h3>Impact Factor Analysis</h3>\n            <div className=\"impact-bars\">\n              {performanceData.impactFactors.map((factor, index) => (\n                <div className=\"impact-bar-container\" key={index}>\n                  <div className=\"impact-bar-label\">{factor.name}</div>\n                  <div className=\"impact-bar-wrapper\">\n                    <div \n                      className=\"impact-bar\" \n                      style={{ \n                        width: `${Math.min(100, factor.score * 100)}%`,\n                        backgroundColor: getColorForIndex(index)\n                      }}\n                    ></div>\n                    <div className=\"impact-bar-value\">{factor.score.toFixed(2)}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"emissions-trend\">\n            <h3>Monthly Emissions Trend</h3>\n            <div className=\"trend-chart\">\n              {performanceData.labels.map((label, index) => (\n                <div className=\"trend-bar-container\" key={index}>\n                  <div \n                    className=\"trend-bar\" \n                    style={{ \n                      height: `${(performanceData.actualValues[index] / Math.max(...performanceData.actualValues)) * 100}%` \n                    }}\n                  ></div>\n                  <div className=\"trend-label\">{label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      ) : (\n        <div className=\"no-data-message\">\n          <p>Insufficient data to calculate performance metrics. Please ensure you have at least 3 months of data and generate a forecast.</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Helper function to get color for impact bars\nconst getColorForIndex = (index) => {\n  const colors = [\n    '#FF00FF', // Magenta\n    '#00FFFF', // Cyan\n    '#00FF00', // Green\n    '#FFFF00', // Yellow\n    '#FF8000', // Orange\n    '#FF0080'  // Pink\n  ];\n  \n  return colors[index % colors.length];\n};\n\nexport default ModelPerformance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}