{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\UploadZone.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport './UploadZone.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadZone = ({\n  onFileUpload\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n\n  // Define required columns for validation\n  const requiredColumns = ['date', 'energy_use (kWh)', 'transport (km)', 'waste (tons)', 'water (liters)', 'fuel (liters)', 'emissions (tons CO2e)', 'production (units)', 'grid_intensity (kg CO2e/kWh)'];\n\n  // Validate file content before uploading\n  const validateFile = useCallback(async file => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        try {\n          const content = event.target.result;\n          let headers = [];\n\n          // Parse CSV or Excel based on file extension\n          if (file.name.endsWith('.csv')) {\n            // Simple CSV parsing\n            const lines = content.split('\\n');\n            if (lines.length > 0) {\n              headers = lines[0].split(',').map(h => h.trim());\n            }\n          } else if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n            // For Excel files, we'll rely on backend validation\n            // Just check if file is not empty\n            if (content.length === 0) {\n              reject(new Error('Excel file appears to be empty'));\n              return;\n            }\n            resolve(file);\n            return;\n          }\n\n          // Check if all required columns are present\n          const missingColumns = requiredColumns.filter(col => !headers.some(h => h.toLowerCase() === col.toLowerCase()));\n          if (missingColumns.length > 0) {\n            reject(new Error(`Missing required columns: ${missingColumns.join(', ')}`));\n          } else {\n            resolve(file);\n          }\n        } catch (err) {\n          reject(new Error('Failed to parse file: ' + err.message));\n        }\n      };\n      reader.onerror = () => {\n        reject(new Error('Failed to read file'));\n      };\n\n      // Read file as text for CSV, as array buffer for Excel\n      if (file.name.endsWith('.csv')) {\n        reader.readAsText(file);\n      } else {\n        reader.readAsArrayBuffer(file);\n      }\n    });\n  }, [requiredColumns]);\n  const onDrop = useCallback(async acceptedFiles => {\n    if (acceptedFiles && acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      setError(null);\n      try {\n        // Validate file before uploading\n        await validateFile(file);\n        onFileUpload(file);\n      } catch (err) {\n        setError(err.message);\n        // Auto-hide error after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    }\n  }, [onFileUpload, validateFile]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'text/csv': ['.csv'],\n      'application/vnd.ms-excel': ['.xls'],\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx']\n    },\n    multiple: false\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card upload-zone-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"card-title\",\n      children: \"Data Input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ...getRootProps(),\n      className: `upload-zone ${isDragActive ? 'active' : ''} ${isDragAccept ? 'accept' : ''} ${isDragReject ? 'reject' : ''} ${error ? 'error' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drop the file here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag & drop a CSV or Excel file here, or click to select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"upload-format\",\n        children: \"Supported formats: .csv, .xlsx, .xls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"upload-requirements\",\n        children: \"Required columns: date, energy_use (kWh), transport (km), waste (tons), water (liters), fuel (liters), emissions (tons CO2e), production (units), grid_intensity (kg CO2e/kWh)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-error\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadZone, \"0dH4n7KnnLj3umeWujPt2B+dh+I=\", false, function () {\n  return [useDropzone];\n});\n_c = UploadZone;\nexport default UploadZone;\nvar _c;\n$RefreshReg$(_c, \"UploadZone\");","map":{"version":3,"names":["React","useCallback","useState","useDropzone","jsxDEV","_jsxDEV","UploadZone","onFileUpload","_s","error","setError","requiredColumns","validateFile","file","Promise","resolve","reject","reader","FileReader","onload","event","content","target","result","headers","name","endsWith","lines","split","length","map","h","trim","Error","missingColumns","filter","col","some","toLowerCase","join","err","message","onerror","readAsText","readAsArrayBuffer","onDrop","acceptedFiles","setTimeout","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","accept","multiple","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/UploadZone.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport './UploadZone.css';\n\nconst UploadZone = ({ onFileUpload }) => {\n  const [error, setError] = useState(null);\n  \n  // Define required columns for validation\n  const requiredColumns = [\n    'date', 'energy_use (kWh)', 'transport (km)', 'waste (tons)', \n    'water (liters)', 'fuel (liters)', 'emissions (tons CO2e)', \n    'production (units)', 'grid_intensity (kg CO2e/kWh)'\n  ];\n  \n  // Validate file content before uploading\n  const validateFile = useCallback(async (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      \n      reader.onload = (event) => {\n        try {\n          const content = event.target.result;\n          let headers = [];\n          \n          // Parse CSV or Excel based on file extension\n          if (file.name.endsWith('.csv')) {\n            // Simple CSV parsing\n            const lines = content.split('\\n');\n            if (lines.length > 0) {\n              headers = lines[0].split(',').map(h => h.trim());\n            }\n          } else if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {\n            // For Excel files, we'll rely on backend validation\n            // Just check if file is not empty\n            if (content.length === 0) {\n              reject(new Error('Excel file appears to be empty'));\n              return;\n            }\n            resolve(file);\n            return;\n          }\n          \n          // Check if all required columns are present\n          const missingColumns = requiredColumns.filter(\n            col => !headers.some(h => h.toLowerCase() === col.toLowerCase())\n          );\n          \n          if (missingColumns.length > 0) {\n            reject(new Error(`Missing required columns: ${missingColumns.join(', ')}`));\n          } else {\n            resolve(file);\n          }\n        } catch (err) {\n          reject(new Error('Failed to parse file: ' + err.message));\n        }\n      };\n      \n      reader.onerror = () => {\n        reject(new Error('Failed to read file'));\n      };\n      \n      // Read file as text for CSV, as array buffer for Excel\n      if (file.name.endsWith('.csv')) {\n        reader.readAsText(file);\n      } else {\n        reader.readAsArrayBuffer(file);\n      }\n    });\n  }, [requiredColumns]);\n  \n  const onDrop = useCallback(async (acceptedFiles) => {\n    if (acceptedFiles && acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      setError(null);\n      \n      try {\n        // Validate file before uploading\n        await validateFile(file);\n        onFileUpload(file);\n      } catch (err) {\n        setError(err.message);\n        // Auto-hide error after 5 seconds\n        setTimeout(() => setError(null), 5000);\n      }\n    }\n  }, [onFileUpload, validateFile]);\n\n  const { getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject } = useDropzone({\n    onDrop,\n    accept: {\n      'text/csv': ['.csv'],\n      'application/vnd.ms-excel': ['.xls'],\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx']\n    },\n    multiple: false\n  });\n\n  return (\n    <div className=\"card upload-zone-container\">\n      <h3 className=\"card-title\">Data Input</h3>\n      <div \n        {...getRootProps()} \n        className={`upload-zone ${isDragActive ? 'active' : ''} ${isDragAccept ? 'accept' : ''} ${isDragReject ? 'reject' : ''} ${error ? 'error' : ''}`}\n      >\n        <input {...getInputProps()} />\n        <div className=\"upload-icon\"></div>\n        {isDragActive ? (\n          <p>Drop the file here...</p>\n        ) : (\n          <p>Drag & drop a CSV or Excel file here, or click to select</p>\n        )}\n        <p className=\"upload-format\">Supported formats: .csv, .xlsx, .xls</p>\n        <p className=\"upload-requirements\">\n          Required columns: date, energy_use (kWh), transport (km), waste (tons), \n          water (liters), fuel (liters), emissions (tons CO2e), production (units), \n          grid_intensity (kg CO2e/kWh)\n        </p>\n      </div>\n      \n      {error && (\n        <div className=\"upload-error\">\n          <p>{error}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UploadZone;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,QAAQ,QAAQ,OAAO;AACpD,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMS,eAAe,GAAG,CACtB,MAAM,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,cAAc,EAC5D,gBAAgB,EAAE,eAAe,EAAE,uBAAuB,EAC1D,oBAAoB,EAAE,8BAA8B,CACrD;;EAED;EACA,MAAMC,YAAY,GAAGX,WAAW,CAAC,MAAOY,IAAI,IAAK;IAC/C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAE/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;QACzB,IAAI;UACF,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;UACnC,IAAIC,OAAO,GAAG,EAAE;;UAEhB;UACA,IAAIX,IAAI,CAACY,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC9B;YACA,MAAMC,KAAK,GAAGN,OAAO,CAACO,KAAK,CAAC,IAAI,CAAC;YACjC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;cACpBL,OAAO,GAAGG,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACE,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;YAClD;UACF,CAAC,MAAM,IAAInB,IAAI,CAACY,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAIb,IAAI,CAACY,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACpE;YACA;YACA,IAAIL,OAAO,CAACQ,MAAM,KAAK,CAAC,EAAE;cACxBb,MAAM,CAAC,IAAIiB,KAAK,CAAC,gCAAgC,CAAC,CAAC;cACnD;YACF;YACAlB,OAAO,CAACF,IAAI,CAAC;YACb;UACF;;UAEA;UACA,MAAMqB,cAAc,GAAGvB,eAAe,CAACwB,MAAM,CAC3CC,GAAG,IAAI,CAACZ,OAAO,CAACa,IAAI,CAACN,CAAC,IAAIA,CAAC,CAACO,WAAW,CAAC,CAAC,KAAKF,GAAG,CAACE,WAAW,CAAC,CAAC,CACjE,CAAC;UAED,IAAIJ,cAAc,CAACL,MAAM,GAAG,CAAC,EAAE;YAC7Bb,MAAM,CAAC,IAAIiB,KAAK,CAAC,6BAA6BC,cAAc,CAACK,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;UAC7E,CAAC,MAAM;YACLxB,OAAO,CAACF,IAAI,CAAC;UACf;QACF,CAAC,CAAC,OAAO2B,GAAG,EAAE;UACZxB,MAAM,CAAC,IAAIiB,KAAK,CAAC,wBAAwB,GAAGO,GAAG,CAACC,OAAO,CAAC,CAAC;QAC3D;MACF,CAAC;MAEDxB,MAAM,CAACyB,OAAO,GAAG,MAAM;QACrB1B,MAAM,CAAC,IAAIiB,KAAK,CAAC,qBAAqB,CAAC,CAAC;MAC1C,CAAC;;MAED;MACA,IAAIpB,IAAI,CAACY,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC9BT,MAAM,CAAC0B,UAAU,CAAC9B,IAAI,CAAC;MACzB,CAAC,MAAM;QACLI,MAAM,CAAC2B,iBAAiB,CAAC/B,IAAI,CAAC;MAChC;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACF,eAAe,CAAC,CAAC;EAErB,MAAMkC,MAAM,GAAG5C,WAAW,CAAC,MAAO6C,aAAa,IAAK;IAClD,IAAIA,aAAa,IAAIA,aAAa,CAACjB,MAAM,GAAG,CAAC,EAAE;MAC7C,MAAMhB,IAAI,GAAGiC,aAAa,CAAC,CAAC,CAAC;MAC7BpC,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF;QACA,MAAME,YAAY,CAACC,IAAI,CAAC;QACxBN,YAAY,CAACM,IAAI,CAAC;MACpB,CAAC,CAAC,OAAO2B,GAAG,EAAE;QACZ9B,QAAQ,CAAC8B,GAAG,CAACC,OAAO,CAAC;QACrB;QACAM,UAAU,CAAC,MAAMrC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;MACxC;IACF;EACF,CAAC,EAAE,CAACH,YAAY,EAAEK,YAAY,CAAC,CAAC;EAEhC,MAAM;IAAEoC,YAAY;IAAEC,aAAa;IAAEC,YAAY;IAAEC,YAAY;IAAEC;EAAa,CAAC,GAAGjD,WAAW,CAAC;IAC5F0C,MAAM;IACNQ,MAAM,EAAE;MACN,UAAU,EAAE,CAAC,MAAM,CAAC;MACpB,0BAA0B,EAAE,CAAC,MAAM,CAAC;MACpC,mEAAmE,EAAE,CAAC,OAAO;IAC/E,CAAC;IACDC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,oBACEjD,OAAA;IAAKkD,SAAS,EAAC,4BAA4B;IAAAC,QAAA,gBACzCnD,OAAA;MAAIkD,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1CvD,OAAA;MAAA,GACM2C,YAAY,CAAC,CAAC;MAClBO,SAAS,EAAE,eAAeL,YAAY,GAAG,QAAQ,GAAG,EAAE,IAAIC,YAAY,GAAG,QAAQ,GAAG,EAAE,IAAIC,YAAY,GAAG,QAAQ,GAAG,EAAE,IAAI3C,KAAK,GAAG,OAAO,GAAG,EAAE,EAAG;MAAA+C,QAAA,gBAEjJnD,OAAA;QAAA,GAAW4C,aAAa,CAAC;MAAC;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC9BvD,OAAA;QAAKkD,SAAS,EAAC;MAAa;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EAClCV,YAAY,gBACX7C,OAAA;QAAAmD,QAAA,EAAG;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,gBAE5BvD,OAAA;QAAAmD,QAAA,EAAG;MAAwD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC/D,eACDvD,OAAA;QAAGkD,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAoC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACrEvD,OAAA;QAAGkD,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EAAC;MAInC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAELnD,KAAK,iBACJJ,OAAA;MAAKkD,SAAS,EAAC,cAAc;MAAAC,QAAA,eAC3BnD,OAAA;QAAAmD,QAAA,EAAI/C;MAAK;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpD,EAAA,CA1HIF,UAAU;EAAA,QAmFoEH,WAAW;AAAA;AAAA0D,EAAA,GAnFzFvD,UAAU;AA4HhB,eAAeA,UAAU;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}