{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport axios from 'axios';\n\n// API base URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success'\n  });\n  const [savings, setSavings] = useState(null);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, []);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n      setData(response.data.data);\n      setSummary(response.data.summary);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  };\n\n  // Handle file upload\n  const handleFileUpload = async file => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setData(response.data.data);\n      setSummary(response.data.summary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to upload file', 'error');\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = updatedData => {\n    setData(updatedData);\n\n    // Determine available columns\n    const firstRow = updatedData[0] || {};\n    const numericColumns = ['energy_kwh', 'production_units', 'transport_km', 'y'];\n    const optionalColumns = ['waste_kg', 'water_m3', 'fuel_l', 'grid_intensity'];\n    const availableColumns = [...numericColumns.filter(col => col in firstRow), ...optionalColumns.filter(col => col in firstRow)];\n\n    // Recalculate summary\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      total_rows: updatedData.length\n    };\n    availableColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = updatedData.map(item => item[col]).filter(value => value !== '' && value !== null && value !== undefined).map(value => parseFloat(value));\n      if (values.length > 0) {\n        summaryData.mean[col] = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n      } else {\n        summaryData.mean[col] = 0;\n        summaryData.min[col] = 0;\n        summaryData.max[col] = 0;\n      }\n    });\n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = async () => {\n    try {\n      // Ensure all data is properly formatted before sending to backend\n      const formattedData = data.map(row => {\n        const newRow = {\n          ...row\n        };\n\n        // Determine available columns\n        const numericColumns = ['energy_kwh', 'production_units', 'transport_km', 'y'];\n        const optionalColumns = ['waste_kg', 'water_m3', 'fuel_l', 'grid_intensity'];\n        const availableColumns = [...numericColumns.filter(col => col in newRow), ...optionalColumns.filter(col => col in newRow)];\n\n        // Ensure all numeric fields are numbers\n        availableColumns.forEach(field => {\n          if (newRow[field] === '' || newRow[field] === null || newRow[field] === undefined) {\n            newRow[field] = 0; // Default to 0 for empty values\n          } else if (typeof newRow[field] === 'string') {\n            newRow[field] = parseFloat(newRow[field]);\n          }\n        });\n        return newRow;\n      });\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/predict`, {\n        data: formattedData,\n        forecast_periods: forecastPeriods\n      });\n      setForecast(response.data.forecast);\n      setSuggestions(response.data.suggestions);\n      setLoading(false);\n      showNotification('Forecast generated successfully', 'success');\n      setActiveTab('forecast');\n\n      // Reset optimized forecast when new forecast is generated\n      setOptimizedForecast(null);\n      setSavings(null);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error generating forecast:', error);\n      setLoading(false);\n      showNotification(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to generate forecast', 'error');\n    }\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      // Ensure all data is properly formatted before sending to backend\n      const formattedData = data.map(row => {\n        const newRow = {\n          ...row\n        };\n\n        // Determine available columns\n        const numericColumns = ['energy_kwh', 'production_units', 'transport_km', 'y'];\n        const optionalColumns = ['waste_kg', 'water_m3', 'fuel_l', 'grid_intensity'];\n        const availableColumns = [...numericColumns.filter(col => col in newRow), ...optionalColumns.filter(col => col in newRow)];\n\n        // Ensure all numeric fields are numbers\n        availableColumns.forEach(field => {\n          if (newRow[field] === '' || newRow[field] === null || newRow[field] === undefined) {\n            newRow[field] = 0; // Default to 0 for empty values\n          } else if (typeof newRow[field] === 'string') {\n            newRow[field] = parseFloat(newRow[field]);\n          }\n        });\n        return newRow;\n      });\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/optimize`, {\n        data: formattedData,\n        suggestions: suggestions,\n        forecast_periods: forecastPeriods\n      });\n      setOptimizedForecast(response.data.optimized_forecast);\n      setSavings({\n        total: response.data.total_reduction,\n        percentage: response.data.avg_reduction_pct\n      });\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to optimize forecast', 'error');\n    }\n  };\n\n  // Export forecast to CSV\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/export`, {\n        forecast: forecast,\n        optimized: optimizedForecast\n      }, {\n        responseType: 'blob'\n      });\n\n      // Create a download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'carbon_forecast.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification('Failed to export forecast', 'error');\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type) => {\n    setNotification({\n      show: true,\n      message,\n      type\n    });\n    setTimeout(() => {\n      setNotification({\n        show: false,\n        message: '',\n        type: 'success'\n      });\n    }, 5000);\n  };\n\n  // Prepare data for DataTable component\n  const prepareDataForTable = rawData => {\n    return rawData.map((row, index) => ({\n      ...row,\n      id: row.id || index\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 19\n    }, this), notification.show && /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type,\n      onClose: () => setNotification({\n        show: false,\n        message: '',\n        type: 'success'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(UploadZone, {\n          onFileUpload: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ForecastControls, {\n          forecastPeriods: forecastPeriods,\n          onForecastPeriodsChange: setForecastPeriods,\n          onGenerateForecast: handleGenerateForecast,\n          onOptimizeForecast: handleOptimizeForecast,\n          onExportForecast: handleExportForecast,\n          disableOptimize: !forecast,\n          disableExport: !forecast && !optimizedForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(OptimizationPanel, {\n          suggestions: suggestions,\n          savings: savings,\n          onOptimize: handleOptimizeForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        children: [/*#__PURE__*/_jsxDEV(TabPanel, {\n          activeTab: activeTab,\n          onTabChange: setActiveTab,\n          tabs: [{\n            id: 'data',\n            label: 'Data'\n          }, {\n            id: 'forecast',\n            label: 'Forecast',\n            disabled: !forecast\n          }, {\n            id: 'plot',\n            label: 'Plot',\n            disabled: !forecast\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), activeTab === 'data' && /*#__PURE__*/_jsxDEV(DataTable, {\n          data: prepareDataForTable(data),\n          onDataUpdate: updatedData => {\n            const formattedData = updatedData.map((row, index) => ({\n              ...row,\n              id: row.id || index\n            }));\n            handleDataUpdate(formattedData);\n          },\n          summary: summary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), activeTab === 'forecast' && forecast && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-table-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Forecast Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n            data: optimizedForecast || forecast,\n            readOnly: true,\n            isForecasted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this), activeTab === 'plot' && forecast && /*#__PURE__*/_jsxDEV(ForecastChart, {\n          actualData: data,\n          forecastData: forecast,\n          optimizedData: optimizedForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"baNMYE62qnulYeJ/2b74QK/099M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","DataTable","UploadZone","ForecastControls","ForecastChart","OptimizationPanel","Notification","LoadingBar","TabPanel","axios","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","data","setData","summary","setSummary","forecastPeriods","setForecastPeriods","forecast","setForecast","optimizedForecast","setOptimizedForecast","suggestions","setSuggestions","activeTab","setActiveTab","loading","setLoading","notification","setNotification","show","message","type","savings","setSavings","fetchSampleData","response","get","showNotification","error","console","handleFileUpload","file","formData","FormData","append","post","headers","_error$response","_error$response$data","handleDataUpdate","updatedData","firstRow","numericColumns","optionalColumns","availableColumns","filter","col","summaryData","mean","min","max","total_rows","length","forEach","values","map","item","value","undefined","parseFloat","reduce","sum","val","Math","handleGenerateForecast","formattedData","row","newRow","field","forecast_periods","_error$response2","_error$response2$data","handleOptimizeForecast","optimized_forecast","total","total_reduction","percentage","avg_reduction_pct","_error$response3","_error$response3$data","handleExportForecast","optimized","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","setTimeout","prepareDataForTable","rawData","index","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onFileUpload","onForecastPeriodsChange","onGenerateForecast","onOptimizeForecast","onExportForecast","disableOptimize","disableExport","onOptimize","onTabChange","tabs","label","disabled","onDataUpdate","readOnly","isForecasted","actualData","forecastData","optimizedData","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport axios from 'axios';\n\n// API base URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nfunction App() {\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' });\n  const [savings, setSavings] = useState(null);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, []);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n      setData(response.data.data);\n      setSummary(response.data.summary);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  };\n\n  // Handle file upload\n  const handleFileUpload = async (file) => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      setData(response.data.data);\n      setSummary(response.data.summary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to upload file', 'error');\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = (updatedData) => {\n    setData(updatedData);\n    \n    // Determine available columns\n    const firstRow = updatedData[0] || {};\n    const numericColumns = ['energy_kwh', 'production_units', 'transport_km', 'y'];\n    const optionalColumns = ['waste_kg', 'water_m3', 'fuel_l', 'grid_intensity'];\n    \n    const availableColumns = [\n      ...numericColumns.filter(col => col in firstRow),\n      ...optionalColumns.filter(col => col in firstRow)\n    ];\n    \n    // Recalculate summary\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      total_rows: updatedData.length\n    };\n    \n    availableColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = updatedData\n        .map(item => item[col])\n        .filter(value => value !== '' && value !== null && value !== undefined)\n        .map(value => parseFloat(value));\n      \n      if (values.length > 0) {\n        summaryData.mean[col] = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n      } else {\n        summaryData.mean[col] = 0;\n        summaryData.min[col] = 0;\n        summaryData.max[col] = 0;\n      }\n    });\n    \n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = async () => {\n    try {\n      // Ensure all data is properly formatted before sending to backend\n      const formattedData = data.map(row => {\n        const newRow = {...row};\n        \n        // Determine available columns\n        const numericColumns = ['energy_kwh', 'production_units', 'transport_km', 'y'];\n        const optionalColumns = ['waste_kg', 'water_m3', 'fuel_l', 'grid_intensity'];\n        \n        const availableColumns = [\n          ...numericColumns.filter(col => col in newRow),\n          ...optionalColumns.filter(col => col in newRow)\n        ];\n        \n        // Ensure all numeric fields are numbers\n        availableColumns.forEach(field => {\n          if (newRow[field] === '' || newRow[field] === null || newRow[field] === undefined) {\n            newRow[field] = 0; // Default to 0 for empty values\n          } else if (typeof newRow[field] === 'string') {\n            newRow[field] = parseFloat(newRow[field]);\n          }\n        });\n        \n        return newRow;\n      });\n      \n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/predict`, {\n        data: formattedData,\n        forecast_periods: forecastPeriods\n      });\n      \n      setForecast(response.data.forecast);\n      setSuggestions(response.data.suggestions);\n      setLoading(false);\n      showNotification('Forecast generated successfully', 'success');\n      setActiveTab('forecast');\n      \n      // Reset optimized forecast when new forecast is generated\n      setOptimizedForecast(null);\n      setSavings(null);\n    } catch (error) {\n      console.error('Error generating forecast:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to generate forecast', 'error');\n    }\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      // Ensure all data is properly formatted before sending to backend\n      const formattedData = data.map(row => {\n        const newRow = {...row};\n        \n        // Determine available columns\n        const numericColumns = ['energy_kwh', 'production_units', 'transport_km', 'y'];\n        const optionalColumns = ['waste_kg', 'water_m3', 'fuel_l', 'grid_intensity'];\n        \n        const availableColumns = [\n          ...numericColumns.filter(col => col in newRow),\n          ...optionalColumns.filter(col => col in newRow)\n        ];\n        \n        // Ensure all numeric fields are numbers\n        availableColumns.forEach(field => {\n          if (newRow[field] === '' || newRow[field] === null || newRow[field] === undefined) {\n            newRow[field] = 0; // Default to 0 for empty values\n          } else if (typeof newRow[field] === 'string') {\n            newRow[field] = parseFloat(newRow[field]);\n          }\n        });\n        \n        return newRow;\n      });\n      \n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/optimize`, {\n        data: formattedData,\n        suggestions: suggestions,\n        forecast_periods: forecastPeriods\n      });\n      \n      setOptimizedForecast(response.data.optimized_forecast);\n      setSavings({\n        total: response.data.total_reduction,\n        percentage: response.data.avg_reduction_pct\n      });\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n    } catch (error) {\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to optimize forecast', 'error');\n    }\n  };\n\n  // Export forecast to CSV\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(\n        `${API_BASE_URL}/export`,\n        { \n          forecast: forecast,\n          optimized: optimizedForecast\n        },\n        { responseType: 'blob' }\n      );\n      \n      // Create a download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'carbon_forecast.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification('Failed to export forecast', 'error');\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type) => {\n    setNotification({ show: true, message, type });\n    setTimeout(() => {\n      setNotification({ show: false, message: '', type: 'success' });\n    }, 5000);\n  };\n\n  // Prepare data for DataTable component\n  const prepareDataForTable = (rawData) => {\n    return rawData.map((row, index) => ({\n      ...row,\n      id: row.id || index\n    }));\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      \n      {loading && <LoadingBar />}\n      \n      {notification.show && (\n        <Notification \n          message={notification.message} \n          type={notification.type} \n          onClose={() => setNotification({ show: false, message: '', type: 'success' })} \n        />\n      )}\n      \n      <main className=\"main-content\">\n        <div className=\"left-panel\">\n          <UploadZone onFileUpload={handleFileUpload} />\n          \n          <ForecastControls \n            forecastPeriods={forecastPeriods}\n            onForecastPeriodsChange={setForecastPeriods}\n            onGenerateForecast={handleGenerateForecast}\n            onOptimizeForecast={handleOptimizeForecast}\n            onExportForecast={handleExportForecast}\n            disableOptimize={!forecast}\n            disableExport={!forecast && !optimizedForecast}\n          />\n          \n          {suggestions.length > 0 && (\n            <OptimizationPanel \n              suggestions={suggestions} \n              savings={savings}\n              onOptimize={handleOptimizeForecast}\n            />\n          )}\n        </div>\n        \n        <div className=\"right-panel\">\n          <TabPanel \n            activeTab={activeTab} \n            onTabChange={setActiveTab}\n            tabs={[\n              { id: 'data', label: 'Data' },\n              { id: 'forecast', label: 'Forecast', disabled: !forecast },\n              { id: 'plot', label: 'Plot', disabled: !forecast }\n            ]}\n          />\n          \n          {activeTab === 'data' && (\n            <DataTable \n              data={prepareDataForTable(data)} \n              onDataUpdate={(updatedData) => {\n                const formattedData = updatedData.map((row, index) => ({\n                  ...row,\n                  id: row.id || index\n                }));\n                handleDataUpdate(formattedData);\n              }}\n              summary={summary}\n            />\n          )}\n          \n          {activeTab === 'forecast' && forecast && (\n            <div className=\"forecast-table-container\">\n              <h3>Forecast Results</h3>\n              <DataTable \n                data={optimizedForecast || forecast} \n                readOnly={true}\n                isForecasted={true}\n              />\n            </div>\n          )}\n          \n          {activeTab === 'plot' && forecast && (\n            <ForecastChart \n              actualData={data}\n              forecastData={forecast}\n              optimizedData={optimizedForecast}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}