{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\ForecastChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, CategoryScale, LinearScale, PointElement, LineElement, LineController, Title, Tooltip, Legend } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(CategoryScale, LinearScale, PointElement, LineElement, LineController, Title, Tooltip, Legend);\nconst ForecastChart = ({\n  actualData,\n  forecastData,\n  optimizedData\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    // Clean up function to destroy chart when component unmounts\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!actualData || !forecastData || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n    const ctx = chartRef.current.getContext('2d');\n\n    // Format data for chart\n    const formatData = () => {\n      // Process actual data\n      const actualDates = actualData.map(d => new Date(d.date).toISOString().split('T')[0]);\n      const actualValues = actualData.map(d => {\n        const val = d.emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process forecast data\n      const forecastDates = forecastData.map(d => new Date(d.date).toISOString().split('T')[0]);\n      const forecastValues = forecastData.map(d => {\n        const val = d.predicted_emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process bounds if available\n      let lowerBounds = [];\n      let upperBounds = [];\n      if (forecastData[0] && 'lower_bound' in forecastData[0]) {\n        lowerBounds = forecastData.map(d => {\n          const val = d.lower_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n        upperBounds = forecastData.map(d => {\n          const val = d.upper_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n\n      // Process optimized data if available\n      let optimizedValues = [];\n      if (optimizedData) {\n        optimizedValues = optimizedData.map(d => {\n          const val = d.predicted_emissions;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n      return {\n        actualDates,\n        actualValues,\n        forecastDates,\n        forecastValues,\n        lowerBounds,\n        upperBounds,\n        optimizedValues\n      };\n    };\n    const {\n      actualDates,\n      actualValues,\n      forecastDates,\n      forecastValues,\n      lowerBounds,\n      upperBounds,\n      optimizedValues\n    } = formatData();\n\n    // Combine all dates for x-axis\n    const allDates = [...actualDates, ...forecastDates];\n\n    // Create datasets\n    const datasets = [{\n      label: 'Actual Emissions',\n      data: actualValues,\n      borderColor: '#00FFFF',\n      // Cyan\n      backgroundColor: 'rgba(0, 255, 255, 0.1)',\n      borderWidth: 2,\n      pointBackgroundColor: '#00FFFF',\n      pointBorderColor: '#00FFFF',\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      tension: 0.4,\n      segment: {\n        borderColor: ctx => '#00FFFF'\n      }\n    }, {\n      label: 'Forecasted Emissions',\n      data: Array(actualValues.length).fill(null).concat(forecastValues),\n      borderColor: '#FF00FF',\n      // Magenta\n      backgroundColor: 'rgba(255, 0, 255, 0.1)',\n      borderWidth: 2,\n      pointBackgroundColor: '#FF00FF',\n      pointBorderColor: '#FF00FF',\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      tension: 0.4\n    }];\n\n    // Add bounds if available\n    if (lowerBounds.length > 0 && upperBounds.length > 0) {\n      datasets.push({\n        label: 'Upper Bound',\n        data: Array(actualValues.length).fill(null).concat(upperBounds),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'transparent',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n      datasets.push({\n        label: 'Lower Bound',\n        data: Array(actualValues.length).fill(null).concat(lowerBounds),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n    }\n\n    // Add optimized forecast if available\n    if (optimizedValues.length > 0) {\n      datasets.push({\n        label: 'Optimized Emissions',\n        data: Array(actualValues.length).fill(null).concat(optimizedValues),\n        borderColor: '#00FF00',\n        // Green\n        backgroundColor: 'rgba(0, 255, 0, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FF00',\n        pointBorderColor: '#00FF00',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      });\n    }\n\n    // Create chart configuration\n    const config = {\n      type: 'line',\n      data: {\n        labels: allDates,\n        datasets: datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 1000,\n          easing: 'easeOutQuart'\n        },\n        scales: {\n          x: {\n            type: 'category',\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC',\n              maxRotation: 45,\n              minRotation: 45\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Emissions (tons CO2e)',\n              color: '#CCC'\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              color: '#CCC',\n              font: {\n                family: \"'Orbitron', sans-serif\",\n                size: 12\n              },\n              boxWidth: 15,\n              usePointStyle: true\n            }\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            titleFont: {\n              family: \"'Orbitron', sans-serif\"\n            },\n            bodyFont: {\n              family: \"'Roboto', sans-serif\"\n            },\n            borderColor: 'rgba(0, 255, 255, 0.3)',\n            borderWidth: 1,\n            callbacks: {\n              label: function (context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                }\n                return label;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    // Create new chart\n    chartInstance.current = new Chart(ctx, config);\n  }, [actualData, forecastData, optimizedData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#00FFFF'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: \"Actual Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#FF00FF'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: \"Forecasted Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), optimizedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#00FF00'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: \"Optimized Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 274,\n    columnNumber: 5\n  }, this);\n};\n_s(ForecastChart, \"7fjJSqHc7Us8KoBJ87EcyyXXnwQ=\");\n_c = ForecastChart;\nexport default ForecastChart;\nvar _c;\n$RefreshReg$(_c, \"ForecastChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","CategoryScale","LinearScale","PointElement","LineElement","LineController","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","ForecastChart","actualData","forecastData","optimizedData","_s","chartRef","chartInstance","current","destroy","ctx","getContext","formatData","actualDates","map","d","Date","date","toISOString","split","actualValues","val","emissions","parseFloat","forecastDates","forecastValues","predicted_emissions","lowerBounds","upperBounds","lower_bound","upper_bound","optimizedValues","allDates","datasets","label","data","borderColor","backgroundColor","borderWidth","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","tension","segment","Array","length","fill","concat","push","borderDash","config","type","labels","options","responsive","maintainAspectRatio","animation","duration","easing","scales","x","grid","color","ticks","maxRotation","minRotation","y","title","display","text","plugins","legend","position","font","family","size","boxWidth","usePointStyle","tooltip","titleFont","bodyFont","callbacks","context","dataset","parsed","toFixed","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/ForecastChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  Chart,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  LineController,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\n\n// Register Chart.js components\nChart.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  LineController,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst ForecastChart = ({ actualData, forecastData, optimizedData }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    // Clean up function to destroy chart when component unmounts\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!actualData || !forecastData || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n\n    const ctx = chartRef.current.getContext('2d');\n\n    // Format data for chart\n    const formatData = () => {\n      // Process actual data\n      const actualDates = actualData.map(d => new Date(d.date).toISOString().split('T')[0]);\n      const actualValues = actualData.map(d => {\n        const val = d.emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process forecast data\n      const forecastDates = forecastData.map(d => new Date(d.date).toISOString().split('T')[0]);\n      const forecastValues = forecastData.map(d => {\n        const val = d.predicted_emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process bounds if available\n      let lowerBounds = [];\n      let upperBounds = [];\n      if (forecastData[0] && 'lower_bound' in forecastData[0]) {\n        lowerBounds = forecastData.map(d => {\n          const val = d.lower_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n        upperBounds = forecastData.map(d => {\n          const val = d.upper_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n\n      // Process optimized data if available\n      let optimizedValues = [];\n      if (optimizedData) {\n        optimizedValues = optimizedData.map(d => {\n          const val = d.predicted_emissions;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n\n      return {\n        actualDates,\n        actualValues,\n        forecastDates,\n        forecastValues,\n        lowerBounds,\n        upperBounds,\n        optimizedValues\n      };\n    };\n\n    const {\n      actualDates,\n      actualValues,\n      forecastDates,\n      forecastValues,\n      lowerBounds,\n      upperBounds,\n      optimizedValues\n    } = formatData();\n\n    // Combine all dates for x-axis\n    const allDates = [...actualDates, ...forecastDates];\n    \n    // Create datasets\n    const datasets = [\n      {\n        label: 'Actual Emissions',\n        data: actualValues,\n        borderColor: '#00FFFF', // Cyan\n        backgroundColor: 'rgba(0, 255, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FFFF',\n        pointBorderColor: '#00FFFF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4,\n        segment: {\n          borderColor: ctx => '#00FFFF'\n        }\n      },\n      {\n        label: 'Forecasted Emissions',\n        data: Array(actualValues.length).fill(null).concat(forecastValues),\n        borderColor: '#FF00FF', // Magenta\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#FF00FF',\n        pointBorderColor: '#FF00FF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      }\n    ];\n\n    // Add bounds if available\n    if (lowerBounds.length > 0 && upperBounds.length > 0) {\n      datasets.push({\n        label: 'Upper Bound',\n        data: Array(actualValues.length).fill(null).concat(upperBounds),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'transparent',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n      \n      datasets.push({\n        label: 'Lower Bound',\n        data: Array(actualValues.length).fill(null).concat(lowerBounds),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n    }\n\n    // Add optimized forecast if available\n    if (optimizedValues.length > 0) {\n      datasets.push({\n        label: 'Optimized Emissions',\n        data: Array(actualValues.length).fill(null).concat(optimizedValues),\n        borderColor: '#00FF00', // Green\n        backgroundColor: 'rgba(0, 255, 0, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FF00',\n        pointBorderColor: '#00FF00',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      });\n    }\n\n    // Create chart configuration\n    const config = {\n      type: 'line',\n      data: {\n        labels: allDates,\n        datasets: datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 1000,\n          easing: 'easeOutQuart'\n        },\n        scales: {\n          x: {\n            type: 'category',\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC',\n              maxRotation: 45,\n              minRotation: 45\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Emissions (tons CO2e)',\n              color: '#CCC'\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              color: '#CCC',\n              font: {\n                family: \"'Orbitron', sans-serif\",\n                size: 12\n              },\n              boxWidth: 15,\n              usePointStyle: true\n            }\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            titleFont: {\n              family: \"'Orbitron', sans-serif\"\n            },\n            bodyFont: {\n              family: \"'Roboto', sans-serif\"\n            },\n            borderColor: 'rgba(0, 255, 255, 0.3)',\n            borderWidth: 1,\n            callbacks: {\n              label: function(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                }\n                return label;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    // Create new chart\n    chartInstance.current = new Chart(ctx, config);\n\n  }, [actualData, forecastData, optimizedData]);\n\n  return (\n    <div className=\"chart-container\">\n      <div className=\"chart-wrapper\">\n        <canvas ref={chartRef}></canvas>\n      </div>\n      <div className=\"chart-legend\">\n        <div className=\"legend-item\">\n          <div className=\"legend-color\" style={{ backgroundColor: '#00FFFF' }}></div>\n          <div className=\"legend-label\">Actual Emissions</div>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-color\" style={{ backgroundColor: '#FF00FF' }}></div>\n          <div className=\"legend-label\">Forecasted Emissions</div>\n        </div>\n        {optimizedData && (\n          <div className=\"legend-item\">\n            <div className=\"legend-color\" style={{ backgroundColor: '#00FF00' }}></div>\n            <div className=\"legend-label\">Optimized Emissions</div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ForecastChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}