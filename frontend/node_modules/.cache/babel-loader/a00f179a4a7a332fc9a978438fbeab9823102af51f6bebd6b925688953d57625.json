{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\ForecastChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForecastChart = ({\n  data,\n  forecast,\n  optimizedForecast,\n  impacts\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Clean up chart on unmount\n  useEffect(() => {\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!forecast || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n    const ctx = chartRef.current.getContext('2d');\n\n    // Format data for chart\n    const formatData = () => {\n      // Process actual data from the data prop\n      const actualDates = data ? data.map(d => new Date(d.date)) : [];\n      const actualValues = data ? data.map(d => {\n        const val = d.emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      }) : [];\n\n      // Process forecast data\n      const forecastDates = forecast.map(d => new Date(d.ds));\n      const forecastValues = forecast.map(d => {\n        const val = d.predicted_emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process bounds if available\n      let lowerBounds = [];\n      let upperBounds = [];\n      if (forecast[0] && 'lower_bound' in forecast[0]) {\n        lowerBounds = forecast.map(d => {\n          const val = d.lower_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n        upperBounds = forecast.map(d => {\n          const val = d.upper_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n\n      // Process optimized data if available\n      let optimizedValues = [];\n      let optimizedDates = [];\n      if (optimizedForecast) {\n        optimizedDates = optimizedForecast.map(d => new Date(d.ds));\n        optimizedValues = optimizedForecast.map(d => {\n          const val = d.predicted_emissions;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n      return {\n        actualDates,\n        actualValues,\n        forecastDates,\n        forecastValues,\n        lowerBounds,\n        upperBounds,\n        optimizedDates,\n        optimizedValues\n      };\n    };\n    const {\n      actualDates,\n      actualValues,\n      forecastDates,\n      forecastValues,\n      lowerBounds,\n      upperBounds,\n      optimizedDates,\n      optimizedValues\n    } = formatData();\n\n    // Create datasets\n    const datasets = [];\n\n    // Add actual data if available\n    if (actualDates.length > 0) {\n      datasets.push({\n        label: 'Actual Emissions',\n        data: actualDates.map((date, index) => ({\n          x: date,\n          y: actualValues[index]\n        })),\n        borderColor: '#00FFFF',\n        // Cyan\n        backgroundColor: 'rgba(0, 255, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FFFF',\n        pointBorderColor: '#00FFFF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4,\n        fill: false\n      });\n    }\n\n    // Add forecast data\n    datasets.push({\n      label: 'Forecast Emissions',\n      data: forecastDates.map((date, index) => ({\n        x: date,\n        y: forecastValues[index]\n      })),\n      borderColor: '#FF00FF',\n      // Magenta\n      backgroundColor: 'rgba(255, 0, 255, 0.1)',\n      borderWidth: 2,\n      pointBackgroundColor: '#FF00FF',\n      pointBorderColor: '#FF00FF',\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      tension: 0.4,\n      fill: false\n    });\n\n    // Add confidence interval if available\n    if (lowerBounds.length > 0 && upperBounds.length > 0) {\n      datasets.push({\n        label: 'Confidence Interval',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: (lowerBounds[index] + upperBounds[index]) / 2,\n          min: lowerBounds[index],\n          max: upperBounds[index]\n        })),\n        backgroundColor: 'rgba(255, 0, 255, 0.2)',\n        borderWidth: 0,\n        pointRadius: 0,\n        fill: true\n      });\n    }\n\n    // Add optimized forecast if available\n    if (optimizedValues.length > 0) {\n      datasets.push({\n        label: 'Optimized Emissions',\n        data: optimizedDates.map((date, index) => ({\n          x: date,\n          y: optimizedValues[index]\n        })),\n        borderColor: '#00FF00',\n        // Green\n        backgroundColor: 'rgba(0, 255, 0, 0.1)',\n        borderWidth: 2,\n        borderDash: [5, 5],\n        pointBackgroundColor: '#00FF00',\n        pointBorderColor: '#00FF00',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4,\n        fill: false\n      });\n    }\n\n    // Create chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 2000,\n          easing: 'easeOutQuart'\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'month',\n              displayFormats: {\n                month: 'MMM yyyy'\n              }\n            },\n            title: {\n              display: true,\n              text: 'Date',\n              color: '#ccc',\n              font: {\n                family: 'Orbitron',\n                size: 14\n              }\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#ccc',\n              font: {\n                family: 'Roboto',\n                size: 12\n              }\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Emissions (tons CO2e)',\n              color: '#ccc',\n              font: {\n                family: 'Orbitron',\n                size: 14\n              }\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#ccc',\n              font: {\n                family: 'Roboto',\n                size: 12\n              }\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              font: {\n                family: 'Orbitron',\n                size: 12\n              },\n              color: '#fff',\n              padding: 20\n            }\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.8)',\n            titleFont: {\n              family: 'Orbitron',\n              size: 14\n            },\n            bodyFont: {\n              family: 'Roboto',\n              size: 13\n            },\n            borderColor: 'rgba(0, 255, 255, 0.3)',\n            borderWidth: 1,\n            callbacks: {\n              label: function (context) {\n                const dataPoint = context.raw;\n                if (dataPoint && dataPoint.min !== undefined && dataPoint.max !== undefined) {\n                  return [`Min: ${dataPoint.min.toFixed(2)} tons CO2e`, `Max: ${dataPoint.max.toFixed(2)} tons CO2e`];\n                }\n                return `${context.dataset.label}: ${context.parsed.y.toFixed(2)} tons CO2e`;\n              }\n            }\n          }\n        }\n      }\n    });\n  }, [data, forecast, optimizedForecast]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forecast-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Carbon Emissions Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), impacts && Object.keys(impacts).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"impact-factors\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Key Impact Factors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"impact-list\",\n        children: Object.entries(impacts).sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score)).slice(0, 3).map(([factor, data], index) => {\n          let factorName = factor;\n          if (factor === 'energy_use') factorName = 'Energy Use';\n          if (factor === 'transport') factorName = 'Transport';\n          if (factor === 'waste') factorName = 'Waste';\n          if (factor === 'water') factorName = 'Water';\n          if (factor === 'fuel') factorName = 'Fuel';\n          if (factor === 'grid_intensity') factorName = 'Grid Intensity';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"impact-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"impact-rank\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"impact-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"impact-name\",\n                children: factorName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"impact-score\",\n                children: [\"Impact Score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"impact-value\",\n                  children: Math.abs(data.impact_score).toFixed(2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 39\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 21\n            }, this)]\n          }, factor, true, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n_s(ForecastChart, \"7fjJSqHc7Us8KoBJ87EcyyXXnwQ=\");\n_c = ForecastChart;\nexport default ForecastChart;\nvar _c;\n$RefreshReg$(_c, \"ForecastChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ForecastChart","data","forecast","optimizedForecast","impacts","_s","chartRef","chartInstance","current","destroy","ctx","getContext","formatData","actualDates","map","d","Date","date","actualValues","val","emissions","parseFloat","forecastDates","ds","forecastValues","predicted_emissions","lowerBounds","upperBounds","lower_bound","upper_bound","optimizedValues","optimizedDates","datasets","length","push","label","index","x","y","borderColor","backgroundColor","borderWidth","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","tension","fill","min","max","borderDash","type","options","responsive","maintainAspectRatio","animation","duration","easing","scales","time","unit","displayFormats","month","title","display","text","color","font","family","size","grid","ticks","plugins","legend","position","labels","padding","tooltip","titleFont","bodyFont","callbacks","context","dataPoint","raw","undefined","toFixed","dataset","parsed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","Object","keys","entries","sort","a","b","Math","abs","impact_score","slice","factor","factorName","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/ForecastChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\n\nconst ForecastChart = ({ data, forecast, optimizedForecast, impacts }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Clean up chart on unmount\n  useEffect(() => {\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!forecast || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n\n    const ctx = chartRef.current.getContext('2d');\n\n    // Format data for chart\n    const formatData = () => {\n      // Process actual data from the data prop\n      const actualDates = data ? data.map(d => new Date(d.date)) : [];\n      const actualValues = data ? data.map(d => {\n        const val = d.emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      }) : [];\n\n      // Process forecast data\n      const forecastDates = forecast.map(d => new Date(d.ds));\n      const forecastValues = forecast.map(d => {\n        const val = d.predicted_emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process bounds if available\n      let lowerBounds = [];\n      let upperBounds = [];\n      if (forecast[0] && 'lower_bound' in forecast[0]) {\n        lowerBounds = forecast.map(d => {\n          const val = d.lower_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n        upperBounds = forecast.map(d => {\n          const val = d.upper_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n\n      // Process optimized data if available\n      let optimizedValues = [];\n      let optimizedDates = [];\n      if (optimizedForecast) {\n        optimizedDates = optimizedForecast.map(d => new Date(d.ds));\n        optimizedValues = optimizedForecast.map(d => {\n          const val = d.predicted_emissions;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n\n      return {\n        actualDates,\n        actualValues,\n        forecastDates,\n        forecastValues,\n        lowerBounds,\n        upperBounds,\n        optimizedDates,\n        optimizedValues\n      };\n    };\n\n    const {\n      actualDates,\n      actualValues,\n      forecastDates,\n      forecastValues,\n      lowerBounds,\n      upperBounds,\n      optimizedDates,\n      optimizedValues\n    } = formatData();\n\n    // Create datasets\n    const datasets = [];\n    \n    // Add actual data if available\n    if (actualDates.length > 0) {\n      datasets.push({\n        label: 'Actual Emissions',\n        data: actualDates.map((date, index) => ({\n          x: date,\n          y: actualValues[index]\n        })),\n        borderColor: '#00FFFF', // Cyan\n        backgroundColor: 'rgba(0, 255, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FFFF',\n        pointBorderColor: '#00FFFF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4,\n        fill: false\n      });\n    }\n    \n    // Add forecast data\n    datasets.push({\n      label: 'Forecast Emissions',\n      data: forecastDates.map((date, index) => ({\n        x: date,\n        y: forecastValues[index]\n      })),\n      borderColor: '#FF00FF', // Magenta\n      backgroundColor: 'rgba(255, 0, 255, 0.1)',\n      borderWidth: 2,\n      pointBackgroundColor: '#FF00FF',\n      pointBorderColor: '#FF00FF',\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      tension: 0.4,\n      fill: false\n    });\n\n    // Add confidence interval if available\n    if (lowerBounds.length > 0 && upperBounds.length > 0) {\n      datasets.push({\n        label: 'Confidence Interval',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: (lowerBounds[index] + upperBounds[index]) / 2,\n          min: lowerBounds[index],\n          max: upperBounds[index]\n        })),\n        backgroundColor: 'rgba(255, 0, 255, 0.2)',\n        borderWidth: 0,\n        pointRadius: 0,\n        fill: true\n      });\n    }\n\n    // Add optimized forecast if available\n    if (optimizedValues.length > 0) {\n      datasets.push({\n        label: 'Optimized Emissions',\n        data: optimizedDates.map((date, index) => ({\n          x: date,\n          y: optimizedValues[index]\n        })),\n        borderColor: '#00FF00', // Green\n        backgroundColor: 'rgba(0, 255, 0, 0.1)',\n        borderWidth: 2,\n        borderDash: [5, 5],\n        pointBackgroundColor: '#00FF00',\n        pointBorderColor: '#00FF00',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4,\n        fill: false\n      });\n    }\n\n    // Create chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 2000,\n          easing: 'easeOutQuart'\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'month',\n              displayFormats: {\n                month: 'MMM yyyy'\n              }\n            },\n            title: {\n              display: true,\n              text: 'Date',\n              color: '#ccc',\n              font: {\n                family: 'Orbitron',\n                size: 14\n              }\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#ccc',\n              font: {\n                family: 'Roboto',\n                size: 12\n              }\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Emissions (tons CO2e)',\n              color: '#ccc',\n              font: {\n                family: 'Orbitron',\n                size: 14\n              }\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#ccc',\n              font: {\n                family: 'Roboto',\n                size: 12\n              }\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              font: {\n                family: 'Orbitron',\n                size: 12\n              },\n              color: '#fff',\n              padding: 20\n            }\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.8)',\n            titleFont: {\n              family: 'Orbitron',\n              size: 14\n            },\n            bodyFont: {\n              family: 'Roboto',\n              size: 13\n            },\n            borderColor: 'rgba(0, 255, 255, 0.3)',\n            borderWidth: 1,\n            callbacks: {\n              label: function(context) {\n                const dataPoint = context.raw;\n                if (dataPoint && dataPoint.min !== undefined && dataPoint.max !== undefined) {\n                  return [\n                    `Min: ${dataPoint.min.toFixed(2)} tons CO2e`,\n                    `Max: ${dataPoint.max.toFixed(2)} tons CO2e`\n                  ];\n                }\n                return `${context.dataset.label}: ${context.parsed.y.toFixed(2)} tons CO2e`;\n              }\n            }\n          }\n        }\n      }\n    });\n  }, [data, forecast, optimizedForecast]);\n\n  return (\n    <div className=\"forecast-chart-container\">\n      <h3 className=\"chart-title\">Carbon Emissions Forecast</h3>\n      <div className=\"chart-container\">\n        <canvas ref={chartRef}></canvas>\n      </div>\n      \n      {impacts && Object.keys(impacts).length > 0 && (\n        <div className=\"impact-factors\">\n          <h4>Key Impact Factors</h4>\n          <div className=\"impact-list\">\n            {Object.entries(impacts)\n              .sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score))\n              .slice(0, 3)\n              .map(([factor, data], index) => {\n                let factorName = factor;\n                if (factor === 'energy_use') factorName = 'Energy Use';\n                if (factor === 'transport') factorName = 'Transport';\n                if (factor === 'waste') factorName = 'Waste';\n                if (factor === 'water') factorName = 'Water';\n                if (factor === 'fuel') factorName = 'Fuel';\n                if (factor === 'grid_intensity') factorName = 'Grid Intensity';\n                \n                return (\n                  <div key={factor} className=\"impact-item\">\n                    <div className=\"impact-rank\">{index + 1}</div>\n                    <div className=\"impact-info\">\n                      <div className=\"impact-name\">{factorName}</div>\n                      <div className=\"impact-score\">\n                        Impact Score: <span className=\"impact-value\">{Math.abs(data.impact_score).toFixed(2)}</span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ForecastChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}