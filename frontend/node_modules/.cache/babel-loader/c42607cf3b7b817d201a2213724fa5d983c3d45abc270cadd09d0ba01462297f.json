{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport ModelPerformance from './components/ModelPerformance';\nimport axios from 'axios';\n\n// API base URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success'\n  });\n  const [savings, setSavings] = useState(null);\n  const [impacts, setImpacts] = useState(null);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n\n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        // Rename fields to match the required format if needed\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0,\n          // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0,\n          // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      setData(processedData);\n\n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  }, []);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, [fetchSampleData]);\n\n  // Calculate standard deviation for each numeric column\n  const calculateStdDev = data => {\n    if (!data || data.length === 0) return {};\n    const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    const stdDev = {};\n    numericColumns.forEach(col => {\n      // Get values for this column, filtering out non-numeric values\n      const values = data.map(item => parseFloat(item[col])).filter(val => !isNaN(val));\n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n\n        // Calculate sum of squared differences\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const sumSquaredDiffs = squaredDiffs.reduce((sum, val) => sum + val, 0);\n\n        // Calculate standard deviation\n        stdDev[col] = Math.sqrt(sumSquaredDiffs / values.length);\n      } else {\n        stdDev[col] = 0;\n      }\n    });\n    return stdDev;\n  };\n\n  // Handle file upload\n  const handleFileUpload = async file => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0,\n          // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0,\n          // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      setData(processedData);\n\n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n\n      // Reset forecast and optimization data\n      setForecast(null);\n      setOptimizedForecast(null);\n      setSuggestions([]);\n      setImpacts(null);\n      setSavings(null);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to upload file', 'error');\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = updatedData => {\n    setData(updatedData);\n\n    // Calculate summary statistics\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      std: {},\n      total_rows: updatedData.length\n    };\n\n    // Determine available columns\n    const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    numericColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = updatedData.map(item => item[col]).filter(value => value !== '' && value !== null && value !== undefined).map(value => parseFloat(value));\n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.mean[col] = mean;\n\n        // Calculate min and max\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n\n        // Calculate standard deviation\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.std[col] = Math.sqrt(avgSquaredDiff);\n      }\n    });\n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = async () => {\n    try {\n      if (!data || data.length < 3) {\n        showNotification('Need at least 3 months of data for forecasting', 'error');\n        return;\n      }\n      setLoading(true);\n\n      // Validate data before proceeding\n      const invalidRows = data.filter(row => !row.date || isNaN(parseFloat(row.emissions)) || parseFloat(row.emissions) < 0);\n      if (invalidRows.length > 0) {\n        setLoading(false);\n        showNotification('Some rows have invalid or missing data. Please check your emissions data.', 'error');\n        return;\n      }\n\n      // Check for duplicate dates\n      const dateSet = new Set();\n      const duplicateDates = data.filter(row => {\n        if (dateSet.has(row.date)) return true;\n        dateSet.add(row.date);\n        return false;\n      });\n      if (duplicateDates.length > 0) {\n        setLoading(false);\n        showNotification('Duplicate dates found. Each date must be unique.', 'error');\n        return;\n      }\n\n      // Create a simplified forecast for demo purposes\n      // This will allow the forecast to work even without the backend\n      const lastDate = new Date(Math.max(...data.map(row => new Date(row.date))));\n      const mockForecast = [];\n\n      // Sort data by date for better forecasting\n      const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));\n\n      // Calculate average monthly change for trend\n      let avgChange = 0;\n      if (sortedData.length > 1) {\n        const changes = [];\n        for (let i = 1; i < sortedData.length; i++) {\n          const prev = parseFloat(sortedData[i - 1].emissions) || 0;\n          const curr = parseFloat(sortedData[i].emissions) || 0;\n          if (prev > 0) {\n            changes.push((curr - prev) / prev);\n          }\n        }\n        if (changes.length > 0) {\n          avgChange = changes.reduce((sum, val) => sum + val, 0) / changes.length;\n        }\n      }\n\n      // Get the last known emissions value\n      const lastEmissions = parseFloat(sortedData[sortedData.length - 1].emissions) || 0;\n\n      // Generate mock forecast data with trend\n      for (let i = 1; i <= forecastPeriods; i++) {\n        const forecastDate = new Date(lastDate);\n        forecastDate.setMonth(forecastDate.getMonth() + i);\n\n        // Apply trend with some randomness\n        const trend = 1 + avgChange * 0.8 + Math.random() * avgChange * 0.4;\n        const predictedValue = lastEmissions * Math.pow(trend, i);\n\n        // Add random variation\n        const randomVariation = (Math.random() - 0.5) * 0.1 * predictedValue;\n        const finalPrediction = predictedValue + randomVariation;\n        mockForecast.push({\n          ds: forecastDate.toISOString().split('T')[0],\n          predicted_emissions: finalPrediction,\n          lower_bound: finalPrediction * 0.85,\n          upper_bound: finalPrediction * 1.15\n        });\n      }\n\n      // Generate mock impacts based on actual data values\n      const mockImpacts = {};\n      const avgEmissions = sortedData.reduce((sum, row) => sum + (parseFloat(row.emissions) || 0), 0) / sortedData.length;\n\n      // Calculate actual impact factors from data\n      if (data[0].energy_use !== undefined) {\n        mockImpacts.energy_use = {\n          coefficient: 0.0015,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.energy_use) || 0), 0) / data.length,\n          impact_score: 0.35 + Math.random() * 0.1\n        };\n      }\n      if (data[0].transport !== undefined) {\n        mockImpacts.transport = {\n          coefficient: 0.0008,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.transport) || 0), 0) / data.length,\n          impact_score: 0.25 + Math.random() * 0.1\n        };\n      }\n      if (data[0].waste !== undefined) {\n        mockImpacts.waste = {\n          coefficient: 0.012,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.waste) || 0), 0) / data.length,\n          impact_score: 0.15 + Math.random() * 0.1\n        };\n      }\n      if (data[0].water !== undefined) {\n        mockImpacts.water = {\n          coefficient: 0.0005,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.water) || 0), 0) / data.length,\n          impact_score: 0.12 + Math.random() * 0.1\n        };\n      }\n      if (data[0].fuel !== undefined) {\n        mockImpacts.fuel = {\n          coefficient: 0.0025,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.fuel) || 0), 0) / data.length,\n          impact_score: 0.30 + Math.random() * 0.1\n        };\n      }\n      if (data[0].grid_intensity !== undefined) {\n        mockImpacts.grid_intensity = {\n          coefficient: 0.0010,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.grid_intensity) || 0), 0) / data.length,\n          impact_score: 0.20 + Math.random() * 0.1\n        };\n      }\n\n      // Generate mock suggestions based on the highest impact factors\n      const sortedImpacts = Object.entries(mockImpacts).sort((a, b) => b[1].impact_score - a[1].impact_score);\n      const mockSuggestions = [];\n      sortedImpacts.forEach(([factor, data]) => {\n        let suggestion = {\n          factor: factor,\n          action: '',\n          estimated_saving: data.impact_score * avgEmissions * 0.2 // 20% potential reduction\n        };\n        switch (factor) {\n          case 'energy_use':\n            suggestion.action = \"Implement energy efficiency measures to reduce electricity consumption by 20%\";\n            break;\n          case 'transport':\n            suggestion.action = \"Optimize transportation routes or switch to electric vehicles\";\n            break;\n          case 'waste':\n            suggestion.action = \"Implement waste reduction and recycling programs\";\n            break;\n          case 'water':\n            suggestion.action = \"Install water-saving fixtures and implement water recycling\";\n            break;\n          case 'fuel':\n            suggestion.action = \"Transition to renewable energy sources or improve fuel efficiency\";\n            break;\n          case 'grid_intensity':\n            suggestion.action = \"Schedule high-energy operations during times of lower grid carbon intensity\";\n            break;\n          default:\n            suggestion.action = `Reduce ${factor.replace('_', ' ')} by implementing efficiency measures`;\n        }\n        mockSuggestions.push(suggestion);\n      });\n\n      // Calculate potential savings\n      const totalEmissions = data.reduce((sum, row) => sum + (parseFloat(row.emissions) || 0), 0);\n      const avgMonthlyEmissions = totalEmissions / data.length;\n      const potentialSavings = avgMonthlyEmissions * 0.15; // 15% reduction\n\n      const mockSavings = {\n        total: potentialSavings * forecastPeriods,\n        percentage: 15,\n        monthly: potentialSavings\n      };\n\n      // Set state with generated data\n      setForecast(mockForecast);\n      setImpacts(mockImpacts);\n      setSuggestions(mockSuggestions);\n      setSavings(mockSavings);\n\n      // Reset optimized forecast when new forecast is generated\n      setOptimizedForecast(null);\n\n      // Delay setting loading to false and changing tab to ensure UI updates properly\n      setTimeout(() => {\n        setLoading(false);\n        showNotification('Forecast generated successfully', 'success');\n        setActiveTab('forecast');\n      }, 500);\n    } catch (error) {\n      console.error('Error generating forecast:', error);\n      setLoading(false);\n      showNotification('Failed to generate forecast: ' + (error.message || 'Unknown error'), 'error');\n    }\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      if (!forecast) {\n        showNotification('Please generate a forecast first', 'error');\n        return;\n      }\n      setLoading(true);\n\n      // Create a mock optimized forecast with 15% reduction\n      const optimized = forecast.map(item => {\n        const reduction = item.predicted_emissions * 0.15;\n        return {\n          ...item,\n          predicted_emissions: item.predicted_emissions - reduction,\n          lower_bound: item.lower_bound - reduction * 0.8,\n          upper_bound: item.upper_bound - reduction * 0.8\n        };\n      });\n      setOptimizedForecast(optimized);\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n    } catch (error) {\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification('Failed to optimize forecast: ' + (error.message || 'Unknown error'), 'error');\n    }\n  };\n\n  // Export forecast data\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n\n      // Determine which forecast to export\n      const forecastToExport = optimizedForecast || forecast;\n      if (!forecastToExport) {\n        showNotification('No forecast data to export', 'error');\n        setLoading(false);\n        return;\n      }\n      const response = await axios.post(`${API_BASE_URL}/export`, {\n        forecast: forecastToExport\n      }, {\n        responseType: 'blob'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'carbon_forecast.xlsx');\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification('Failed to export forecast', 'error');\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type = 'success') => {\n    setNotification({\n      show: true,\n      message,\n      type\n    });\n\n    // Auto-hide notification after 5 seconds\n    setTimeout(() => {\n      setNotification(prev => ({\n        ...prev,\n        show: false\n      }));\n    }, 5000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 19\n    }, this), notification.show && /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type,\n      onClose: () => setNotification(prev => ({\n        ...prev,\n        show: false\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(TabPanel, {\n        activeTab: activeTab,\n        onTabChange: setActiveTab,\n        children: [/*#__PURE__*/_jsxDEV(TabPanel.Tab, {\n          id: \"data\",\n          label: \"Data\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-tab\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"data-controls\",\n              children: /*#__PURE__*/_jsxDEV(UploadZone, {\n                onFileUpload: handleFileUpload\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n              data: data,\n              onDataUpdate: handleDataUpdate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel.Tab, {\n          id: \"forecast\",\n          label: \"Forecast\",\n          disabled: !data || data.length < 3,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-left\",\n              children: [/*#__PURE__*/_jsxDEV(ForecastControls, {\n                forecastPeriods: forecastPeriods,\n                onForecastPeriodsChange: setForecastPeriods,\n                onGenerateForecast: handleGenerateForecast,\n                onOptimizeForecast: handleOptimizeForecast,\n                onExportForecast: handleExportForecast,\n                disableOptimize: !forecast,\n                disableExport: !forecast && !optimizedForecast\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 17\n              }, this), (forecast || optimizedForecast) && /*#__PURE__*/_jsxDEV(OptimizationPanel, {\n                suggestions: suggestions,\n                savings: savings,\n                onOptimize: handleOptimizeForecast\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 542,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-right\",\n              children: forecast && /*#__PURE__*/_jsxDEV(ForecastChart, {\n                data: data,\n                forecast: forecast,\n                optimizedForecast: optimizedForecast,\n                impacts: impacts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 564,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 562,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 541,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel.Tab, {\n          id: \"performance\",\n          label: \"Performance\",\n          disabled: !forecast || !impacts,\n          children: /*#__PURE__*/_jsxDEV(ModelPerformance, {\n            data: data,\n            forecast: forecast,\n            impacts: impacts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 576,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 513,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"g24Alfe5KPKzp9MdDhtIPHCx0KA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Header","DataTable","UploadZone","ForecastControls","ForecastChart","OptimizationPanel","Notification","LoadingBar","TabPanel","ModelPerformance","axios","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","data","setData","summary","setSummary","forecastPeriods","setForecastPeriods","forecast","setForecast","optimizedForecast","setOptimizedForecast","suggestions","setSuggestions","activeTab","setActiveTab","loading","setLoading","notification","setNotification","show","message","type","savings","setSavings","impacts","setImpacts","fetchSampleData","response","get","processedData","map","item","id","Date","now","Math","random","date","ds","energy_kwh","transport_km","waste_kg","water_m3","fuel_l","y","production_units","grid_intensity","enhancedSummary","std","calculateStdDev","showNotification","error","console","length","numericColumns","stdDev","forEach","col","values","parseFloat","filter","val","isNaN","mean","reduce","sum","squaredDiffs","pow","sumSquaredDiffs","sqrt","handleFileUpload","file","formData","FormData","append","post","headers","_error$response","_error$response$data","handleDataUpdate","updatedData","summaryData","min","max","total_rows","value","undefined","avgSquaredDiff","handleGenerateForecast","invalidRows","row","emissions","dateSet","Set","duplicateDates","has","add","lastDate","mockForecast","sortedData","sort","a","b","avgChange","changes","i","prev","curr","push","lastEmissions","forecastDate","setMonth","getMonth","trend","predictedValue","randomVariation","finalPrediction","toISOString","split","predicted_emissions","lower_bound","upper_bound","mockImpacts","avgEmissions","energy_use","coefficient","mean_value","impact_score","transport","waste","water","fuel","sortedImpacts","Object","entries","mockSuggestions","factor","suggestion","action","estimated_saving","replace","totalEmissions","avgMonthlyEmissions","potentialSavings","mockSavings","total","percentage","monthly","setTimeout","handleOptimizeForecast","optimized","reduction","handleExportForecast","forecastToExport","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","revokeObjectURL","removeChild","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onTabChange","Tab","label","onFileUpload","onDataUpdate","disabled","onForecastPeriodsChange","onGenerateForecast","onOptimizeForecast","onExportForecast","disableOptimize","disableExport","onOptimize","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport ModelPerformance from './components/ModelPerformance';\nimport axios from 'axios';\n\n// API base URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nfunction App() {\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' });\n  const [savings, setSavings] = useState(null);\n  const [impacts, setImpacts] = useState(null);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n      \n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        // Rename fields to match the required format if needed\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0, // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0, // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      \n      setData(processedData);\n      \n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      \n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  }, []);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, [fetchSampleData]);\n\n  // Calculate standard deviation for each numeric column\n  const calculateStdDev = (data) => {\n    if (!data || data.length === 0) return {};\n    \n    const numericColumns = [\n      'energy_use', 'transport', 'waste', 'water', \n      'fuel', 'emissions', 'production', 'grid_intensity'\n    ];\n    \n    const stdDev = {};\n    \n    numericColumns.forEach(col => {\n      // Get values for this column, filtering out non-numeric values\n      const values = data\n        .map(item => parseFloat(item[col]))\n        .filter(val => !isNaN(val));\n      \n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        \n        // Calculate sum of squared differences\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const sumSquaredDiffs = squaredDiffs.reduce((sum, val) => sum + val, 0);\n        \n        // Calculate standard deviation\n        stdDev[col] = Math.sqrt(sumSquaredDiffs / values.length);\n      } else {\n        stdDev[col] = 0;\n      }\n    });\n    \n    return stdDev;\n  };\n\n  // Handle file upload\n  const handleFileUpload = async (file) => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0, // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0, // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      \n      setData(processedData);\n      \n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      \n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n      \n      // Reset forecast and optimization data\n      setForecast(null);\n      setOptimizedForecast(null);\n      setSuggestions([]);\n      setImpacts(null);\n      setSavings(null);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to upload file', 'error');\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = (updatedData) => {\n    setData(updatedData);\n    \n    // Calculate summary statistics\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      std: {},\n      total_rows: updatedData.length\n    };\n    \n    // Determine available columns\n    const numericColumns = [\n      'energy_use', 'transport', 'waste', 'water', \n      'fuel', 'emissions', 'production', 'grid_intensity'\n    ];\n    \n    numericColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = updatedData\n        .map(item => item[col])\n        .filter(value => value !== '' && value !== null && value !== undefined)\n        .map(value => parseFloat(value));\n      \n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.mean[col] = mean;\n        \n        // Calculate min and max\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n        \n        // Calculate standard deviation\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.std[col] = Math.sqrt(avgSquaredDiff);\n      }\n    });\n    \n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = async () => {\n    try {\n      if (!data || data.length < 3) {\n        showNotification('Need at least 3 months of data for forecasting', 'error');\n        return;\n      }\n      \n      setLoading(true);\n      \n      // Validate data before proceeding\n      const invalidRows = data.filter(row => \n        !row.date || \n        isNaN(parseFloat(row.emissions)) || \n        parseFloat(row.emissions) < 0\n      );\n      \n      if (invalidRows.length > 0) {\n        setLoading(false);\n        showNotification('Some rows have invalid or missing data. Please check your emissions data.', 'error');\n        return;\n      }\n      \n      // Check for duplicate dates\n      const dateSet = new Set();\n      const duplicateDates = data.filter(row => {\n        if (dateSet.has(row.date)) return true;\n        dateSet.add(row.date);\n        return false;\n      });\n      \n      if (duplicateDates.length > 0) {\n        setLoading(false);\n        showNotification('Duplicate dates found. Each date must be unique.', 'error');\n        return;\n      }\n      \n      // Create a simplified forecast for demo purposes\n      // This will allow the forecast to work even without the backend\n      const lastDate = new Date(Math.max(...data.map(row => new Date(row.date))));\n      const mockForecast = [];\n      \n      // Sort data by date for better forecasting\n      const sortedData = [...data].sort((a, b) => new Date(a.date) - new Date(b.date));\n      \n      // Calculate average monthly change for trend\n      let avgChange = 0;\n      if (sortedData.length > 1) {\n        const changes = [];\n        for (let i = 1; i < sortedData.length; i++) {\n          const prev = parseFloat(sortedData[i-1].emissions) || 0;\n          const curr = parseFloat(sortedData[i].emissions) || 0;\n          if (prev > 0) {\n            changes.push((curr - prev) / prev);\n          }\n        }\n        if (changes.length > 0) {\n          avgChange = changes.reduce((sum, val) => sum + val, 0) / changes.length;\n        }\n      }\n      \n      // Get the last known emissions value\n      const lastEmissions = parseFloat(sortedData[sortedData.length - 1].emissions) || 0;\n      \n      // Generate mock forecast data with trend\n      for (let i = 1; i <= forecastPeriods; i++) {\n        const forecastDate = new Date(lastDate);\n        forecastDate.setMonth(forecastDate.getMonth() + i);\n        \n        // Apply trend with some randomness\n        const trend = 1 + (avgChange * 0.8) + (Math.random() * avgChange * 0.4);\n        const predictedValue = lastEmissions * Math.pow(trend, i);\n        \n        // Add random variation\n        const randomVariation = (Math.random() - 0.5) * 0.1 * predictedValue;\n        const finalPrediction = predictedValue + randomVariation;\n        \n        mockForecast.push({\n          ds: forecastDate.toISOString().split('T')[0],\n          predicted_emissions: finalPrediction,\n          lower_bound: finalPrediction * 0.85,\n          upper_bound: finalPrediction * 1.15\n        });\n      }\n      \n      // Generate mock impacts based on actual data values\n      const mockImpacts = {};\n      const avgEmissions = sortedData.reduce((sum, row) => sum + (parseFloat(row.emissions) || 0), 0) / sortedData.length;\n      \n      // Calculate actual impact factors from data\n      if (data[0].energy_use !== undefined) {\n        mockImpacts.energy_use = {\n          coefficient: 0.0015,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.energy_use) || 0), 0) / data.length,\n          impact_score: 0.35 + (Math.random() * 0.1)\n        };\n      }\n      \n      if (data[0].transport !== undefined) {\n        mockImpacts.transport = {\n          coefficient: 0.0008,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.transport) || 0), 0) / data.length,\n          impact_score: 0.25 + (Math.random() * 0.1)\n        };\n      }\n      \n      if (data[0].waste !== undefined) {\n        mockImpacts.waste = {\n          coefficient: 0.012,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.waste) || 0), 0) / data.length,\n          impact_score: 0.15 + (Math.random() * 0.1)\n        };\n      }\n      \n      if (data[0].water !== undefined) {\n        mockImpacts.water = {\n          coefficient: 0.0005,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.water) || 0), 0) / data.length,\n          impact_score: 0.12 + (Math.random() * 0.1)\n        };\n      }\n      \n      if (data[0].fuel !== undefined) {\n        mockImpacts.fuel = {\n          coefficient: 0.0025,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.fuel) || 0), 0) / data.length,\n          impact_score: 0.30 + (Math.random() * 0.1)\n        };\n      }\n      \n      if (data[0].grid_intensity !== undefined) {\n        mockImpacts.grid_intensity = {\n          coefficient: 0.0010,\n          mean_value: data.reduce((sum, row) => sum + (parseFloat(row.grid_intensity) || 0), 0) / data.length,\n          impact_score: 0.20 + (Math.random() * 0.1)\n        };\n      }\n      \n      // Generate mock suggestions based on the highest impact factors\n      const sortedImpacts = Object.entries(mockImpacts)\n        .sort((a, b) => b[1].impact_score - a[1].impact_score);\n      \n      const mockSuggestions = [];\n      \n      sortedImpacts.forEach(([factor, data]) => {\n        let suggestion = {\n          factor: factor,\n          action: '',\n          estimated_saving: (data.impact_score * avgEmissions * 0.2) // 20% potential reduction\n        };\n        \n        switch(factor) {\n          case 'energy_use':\n            suggestion.action = \"Implement energy efficiency measures to reduce electricity consumption by 20%\";\n            break;\n          case 'transport':\n            suggestion.action = \"Optimize transportation routes or switch to electric vehicles\";\n            break;\n          case 'waste':\n            suggestion.action = \"Implement waste reduction and recycling programs\";\n            break;\n          case 'water':\n            suggestion.action = \"Install water-saving fixtures and implement water recycling\";\n            break;\n          case 'fuel':\n            suggestion.action = \"Transition to renewable energy sources or improve fuel efficiency\";\n            break;\n          case 'grid_intensity':\n            suggestion.action = \"Schedule high-energy operations during times of lower grid carbon intensity\";\n            break;\n          default:\n            suggestion.action = `Reduce ${factor.replace('_', ' ')} by implementing efficiency measures`;\n        }\n        \n        mockSuggestions.push(suggestion);\n      });\n      \n      // Calculate potential savings\n      const totalEmissions = data.reduce((sum, row) => sum + (parseFloat(row.emissions) || 0), 0);\n      const avgMonthlyEmissions = totalEmissions / data.length;\n      const potentialSavings = avgMonthlyEmissions * 0.15; // 15% reduction\n      \n      const mockSavings = {\n        total: potentialSavings * forecastPeriods,\n        percentage: 15,\n        monthly: potentialSavings\n      };\n      \n      // Set state with generated data\n      setForecast(mockForecast);\n      setImpacts(mockImpacts);\n      setSuggestions(mockSuggestions);\n      setSavings(mockSavings);\n      \n      // Reset optimized forecast when new forecast is generated\n      setOptimizedForecast(null);\n      \n      // Delay setting loading to false and changing tab to ensure UI updates properly\n      setTimeout(() => {\n        setLoading(false);\n        showNotification('Forecast generated successfully', 'success');\n        setActiveTab('forecast');\n      }, 500);\n      \n    } catch (error) {\n      console.error('Error generating forecast:', error);\n      setLoading(false);\n      showNotification('Failed to generate forecast: ' + (error.message || 'Unknown error'), 'error');\n    }\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      if (!forecast) {\n        showNotification('Please generate a forecast first', 'error');\n        return;\n      }\n      \n      setLoading(true);\n      \n      // Create a mock optimized forecast with 15% reduction\n      const optimized = forecast.map(item => {\n        const reduction = item.predicted_emissions * 0.15;\n        return {\n          ...item,\n          predicted_emissions: item.predicted_emissions - reduction,\n          lower_bound: item.lower_bound - (reduction * 0.8),\n          upper_bound: item.upper_bound - (reduction * 0.8)\n        };\n      });\n      \n      setOptimizedForecast(optimized);\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n    } catch (error) {\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification('Failed to optimize forecast: ' + (error.message || 'Unknown error'), 'error');\n    }\n  };\n\n  // Export forecast data\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n      \n      // Determine which forecast to export\n      const forecastToExport = optimizedForecast || forecast;\n      \n      if (!forecastToExport) {\n        showNotification('No forecast data to export', 'error');\n        setLoading(false);\n        return;\n      }\n      \n      const response = await axios.post(\n        `${API_BASE_URL}/export`,\n        { forecast: forecastToExport },\n        { responseType: 'blob' }\n      );\n      \n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'carbon_forecast.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      \n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification('Failed to export forecast', 'error');\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type = 'success') => {\n    setNotification({\n      show: true,\n      message,\n      type\n    });\n    \n    // Auto-hide notification after 5 seconds\n    setTimeout(() => {\n      setNotification(prev => ({ ...prev, show: false }));\n    }, 5000);\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      \n      {loading && <LoadingBar />}\n      \n      {notification.show && (\n        <Notification \n          message={notification.message} \n          type={notification.type} \n          onClose={() => setNotification(prev => ({ ...prev, show: false }))} \n        />\n      )}\n      \n      <div className=\"main-content\">\n        <TabPanel activeTab={activeTab} onTabChange={setActiveTab}>\n          <TabPanel.Tab id=\"data\" label=\"Data\">\n            <div className=\"data-tab\">\n              <div className=\"data-controls\">\n                <UploadZone onFileUpload={handleFileUpload} />\n              </div>\n              <DataTable \n                data={data} \n                onDataUpdate={handleDataUpdate} \n              />\n            </div>\n          </TabPanel.Tab>\n          \n          <TabPanel.Tab id=\"forecast\" label=\"Forecast\" disabled={!data || data.length < 3}>\n            <div className=\"forecast-container\">\n              <div className=\"forecast-left\">\n                <ForecastControls \n                  forecastPeriods={forecastPeriods}\n                  onForecastPeriodsChange={setForecastPeriods}\n                  onGenerateForecast={handleGenerateForecast}\n                  onOptimizeForecast={handleOptimizeForecast}\n                  onExportForecast={handleExportForecast}\n                  disableOptimize={!forecast}\n                  disableExport={!forecast && !optimizedForecast}\n                />\n                \n                {(forecast || optimizedForecast) && (\n                  <OptimizationPanel \n                    suggestions={suggestions}\n                    savings={savings}\n                    onOptimize={handleOptimizeForecast}\n                  />\n                )}\n              </div>\n              \n              <div className=\"forecast-right\">\n                {forecast && (\n                  <ForecastChart \n                    data={data}\n                    forecast={forecast}\n                    optimizedForecast={optimizedForecast}\n                    impacts={impacts}\n                  />\n                )}\n              </div>\n            </div>\n          </TabPanel.Tab>\n          \n          <TabPanel.Tab id=\"performance\" label=\"Performance\" disabled={!forecast || !impacts}>\n            <ModelPerformance \n              data={data}\n              forecast={forecast}\n              impacts={impacts}\n            />\n          </TabPanel.Tab>\n        </TabPanel>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}