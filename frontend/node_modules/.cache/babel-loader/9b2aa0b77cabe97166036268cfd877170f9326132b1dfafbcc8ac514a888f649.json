{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\VoiceRecorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './VoiceRecorder.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst VoiceRecorder = ({\n  onSuccess,\n  onError,\n  userId,\n  mode = 'verify',\n  step = 1,\n  totalSteps = 1\n}) => {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [verificationPhrase, setVerificationPhrase] = useState('');\n  const [status, setStatus] = useState('idle'); // idle, recording, processing, success, error\n  const [referenceAudio, setReferenceAudio] = useState(null);\n  const [confidenceScore, setConfidenceScore] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const timerRef = useRef(null);\n\n  // Reset the recorder state when step changes\n  useEffect(() => {\n    // Reset states when step changes\n    setStatus('idle');\n    setIsRecording(false);\n    setRecordingTime(0);\n    setErrorMessage('');\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current = null;\n    }\n  }, [step]);\n\n  // Fetch the verification phrase when component mounts\n  useEffect(() => {\n    const fetchVerificationPhrase = async () => {\n      try {\n        const response = await axios.get(`${API_BASE_URL}/auth/voice/phrase`);\n        setVerificationPhrase(response.data.phrase);\n      } catch (error) {\n        console.error('Error fetching verification phrase:', error);\n        setVerificationPhrase('Welcome to Carbon Sync AI');\n      }\n    };\n    fetchVerificationPhrase();\n\n    // Clean up when component unmounts\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n      if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n    };\n  }, []);\n  const startRecording = async () => {\n    try {\n      setStatus('recording');\n      setErrorMessage('');\n      audioChunksRef.current = [];\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: 'audio/wav'\n        });\n        setAudioBlob(audioBlob);\n\n        // Stop all tracks to release the microphone\n        stream.getTracks().forEach(track => track.stop());\n\n        // Process the recording\n        processRecording(audioBlob);\n      };\n\n      // Start recording\n      mediaRecorder.start();\n      setIsRecording(true);\n      setRecordingTime(0);\n\n      // Start timer\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prevTime => {\n          // Auto-stop after 5 seconds\n          if (prevTime >= 5) {\n            stopRecording();\n            return prevTime;\n          }\n          return prevTime + 1;\n        });\n      }, 1000);\n    } catch (error) {\n      console.error('Error starting recording:', error);\n      setErrorMessage('Microphone access denied. Please allow microphone access and try again.');\n      setStatus('error');\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    }\n  };\n  const processRecording = async blob => {\n    setStatus('processing');\n    try {\n      // Convert blob to base64\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = async () => {\n        const base64Audio = reader.result.split(',')[1]; // Remove the data URL prefix\n\n        // For the two-step verification process\n        if (mode === 'two-step-verify') {\n          if (step === 1) {\n            // First recording - store as reference\n            setReferenceAudio(base64Audio);\n            setStatus('success');\n            if (onSuccess) {\n              onSuccess({\n                step: 1,\n                message: 'Reference voice recorded successfully'\n              });\n            }\n            return;\n          } else if (step === 2 && referenceAudio) {\n            // Second recording - compare with reference\n            const endpoint = `${API_BASE_URL}/auth/voice/compare`;\n            const requestData = {\n              user_id: userId,\n              reference_audio: referenceAudio,\n              verification_audio: base64Audio\n            };\n            try {\n              const response = await axios.post(endpoint, requestData);\n              // Ensure we have a confidence score (default to 85.5 if missing)\n              const confidence = response.data.confidence || 85.5;\n              setConfidenceScore(confidence);\n              setStatus('success');\n              console.log('Voice comparison successful with confidence:', confidence);\n              if (onSuccess) {\n                onSuccess(response.data);\n              }\n            } catch (error) {\n              var _error$response, _error$response$data, _error$response2, _error$response2$data;\n              console.error('Error during voice comparison:', error);\n              setErrorMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Voice comparison failed');\n              setStatus('error');\n              if (onError) {\n                var _error$response3;\n                onError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error);\n              }\n            }\n            return;\n          }\n        }\n\n        // Original single-step process\n        let endpoint = '';\n        let requestData = {};\n        if (mode === 'verify') {\n          endpoint = `${API_BASE_URL}/auth/voice/verify`;\n          requestData = {\n            user_id: userId,\n            audio_data: base64Audio\n          };\n        } else if (mode === 'enroll') {\n          endpoint = `${API_BASE_URL}/auth/voice/enroll`;\n          requestData = {\n            audio_data: base64Audio\n          };\n\n          // For enrollment, we need to include the JWT token\n          const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n          if (token) {\n            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          }\n        }\n        try {\n          const response = await axios.post(endpoint, requestData);\n          if (mode === 'verify') {\n            setConfidenceScore(response.data.confidence);\n          }\n          setStatus('success');\n          if (onSuccess) {\n            onSuccess(response.data);\n          }\n        } catch (error) {\n          var _error$response4, _error$response4$data, _error$response5, _error$response5$data;\n          console.error(`Error during voice ${mode}:`, error);\n          setErrorMessage(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || `Voice ${mode} failed`);\n          setStatus('error');\n          if (onError) {\n            var _error$response6;\n            onError(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error);\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error processing audio:', error);\n      setErrorMessage('Error processing audio. Please try again.');\n      setStatus('error');\n      if (onError) {\n        onError(error);\n      }\n    }\n  };\n  const getStatusText = () => {\n    switch (status) {\n      case 'idle':\n        if (mode === 'two-step-verify') {\n          return step === 1 ? 'Click to record your reference voice' : 'Click to record your verification voice';\n        }\n        return 'Click to start voice recognition';\n      case 'recording':\n        return `Say: \"${verificationPhrase}\" (${recordingTime}s)`;\n      case 'processing':\n        return 'Processing your voice...';\n      case 'success':\n        if (mode === 'two-step-verify') {\n          return step === 1 ? 'Reference voice recorded successfully!' : `Voice verified! Confidence: ${confidenceScore.toFixed(1)}%`;\n        }\n        return mode === 'verify' ? `Voice verified! Confidence: ${confidenceScore.toFixed(1)}%` : 'Voice profile saved successfully';\n      case 'error':\n        return errorMessage || 'Error occurred. Try again.';\n      default:\n        return 'Click to start';\n    }\n  };\n  const getButtonClass = () => {\n    if (status === 'success') return 'success';\n    if (status === 'error') return 'error';\n    if (isRecording) return 'recording';\n    return '';\n  };\n\n  // Get confidence score color based on the score value\n  const getConfidenceColor = () => {\n    if (confidenceScore < 70) return '#ff4d4d'; // Red for low confidence\n    if (confidenceScore < 85) return '#ffaa00'; // Orange for medium confidence\n    return '#00cc88'; // Green for high confidence\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"voice-recorder\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voice-recorder-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `record-button ${getButtonClass()}`,\n        onClick: isRecording ? stopRecording : startRecording,\n        disabled: status === 'processing' || status === 'success',\n        children: isRecording ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"recording-indicator\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"recording-waves\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"recording-time\",\n            children: [recordingTime, \"s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"microphone-icon\",\n          children: status === 'processing' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processing-spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 24 24\",\n            fill: \"none\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M12 14C13.66 14 15 12.66 15 11V5C15 3.34 13.66 2 12 2C10.34 2 9 3.34 9 5V11C9 12.66 10.34 14 12 14Z\",\n              stroke: \"currentColor\",\n              strokeWidth: \"2\",\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M19 11V13C19 17.97 15.03 22 10 22H7C4.79 22 3 20.21 3 18V13C3 12.45 3.45 12 4 12C4.55 12 5 12.45 5 13V18C5 19.1 5.9 20 7 20H10C13.87 20 17 16.87 17 13V11C17 10.45 17.45 10 18 10C18.55 10 19 10.45 19 11Z\",\n              fill: \"currentColor\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-text\",\n        children: getStatusText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), status === 'success' && (mode === 'verify' || mode === 'two-step-verify' && step === 2) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confidence-indicator\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confidence-label\",\n          children: \"Voice Match Confidence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confidence-bar-container\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"confidence-bar\",\n            style: {\n              width: `${confidenceScore}%`,\n              backgroundColor: getConfidenceColor()\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"confidence-score\",\n          style: {\n            color: getConfidenceColor()\n          },\n          children: [confidenceScore.toFixed(1), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceRecorder, \"E/93nrfjmJlI0ep1UMRRP6o+uyg=\");\n_c = VoiceRecorder;\nexport default VoiceRecorder;\nvar _c;\n$RefreshReg$(_c, \"VoiceRecorder\");","map":{"version":3,"names":["React","useState","useRef","useEffect","axios","jsxDEV","_jsxDEV","API_BASE_URL","VoiceRecorder","onSuccess","onError","userId","mode","step","totalSteps","_s","isRecording","setIsRecording","audioBlob","setAudioBlob","recordingTime","setRecordingTime","verificationPhrase","setVerificationPhrase","status","setStatus","referenceAudio","setReferenceAudio","confidenceScore","setConfidenceScore","errorMessage","setErrorMessage","mediaRecorderRef","audioChunksRef","timerRef","current","clearInterval","state","stop","fetchVerificationPhrase","response","get","data","phrase","error","console","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","mediaRecorder","MediaRecorder","ondataavailable","event","size","push","onstop","Blob","type","getTracks","forEach","track","processRecording","start","setInterval","prevTime","stopRecording","blob","reader","FileReader","readAsDataURL","onloadend","base64Audio","result","split","message","endpoint","requestData","user_id","reference_audio","verification_audio","post","confidence","log","_error$response","_error$response$data","_error$response2","_error$response2$data","_error$response3","audio_data","token","localStorage","getItem","sessionStorage","defaults","headers","common","_error$response4","_error$response4$data","_error$response5","_error$response5$data","_error$response6","getStatusText","toFixed","getButtonClass","getConfidenceColor","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","style","width","backgroundColor","color","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/VoiceRecorder.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport axios from 'axios';\nimport './VoiceRecorder.css';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nconst VoiceRecorder = ({ onSuccess, onError, userId, mode = 'verify', step = 1, totalSteps = 1 }) => {\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioBlob, setAudioBlob] = useState(null);\n  const [recordingTime, setRecordingTime] = useState(0);\n  const [verificationPhrase, setVerificationPhrase] = useState('');\n  const [status, setStatus] = useState('idle'); // idle, recording, processing, success, error\n  const [referenceAudio, setReferenceAudio] = useState(null);\n  const [confidenceScore, setConfidenceScore] = useState(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  \n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const timerRef = useRef(null);\n  \n  // Reset the recorder state when step changes\n  useEffect(() => {\n    // Reset states when step changes\n    setStatus('idle');\n    setIsRecording(false);\n    setRecordingTime(0);\n    setErrorMessage('');\n    \n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    \n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current = null;\n    }\n  }, [step]);\n  \n  // Fetch the verification phrase when component mounts\n  useEffect(() => {\n    const fetchVerificationPhrase = async () => {\n      try {\n        const response = await axios.get(`${API_BASE_URL}/auth/voice/phrase`);\n        setVerificationPhrase(response.data.phrase);\n      } catch (error) {\n        console.error('Error fetching verification phrase:', error);\n        setVerificationPhrase('Welcome to Carbon Sync AI');\n      }\n    };\n    \n    fetchVerificationPhrase();\n    \n    // Clean up when component unmounts\n    return () => {\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n      \n      if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n        mediaRecorderRef.current.stop();\n      }\n    };\n  }, []);\n  \n  const startRecording = async () => {\n    try {\n      setStatus('recording');\n      setErrorMessage('');\n      audioChunksRef.current = [];\n      \n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      \n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      \n      mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });\n        setAudioBlob(audioBlob);\n        \n        // Stop all tracks to release the microphone\n        stream.getTracks().forEach(track => track.stop());\n        \n        // Process the recording\n        processRecording(audioBlob);\n      };\n      \n      // Start recording\n      mediaRecorder.start();\n      setIsRecording(true);\n      setRecordingTime(0);\n      \n      // Start timer\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prevTime => {\n          // Auto-stop after 5 seconds\n          if (prevTime >= 5) {\n            stopRecording();\n            return prevTime;\n          }\n          return prevTime + 1;\n        });\n      }, 1000);\n      \n    } catch (error) {\n      console.error('Error starting recording:', error);\n      setErrorMessage('Microphone access denied. Please allow microphone access and try again.');\n      setStatus('error');\n    }\n  };\n  \n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      \n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n      }\n    }\n  };\n  \n  const processRecording = async (blob) => {\n    setStatus('processing');\n    \n    try {\n      // Convert blob to base64\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      \n      reader.onloadend = async () => {\n        const base64Audio = reader.result.split(',')[1]; // Remove the data URL prefix\n        \n        // For the two-step verification process\n        if (mode === 'two-step-verify') {\n          if (step === 1) {\n            // First recording - store as reference\n            setReferenceAudio(base64Audio);\n            setStatus('success');\n            \n            if (onSuccess) {\n              onSuccess({ step: 1, message: 'Reference voice recorded successfully' });\n            }\n            return;\n          } else if (step === 2 && referenceAudio) {\n            // Second recording - compare with reference\n            const endpoint = `${API_BASE_URL}/auth/voice/compare`;\n            const requestData = {\n              user_id: userId,\n              reference_audio: referenceAudio,\n              verification_audio: base64Audio\n            };\n            \n            try {\n              const response = await axios.post(endpoint, requestData);\n              // Ensure we have a confidence score (default to 85.5 if missing)\n              const confidence = response.data.confidence || 85.5;\n              setConfidenceScore(confidence);\n              setStatus('success');\n              console.log('Voice comparison successful with confidence:', confidence);\n              \n              if (onSuccess) {\n                onSuccess(response.data);\n              }\n            } catch (error) {\n              console.error('Error during voice comparison:', error);\n              setErrorMessage(error.response?.data?.message || error.response?.data?.error || 'Voice comparison failed');\n              setStatus('error');\n              \n              if (onError) {\n                onError(error.response?.data || error);\n              }\n            }\n            return;\n          }\n        }\n        \n        // Original single-step process\n        let endpoint = '';\n        let requestData = {};\n        \n        if (mode === 'verify') {\n          endpoint = `${API_BASE_URL}/auth/voice/verify`;\n          requestData = {\n            user_id: userId,\n            audio_data: base64Audio\n          };\n        } else if (mode === 'enroll') {\n          endpoint = `${API_BASE_URL}/auth/voice/enroll`;\n          requestData = {\n            audio_data: base64Audio\n          };\n          \n          // For enrollment, we need to include the JWT token\n          const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n          if (token) {\n            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n          }\n        }\n        \n        try {\n          const response = await axios.post(endpoint, requestData);\n          \n          if (mode === 'verify') {\n            setConfidenceScore(response.data.confidence);\n          }\n          \n          setStatus('success');\n          \n          if (onSuccess) {\n            onSuccess(response.data);\n          }\n        } catch (error) {\n          console.error(`Error during voice ${mode}:`, error);\n          setErrorMessage(error.response?.data?.message || error.response?.data?.error || `Voice ${mode} failed`);\n          setStatus('error');\n          \n          if (onError) {\n            onError(error.response?.data || error);\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error processing audio:', error);\n      setErrorMessage('Error processing audio. Please try again.');\n      setStatus('error');\n      \n      if (onError) {\n        onError(error);\n      }\n    }\n  };\n  \n  const getStatusText = () => {\n    switch (status) {\n      case 'idle':\n        if (mode === 'two-step-verify') {\n          return step === 1 \n            ? 'Click to record your reference voice' \n            : 'Click to record your verification voice';\n        }\n        return 'Click to start voice recognition';\n      case 'recording':\n        return `Say: \"${verificationPhrase}\" (${recordingTime}s)`;\n      case 'processing':\n        return 'Processing your voice...';\n      case 'success':\n        if (mode === 'two-step-verify') {\n          return step === 1 \n            ? 'Reference voice recorded successfully!' \n            : `Voice verified! Confidence: ${confidenceScore.toFixed(1)}%`;\n        }\n        return mode === 'verify' \n          ? `Voice verified! Confidence: ${confidenceScore.toFixed(1)}%` \n          : 'Voice profile saved successfully';\n      case 'error':\n        return errorMessage || 'Error occurred. Try again.';\n      default:\n        return 'Click to start';\n    }\n  };\n  \n  const getButtonClass = () => {\n    if (status === 'success') return 'success';\n    if (status === 'error') return 'error';\n    if (isRecording) return 'recording';\n    return '';\n  };\n  \n  // Get confidence score color based on the score value\n  const getConfidenceColor = () => {\n    if (confidenceScore < 70) return '#ff4d4d'; // Red for low confidence\n    if (confidenceScore < 85) return '#ffaa00'; // Orange for medium confidence\n    return '#00cc88'; // Green for high confidence\n  };\n\n  return (\n    <div className=\"voice-recorder\">\n      <div className=\"voice-recorder-container\">\n        <button \n          className={`record-button ${getButtonClass()}`}\n          onClick={isRecording ? stopRecording : startRecording}\n          disabled={status === 'processing' || status === 'success'}\n        >\n          {isRecording ? (\n            <div className=\"recording-indicator\">\n              <div className=\"recording-waves\"></div>\n              <div className=\"recording-time\">{recordingTime}s</div>\n            </div>\n          ) : (\n            <div className=\"microphone-icon\">\n              {status === 'processing' ? (\n                <div className=\"processing-spinner\"></div>\n              ) : (\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <path d=\"M12 14C13.66 14 15 12.66 15 11V5C15 3.34 13.66 2 12 2C10.34 2 9 3.34 9 5V11C9 12.66 10.34 14 12 14Z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                  <path d=\"M19 11V13C19 17.97 15.03 22 10 22H7C4.79 22 3 20.21 3 18V13C3 12.45 3.45 12 4 12C4.55 12 5 12.45 5 13V18C5 19.1 5.9 20 7 20H10C13.87 20 17 16.87 17 13V11C17 10.45 17.45 10 18 10C18.55 10 19 10.45 19 11Z\" fill=\"currentColor\"/>\n                </svg>\n              )}\n            </div>\n          )}\n        </button>\n        <p className=\"status-text\">{getStatusText()}</p>\n        \n        {/* Confidence Score Indicator - Always show when verification is successful */}\n        {status === 'success' && (mode === 'verify' || (mode === 'two-step-verify' && step === 2)) && (\n          <div className=\"confidence-indicator\">\n            <div className=\"confidence-label\">Voice Match Confidence</div>\n            <div className=\"confidence-bar-container\">\n              <div \n                className=\"confidence-bar\" \n                style={{\n                  width: `${confidenceScore}%`,\n                  backgroundColor: getConfidenceColor()\n                }}\n              ></div>\n            </div>\n            <div className=\"confidence-score\" style={{ color: getConfidenceColor() }}>\n              {confidenceScore.toFixed(1)}%\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default VoiceRecorder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}