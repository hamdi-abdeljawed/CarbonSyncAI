{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create the context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Provider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Debug authentication state changes\n  useEffect(() => {\n    console.log('Auth state changed:', {\n      isAuthenticated,\n      currentUser\n    });\n  }, [isAuthenticated, currentUser]);\n\n  // Check if user is already logged in on initial load\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const user = JSON.parse(localStorage.getItem('user') || sessionStorage.getItem('user') || 'null');\n      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n      if (user && token) {\n        // Set up axios default headers\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        try {\n          // Verify token is still valid\n          const response = await axios.get(`${API_BASE_URL}/auth/profile`);\n          setCurrentUser(response.data.user);\n          setIsAuthenticated(true);\n        } catch (error) {\n          // Token might be expired, try to refresh\n          const refreshToken = localStorage.getItem('refreshToken') || sessionStorage.getItem('refreshToken');\n          if (refreshToken) {\n            try {\n              const refreshResponse = await axios.post(`${API_BASE_URL}/auth/refresh`, {}, {\n                headers: {\n                  'Authorization': `Bearer ${refreshToken}`\n                }\n              });\n\n              // Update token\n              const storage = localStorage.getItem('accessToken') ? localStorage : sessionStorage;\n              storage.setItem('accessToken', refreshResponse.data.access_token);\n\n              // Set up axios default headers with new token\n              axios.defaults.headers.common['Authorization'] = `Bearer ${refreshResponse.data.access_token}`;\n\n              // Get user profile with new token\n              const profileResponse = await axios.get(`${API_BASE_URL}/auth/profile`);\n              setCurrentUser(profileResponse.data.user);\n              setIsAuthenticated(true);\n            } catch (refreshError) {\n              // Refresh token also expired, clear everything\n              logout();\n            }\n          } else {\n            // No refresh token, clear everything\n            logout();\n          }\n        }\n      }\n      setLoading(false);\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Login function\n  const login = async (username, password, rememberMe = false) => {\n    try {\n      console.log('Attempting login for:', username);\n      const response = await axios.post(`${API_BASE_URL}/auth/login`, {\n        username,\n        password\n      });\n      console.log('Login response:', response.data);\n      const {\n        user,\n        access_token,\n        refresh_token\n      } = response.data;\n\n      // Store tokens and user data\n      const storage = rememberMe ? localStorage : sessionStorage;\n      storage.setItem('accessToken', access_token);\n      storage.setItem('refreshToken', refresh_token);\n      storage.setItem('user', JSON.stringify(user));\n\n      // Set up axios default headers\n      axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n\n      // Update state\n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      console.log('Authentication state updated:', {\n        user,\n        isAuthenticated: true\n      });\n      return {\n        success: true,\n        user\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Login failed. Please check your credentials.'\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/auth/register`, userData);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Registration failed. Please try again.'\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear tokens and user data\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n    sessionStorage.removeItem('accessToken');\n    sessionStorage.removeItem('refreshToken');\n    sessionStorage.removeItem('user');\n\n    // Clear axios default headers\n    delete axios.defaults.headers.common['Authorization'];\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    try {\n      const response = await axios.put(`${API_BASE_URL}/auth/profile`, profileData);\n\n      // Update stored user data\n      const storage = localStorage.getItem('user') ? localStorage : sessionStorage;\n      storage.setItem('user', JSON.stringify(response.data.user));\n      setCurrentUser(response.data.user);\n      return {\n        success: true,\n        user: response.data.user\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        success: false,\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to update profile. Please try again.'\n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/auth/change-password`, {\n        current_password: currentPassword,\n        new_password: newPassword\n      });\n      return {\n        success: true,\n        message: response.data.message\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to change password. Please try again.'\n      };\n    }\n  };\n\n  // Context value\n  const value = {\n    currentUser,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"gYZRNpDQVirKu/+dLOx/QNA8y0U=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","axios","jsxDEV","_jsxDEV","API_BASE_URL","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","isAuthenticated","setIsAuthenticated","console","log","checkAuthStatus","user","JSON","parse","localStorage","getItem","sessionStorage","token","defaults","headers","common","response","get","data","error","refreshToken","refreshResponse","post","storage","setItem","access_token","profileResponse","refreshError","logout","login","username","password","rememberMe","refresh_token","stringify","success","_error$response","_error$response$data","register","userData","_error$response2","_error$response2$data","removeItem","updateProfile","profileData","put","_error$response3","_error$response3$data","changePassword","currentPassword","newPassword","current_password","new_password","message","_error$response4","_error$response4$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create the context\nconst AuthContext = createContext();\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  \n  // Debug authentication state changes\n  useEffect(() => {\n    console.log('Auth state changed:', { isAuthenticated, currentUser });\n  }, [isAuthenticated, currentUser]);\n\n  // Check if user is already logged in on initial load\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      const user = JSON.parse(localStorage.getItem('user') || sessionStorage.getItem('user') || 'null');\n      const token = localStorage.getItem('accessToken') || sessionStorage.getItem('accessToken');\n      \n      if (user && token) {\n        // Set up axios default headers\n        axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        \n        try {\n          // Verify token is still valid\n          const response = await axios.get(`${API_BASE_URL}/auth/profile`);\n          setCurrentUser(response.data.user);\n          setIsAuthenticated(true);\n        } catch (error) {\n          // Token might be expired, try to refresh\n          const refreshToken = localStorage.getItem('refreshToken') || sessionStorage.getItem('refreshToken');\n          \n          if (refreshToken) {\n            try {\n              const refreshResponse = await axios.post(`${API_BASE_URL}/auth/refresh`, {}, {\n                headers: { 'Authorization': `Bearer ${refreshToken}` }\n              });\n              \n              // Update token\n              const storage = localStorage.getItem('accessToken') ? localStorage : sessionStorage;\n              storage.setItem('accessToken', refreshResponse.data.access_token);\n              \n              // Set up axios default headers with new token\n              axios.defaults.headers.common['Authorization'] = `Bearer ${refreshResponse.data.access_token}`;\n              \n              // Get user profile with new token\n              const profileResponse = await axios.get(`${API_BASE_URL}/auth/profile`);\n              setCurrentUser(profileResponse.data.user);\n              setIsAuthenticated(true);\n            } catch (refreshError) {\n              // Refresh token also expired, clear everything\n              logout();\n            }\n          } else {\n            // No refresh token, clear everything\n            logout();\n          }\n        }\n      }\n      \n      setLoading(false);\n    };\n    \n    checkAuthStatus();\n  }, []);\n\n  // Login function\n  const login = async (username, password, rememberMe = false) => {\n    try {\n      console.log('Attempting login for:', username);\n      \n      const response = await axios.post(`${API_BASE_URL}/auth/login`, {\n        username,\n        password\n      });\n      \n      console.log('Login response:', response.data);\n      \n      const { user, access_token, refresh_token } = response.data;\n      \n      // Store tokens and user data\n      const storage = rememberMe ? localStorage : sessionStorage;\n      storage.setItem('accessToken', access_token);\n      storage.setItem('refreshToken', refresh_token);\n      storage.setItem('user', JSON.stringify(user));\n      \n      // Set up axios default headers\n      axios.defaults.headers.common['Authorization'] = `Bearer ${access_token}`;\n      \n      // Update state\n      setCurrentUser(user);\n      setIsAuthenticated(true);\n      \n      console.log('Authentication state updated:', { user, isAuthenticated: true });\n      \n      return { success: true, user };\n    } catch (error) {\n      console.error('Login error:', error);\n      return { \n        success: false, \n        error: error.response?.data?.error || 'Login failed. Please check your credentials.'\n      };\n    }\n  };\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/auth/register`, userData);\n      return { success: true, data: response.data };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.error || 'Registration failed. Please try again.'\n      };\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    // Clear tokens and user data\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n    sessionStorage.removeItem('accessToken');\n    sessionStorage.removeItem('refreshToken');\n    sessionStorage.removeItem('user');\n    \n    // Clear axios default headers\n    delete axios.defaults.headers.common['Authorization'];\n    \n    setCurrentUser(null);\n    setIsAuthenticated(false);\n  };\n\n  // Update user profile\n  const updateProfile = async (profileData) => {\n    try {\n      const response = await axios.put(`${API_BASE_URL}/auth/profile`, profileData);\n      \n      // Update stored user data\n      const storage = localStorage.getItem('user') ? localStorage : sessionStorage;\n      storage.setItem('user', JSON.stringify(response.data.user));\n      \n      setCurrentUser(response.data.user);\n      \n      return { success: true, user: response.data.user };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.error || 'Failed to update profile. Please try again.'\n      };\n    }\n  };\n\n  // Change password\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/auth/change-password`, {\n        current_password: currentPassword,\n        new_password: newPassword\n      });\n      \n      return { success: true, message: response.data.message };\n    } catch (error) {\n      return { \n        success: false, \n        error: error.response?.data?.error || 'Failed to change password. Please try again.'\n      };\n    }\n  };\n\n  // Context value\n  const value = {\n    currentUser,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}