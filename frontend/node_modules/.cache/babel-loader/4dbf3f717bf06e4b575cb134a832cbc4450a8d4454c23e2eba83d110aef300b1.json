{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\DataTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './DataTable.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataTable = ({\n  data,\n  onDataUpdate\n}) => {\n  _s();\n  const [tableData, setTableData] = useState([]);\n  const [showSummary, setShowSummary] = useState(true);\n  const [summary, setSummary] = useState({\n    mean: {},\n    min: {},\n    max: {},\n    std: {}\n  });\n\n  // Sample data for when no data is provided\n  const sampleData = [{\n    id: 1,\n    date: '2023-01-01',\n    energy_use: 12500,\n    transport: 3200,\n    waste: 1.8,\n    water: 15000,\n    fuel: 850,\n    emissions: 8.2,\n    production: 1200,\n    grid_intensity: 0.42\n  }, {\n    id: 2,\n    date: '2023-02-01',\n    energy_use: 11800,\n    transport: 2950,\n    waste: 1.5,\n    water: 14200,\n    fuel: 780,\n    emissions: 7.8,\n    production: 1150,\n    grid_intensity: 0.41\n  }, {\n    id: 3,\n    date: '2023-03-01',\n    energy_use: 12200,\n    transport: 3100,\n    waste: 1.7,\n    water: 14800,\n    fuel: 820,\n    emissions: 8.0,\n    production: 1180,\n    grid_intensity: 0.42\n  }];\n\n  // Update table data when data prop changes\n  useEffect(() => {\n    if (data && data.length > 0) {\n      // Process data to ensure all values are properly formatted\n      const processedData = data.map(item => {\n        // Ensure all numeric fields are numbers, not strings\n        const processNumeric = value => {\n          if (value === null || value === undefined || value === '') return 0;\n          const num = parseFloat(value);\n          return isNaN(num) ? 0 : num;\n        };\n\n        // Format date properly\n        let formattedDate = item.date;\n        if (formattedDate) {\n          try {\n            // Try to convert to proper date format\n            const dateObj = new Date(formattedDate);\n            if (!isNaN(dateObj.getTime())) {\n              // Valid date, format as YYYY-MM-DD\n              formattedDate = dateObj.toISOString().split('T')[0];\n            }\n          } catch (e) {\n            console.error('Error formatting date:', e);\n          }\n        }\n        console.log('Processing date:', item.date, '→', formattedDate);\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: formattedDate,\n          energy_use: processNumeric(item.energy_use),\n          transport: processNumeric(item.transport),\n          waste: processNumeric(item.waste),\n          water: processNumeric(item.water),\n          fuel: processNumeric(item.fuel),\n          emissions: processNumeric(item.emissions),\n          production: processNumeric(item.production),\n          grid_intensity: processNumeric(item.grid_intensity)\n        };\n      });\n      console.log('DataTable processed data:', processedData);\n      setTableData(processedData);\n    } else {\n      // Use sample data if no data is provided\n      setTableData([...sampleData]);\n    }\n  }, [data]);\n\n  // Calculate summary statistics whenever tableData changes\n  useEffect(() => {\n    if (tableData.length > 0) {\n      calculateSummary(tableData);\n    }\n  }, [tableData]);\n\n  // Calculate summary statistics\n  const calculateSummary = data => {\n    if (!data || data.length === 0) return;\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      std: {}\n    };\n\n    // Determine available columns\n    const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    numericColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = data.map(item => {\n        // Handle various formats and types\n        let val = item[col];\n        if (val === null || val === undefined || val === '') return null;\n        if (typeof val === 'string') {\n          // Remove any non-numeric characters except decimal point\n          val = val.replace(/[^0-9.]/g, '');\n        }\n        return val;\n      }).filter(value => value !== null).map(value => {\n        const num = parseFloat(value);\n        return isNaN(num) ? 0 : num;\n      });\n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.mean[col] = mean;\n\n        // Calculate min and max\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n\n        // Calculate standard deviation\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.std[col] = Math.sqrt(avgSquaredDiff);\n      }\n    });\n    setSummary(summaryData);\n  };\n\n  // Handle cell value change\n  const handleCellChange = (rowIndex, columnName, value) => {\n    const updatedData = [...tableData];\n\n    // Update the cell value\n    updatedData[rowIndex][columnName] = value;\n\n    // Update the table data\n    setTableData(updatedData);\n\n    // Notify parent component\n    onDataUpdate(updatedData);\n  };\n\n  // Add a new row to the table\n  const handleAddRow = () => {\n    // Get the last date in the table\n    let lastDate = new Date();\n    if (tableData.length > 0) {\n      const lastRow = tableData[tableData.length - 1];\n      if (lastRow.date) {\n        lastDate = new Date(lastRow.date);\n        // Add one month to the last date\n        lastDate.setMonth(lastDate.getMonth() + 1);\n      }\n    }\n\n    // Format the date as YYYY-MM-DD\n    const formattedDate = lastDate.toISOString().split('T')[0];\n    const newRow = {\n      id: Date.now(),\n      date: formattedDate,\n      energy_use: '',\n      transport: '',\n      waste: '',\n      water: '',\n      fuel: '',\n      emissions: '',\n      production: '',\n      grid_intensity: ''\n    };\n    const updatedData = [...tableData, newRow];\n    setTableData(updatedData);\n    onDataUpdate(updatedData);\n  };\n\n  // Delete a row from the table\n  const handleDeleteRow = rowIndex => {\n    const updatedData = tableData.filter((_, index) => index !== rowIndex);\n    setTableData(updatedData);\n    onDataUpdate(updatedData);\n  };\n\n  // Validate numeric input\n  const validateNumeric = value => {\n    if (value === '' || value === null || value === undefined) return true;\n    return !isNaN(parseFloat(value)) && isFinite(value);\n  };\n\n  // Toggle summary display\n  const toggleSummary = () => {\n    setShowSummary(!showSummary);\n  };\n\n  // Format number for display\n  const formatNumber = (value, decimals = 2) => {\n    if (value === null || value === undefined || value === '') return '';\n    const num = parseFloat(value);\n    if (isNaN(num)) return value;\n    return num.toLocaleString('en-US', {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    });\n  };\n\n  // Render summary metrics\n  const renderSummaryMetrics = () => {\n    if (!summary || Object.keys(summary.mean).length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 14\n      }, this);\n    }\n    const columns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"summary-metrics\",\n      children: columns.map(col => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: getColumnHeader(col)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-values\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-value\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-value-label\",\n              children: \"Mean\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-value-number\",\n              children: formatNumber(summary.mean[col])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-value\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-value-label\",\n              children: \"Min\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-value-number\",\n              children: formatNumber(summary.min[col])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-value\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-value-label\",\n              children: \"Max\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-value-number highlight\",\n              children: formatNumber(summary.max[col])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric-value\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-value-label\",\n              children: \"Std Dev\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-value-number\",\n              children: formatNumber(summary.std[col])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this)]\n      }, col, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Get column header with units\n  const getColumnHeader = column => {\n    switch (column) {\n      case 'energy_use':\n        return 'Energy Use (kWh)';\n      case 'transport':\n        return 'Transport (km)';\n      case 'waste':\n        return 'Waste (tons)';\n      case 'water':\n        return 'Water (liters)';\n      case 'fuel':\n        return 'Fuel (liters)';\n      case 'emissions':\n        return 'Emissions (tons CO2e)';\n      case 'production':\n        return 'Production (units)';\n      case 'grid_intensity':\n        return 'Grid Intensity (kg CO2e/kWh)';\n      default:\n        return column.charAt(0).toUpperCase() + column.slice(1).replace('_', ' ');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-table-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-info-banner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-icon\",\n        children: \"\\u2139\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"This table shows \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"monthly emissions data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 31\n          }, this), \" required for Prophet forecasting.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Each row represents one month's data. For accurate forecasting, ensure data is chronological with no gaps.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You can edit cells directly, add new rows, or upload your own CSV/Excel file with the same structure.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-row-btn\",\n        onClick: handleAddRow,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"btn-icon\",\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), \" Add Monthly Row\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-summary-btn\",\n        onClick: toggleSummary,\n        children: showSummary ? 'Hide Summary' : 'Show Summary'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"data-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                minWidth: '120px'\n              },\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Energy Use (kWh)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Transport (km)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Waste (tons)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Water (liters)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Fuel (liters)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Emissions (tons CO2e)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Production (units)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Grid Intensity (kg CO2e/kWh)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"action-column\",\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableData.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                className: \"cell-input date-input\",\n                value: row.date ? typeof row.date === 'string' ? row.date.split('T')[0] : '' : '',\n                onChange: e => handleCellChange(rowIndex, 'date', e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 19\n              }, this), row.date && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"date-display\",\n                children: new Date(row.date).toLocaleDateString('en-US', {\n                  year: 'numeric',\n                  month: 'short',\n                  day: 'numeric'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `cell-input numeric ${!validateNumeric(row.energy_use) ? 'invalid' : ''}`,\n                value: row.energy_use !== undefined ? row.energy_use : '',\n                onChange: e => handleCellChange(rowIndex, 'energy_use', e.target.value),\n                placeholder: \"0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 367,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `cell-input numeric ${!validateNumeric(row.transport) ? 'invalid' : ''}`,\n                value: row.transport !== undefined ? row.transport : '',\n                onChange: e => handleCellChange(rowIndex, 'transport', e.target.value),\n                placeholder: \"0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `cell-input numeric ${!validateNumeric(row.waste) ? 'invalid' : ''}`,\n                value: row.waste !== undefined ? row.waste : '',\n                onChange: e => handleCellChange(rowIndex, 'waste', e.target.value),\n                placeholder: \"0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `cell-input numeric ${!validateNumeric(row.water) ? 'invalid' : ''}`,\n                value: row.water !== undefined ? row.water : '',\n                onChange: e => handleCellChange(rowIndex, 'water', e.target.value),\n                placeholder: \"0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `cell-input numeric ${!validateNumeric(row.fuel) ? 'invalid' : ''}`,\n                value: row.fuel !== undefined ? row.fuel : '',\n                onChange: e => handleCellChange(rowIndex, 'fuel', e.target.value),\n                placeholder: \"0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `cell-input numeric ${!validateNumeric(row.emissions) ? 'invalid' : ''}`,\n                value: row.emissions !== undefined ? row.emissions : '',\n                onChange: e => handleCellChange(rowIndex, 'emissions', e.target.value),\n                placeholder: \"0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `cell-input numeric ${!validateNumeric(row.production) ? 'invalid' : ''}`,\n                value: row.production !== undefined ? row.production : '',\n                onChange: e => handleCellChange(rowIndex, 'production', e.target.value),\n                placeholder: \"0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 421,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: `cell-input numeric ${!validateNumeric(row.grid_intensity) ? 'invalid' : ''}`,\n                value: row.grid_intensity !== undefined ? row.grid_intensity : '',\n                onChange: e => handleCellChange(rowIndex, 'grid_intensity', e.target.value),\n                placeholder: \"0.00\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"action-cell\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-row-btn\",\n                onClick: () => handleDeleteRow(rowIndex),\n                title: \"Delete this row\",\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this)]\n          }, row.id || rowIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), showSummary && tableData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-summary-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Data Summary Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this), renderSummaryMetrics()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-guide\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"File Upload Guide\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Your CSV or Excel file should have these columns:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"guide-columns\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 17\n            }, this), \": YYYY-MM-DD format (e.g., 2023-01-01)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"energy_use (kWh)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 17\n            }, this), \": Numeric value\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"transport (km)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 17\n            }, this), \": Numeric value\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"waste (tons)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 17\n            }, this), \": Numeric value\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"water (liters)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 17\n            }, this), \": Numeric value\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"fuel (liters)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this), \": Numeric value\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"emissions (tons CO2e)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 17\n            }, this), \": Numeric value\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"production (units)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 17\n            }, this), \": Numeric value\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"grid_intensity (kg CO2e/kWh)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this), \": Numeric value\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"guide-note\",\n        children: \"Note: Ensure each row represents one month of data for accurate forecasting.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n_s(DataTable, \"tBvEi83/ZLZ62p86TeUpU197QdU=\");\n_c = DataTable;\nexport default DataTable;\nvar _c;\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DataTable","data","onDataUpdate","_s","tableData","setTableData","showSummary","setShowSummary","summary","setSummary","mean","min","max","std","sampleData","id","date","energy_use","transport","waste","water","fuel","emissions","production","grid_intensity","length","processedData","map","item","processNumeric","value","undefined","num","parseFloat","isNaN","formattedDate","dateObj","Date","getTime","toISOString","split","e","console","error","log","now","Math","random","calculateSummary","summaryData","numericColumns","forEach","col","values","val","replace","filter","reduce","sum","squaredDiffs","pow","avgSquaredDiff","sqrt","handleCellChange","rowIndex","columnName","updatedData","handleAddRow","lastDate","lastRow","setMonth","getMonth","newRow","handleDeleteRow","_","index","validateNumeric","isFinite","toggleSummary","formatNumber","decimals","toLocaleString","minimumFractionDigits","maximumFractionDigits","renderSummaryMetrics","Object","keys","children","fileName","_jsxFileName","lineNumber","columnNumber","columns","className","getColumnHeader","column","charAt","toUpperCase","slice","onClick","style","minWidth","row","type","onChange","target","toLocaleDateString","year","month","day","placeholder","title","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/DataTable.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './DataTable.css';\n\nconst DataTable = ({ data, onDataUpdate }) => {\n  const [tableData, setTableData] = useState([]);\n  const [showSummary, setShowSummary] = useState(true);\n  const [summary, setSummary] = useState({\n    mean: {},\n    min: {},\n    max: {},\n    std: {}\n  });\n  \n  // Sample data for when no data is provided\n  const sampleData = [\n    {\n      id: 1,\n      date: '2023-01-01',\n      energy_use: 12500,\n      transport: 3200,\n      waste: 1.8,\n      water: 15000,\n      fuel: 850,\n      emissions: 8.2,\n      production: 1200,\n      grid_intensity: 0.42\n    },\n    {\n      id: 2,\n      date: '2023-02-01',\n      energy_use: 11800,\n      transport: 2950,\n      waste: 1.5,\n      water: 14200,\n      fuel: 780,\n      emissions: 7.8,\n      production: 1150,\n      grid_intensity: 0.41\n    },\n    {\n      id: 3,\n      date: '2023-03-01',\n      energy_use: 12200,\n      transport: 3100,\n      waste: 1.7,\n      water: 14800,\n      fuel: 820,\n      emissions: 8.0,\n      production: 1180,\n      grid_intensity: 0.42\n    }\n  ];\n  \n  // Update table data when data prop changes\n  useEffect(() => {\n    if (data && data.length > 0) {\n      // Process data to ensure all values are properly formatted\n      const processedData = data.map(item => {\n        // Ensure all numeric fields are numbers, not strings\n        const processNumeric = (value) => {\n          if (value === null || value === undefined || value === '') return 0;\n          const num = parseFloat(value);\n          return isNaN(num) ? 0 : num;\n        };\n        \n        // Format date properly\n        let formattedDate = item.date;\n        if (formattedDate) {\n          try {\n            // Try to convert to proper date format\n            const dateObj = new Date(formattedDate);\n            if (!isNaN(dateObj.getTime())) {\n              // Valid date, format as YYYY-MM-DD\n              formattedDate = dateObj.toISOString().split('T')[0];\n            }\n          } catch (e) {\n            console.error('Error formatting date:', e);\n          }\n        }\n        \n        console.log('Processing date:', item.date, '→', formattedDate);\n        \n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: formattedDate,\n          energy_use: processNumeric(item.energy_use),\n          transport: processNumeric(item.transport),\n          waste: processNumeric(item.waste),\n          water: processNumeric(item.water),\n          fuel: processNumeric(item.fuel),\n          emissions: processNumeric(item.emissions),\n          production: processNumeric(item.production),\n          grid_intensity: processNumeric(item.grid_intensity)\n        };\n      });\n      \n      console.log('DataTable processed data:', processedData);\n      setTableData(processedData);\n    } else {\n      // Use sample data if no data is provided\n      setTableData([...sampleData]);\n    }\n  }, [data]);\n  \n  // Calculate summary statistics whenever tableData changes\n  useEffect(() => {\n    if (tableData.length > 0) {\n      calculateSummary(tableData);\n    }\n  }, [tableData]);\n  \n  // Calculate summary statistics\n  const calculateSummary = (data) => {\n    if (!data || data.length === 0) return;\n    \n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      std: {}\n    };\n    \n    // Determine available columns\n    const numericColumns = [\n      'energy_use', 'transport', 'waste', 'water', \n      'fuel', 'emissions', 'production', 'grid_intensity'\n    ];\n    \n    numericColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = data\n        .map(item => {\n          // Handle various formats and types\n          let val = item[col];\n          if (val === null || val === undefined || val === '') return null;\n          if (typeof val === 'string') {\n            // Remove any non-numeric characters except decimal point\n            val = val.replace(/[^0-9.]/g, '');\n          }\n          return val;\n        })\n        .filter(value => value !== null)\n        .map(value => {\n          const num = parseFloat(value);\n          return isNaN(num) ? 0 : num;\n        });\n      \n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.mean[col] = mean;\n        \n        // Calculate min and max\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n        \n        // Calculate standard deviation\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.std[col] = Math.sqrt(avgSquaredDiff);\n      }\n    });\n    \n    setSummary(summaryData);\n  };\n  \n  // Handle cell value change\n  const handleCellChange = (rowIndex, columnName, value) => {\n    const updatedData = [...tableData];\n    \n    // Update the cell value\n    updatedData[rowIndex][columnName] = value;\n    \n    // Update the table data\n    setTableData(updatedData);\n    \n    // Notify parent component\n    onDataUpdate(updatedData);\n  };\n  \n  // Add a new row to the table\n  const handleAddRow = () => {\n    // Get the last date in the table\n    let lastDate = new Date();\n    if (tableData.length > 0) {\n      const lastRow = tableData[tableData.length - 1];\n      if (lastRow.date) {\n        lastDate = new Date(lastRow.date);\n        // Add one month to the last date\n        lastDate.setMonth(lastDate.getMonth() + 1);\n      }\n    }\n    \n    // Format the date as YYYY-MM-DD\n    const formattedDate = lastDate.toISOString().split('T')[0];\n    \n    const newRow = {\n      id: Date.now(),\n      date: formattedDate,\n      energy_use: '',\n      transport: '',\n      waste: '',\n      water: '',\n      fuel: '',\n      emissions: '',\n      production: '',\n      grid_intensity: ''\n    };\n    \n    const updatedData = [...tableData, newRow];\n    setTableData(updatedData);\n    onDataUpdate(updatedData);\n  };\n  \n  // Delete a row from the table\n  const handleDeleteRow = (rowIndex) => {\n    const updatedData = tableData.filter((_, index) => index !== rowIndex);\n    setTableData(updatedData);\n    onDataUpdate(updatedData);\n  };\n  \n  // Validate numeric input\n  const validateNumeric = (value) => {\n    if (value === '' || value === null || value === undefined) return true;\n    return !isNaN(parseFloat(value)) && isFinite(value);\n  };\n  \n  // Toggle summary display\n  const toggleSummary = () => {\n    setShowSummary(!showSummary);\n  };\n  \n  // Format number for display\n  const formatNumber = (value, decimals = 2) => {\n    if (value === null || value === undefined || value === '') return '';\n    \n    const num = parseFloat(value);\n    if (isNaN(num)) return value;\n    \n    return num.toLocaleString('en-US', {\n      minimumFractionDigits: decimals,\n      maximumFractionDigits: decimals\n    });\n  };\n  \n  // Render summary metrics\n  const renderSummaryMetrics = () => {\n    if (!summary || Object.keys(summary.mean).length === 0) {\n      return <p>No data available for summary</p>;\n    }\n    \n    const columns = [\n      'energy_use', 'transport', 'waste', 'water', \n      'fuel', 'emissions', 'production', 'grid_intensity'\n    ];\n    \n    return (\n      <div className=\"summary-metrics\">\n        {columns.map(col => (\n          <div className=\"metric-card\" key={col}>\n            <h4>{getColumnHeader(col)}</h4>\n            <div className=\"metric-values\">\n              <div className=\"metric-value\">\n                <span className=\"metric-value-label\">Mean</span>\n                <span className=\"metric-value-number\">\n                  {formatNumber(summary.mean[col])}\n                </span>\n              </div>\n              <div className=\"metric-value\">\n                <span className=\"metric-value-label\">Min</span>\n                <span className=\"metric-value-number\">\n                  {formatNumber(summary.min[col])}\n                </span>\n              </div>\n              <div className=\"metric-value\">\n                <span className=\"metric-value-label\">Max</span>\n                <span className=\"metric-value-number highlight\">\n                  {formatNumber(summary.max[col])}\n                </span>\n              </div>\n              <div className=\"metric-value\">\n                <span className=\"metric-value-label\">Std Dev</span>\n                <span className=\"metric-value-number\">\n                  {formatNumber(summary.std[col])}\n                </span>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  };\n  \n  // Get column header with units\n  const getColumnHeader = (column) => {\n    switch (column) {\n      case 'energy_use': return 'Energy Use (kWh)';\n      case 'transport': return 'Transport (km)';\n      case 'waste': return 'Waste (tons)';\n      case 'water': return 'Water (liters)';\n      case 'fuel': return 'Fuel (liters)';\n      case 'emissions': return 'Emissions (tons CO2e)';\n      case 'production': return 'Production (units)';\n      case 'grid_intensity': return 'Grid Intensity (kg CO2e/kWh)';\n      default: return column.charAt(0).toUpperCase() + column.slice(1).replace('_', ' ');\n    }\n  };\n  \n  return (\n    <div className=\"data-table-container\">\n      <div className=\"table-info-banner\">\n        <div className=\"info-icon\">ℹ️</div>\n        <div className=\"info-text\">\n          <p>This table shows <strong>monthly emissions data</strong> required for Prophet forecasting.</p>\n          <p>Each row represents one month's data. For accurate forecasting, ensure data is chronological with no gaps.</p>\n          <p>You can edit cells directly, add new rows, or upload your own CSV/Excel file with the same structure.</p>\n        </div>\n      </div>\n      \n      <div className=\"table-controls\">\n        <button className=\"add-row-btn\" onClick={handleAddRow}>\n          <span className=\"btn-icon\">+</span> Add Monthly Row\n        </button>\n        <button className=\"toggle-summary-btn\" onClick={toggleSummary}>\n          {showSummary ? 'Hide Summary' : 'Show Summary'}\n        </button>\n      </div>\n      \n      <div className=\"table-wrapper\">\n        <table className=\"data-table\">\n          <thead>\n            <tr>\n              <th style={{ minWidth: '120px' }}>Date</th>\n              <th>Energy Use (kWh)</th>\n              <th>Transport (km)</th>\n              <th>Waste (tons)</th>\n              <th>Water (liters)</th>\n              <th>Fuel (liters)</th>\n              <th>Emissions (tons CO2e)</th>\n              <th>Production (units)</th>\n              <th>Grid Intensity (kg CO2e/kWh)</th>\n              <th className=\"action-column\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.map((row, rowIndex) => (\n              <tr key={row.id || rowIndex}>\n                <td>\n                  <input\n                    type=\"date\"\n                    className=\"cell-input date-input\"\n                    value={row.date ? (typeof row.date === 'string' ? row.date.split('T')[0] : '') : ''}\n                    onChange={(e) => handleCellChange(rowIndex, 'date', e.target.value)}\n                  />\n                  {row.date && (\n                    <div className=\"date-display\">\n                      {new Date(row.date).toLocaleDateString('en-US', {\n                        year: 'numeric',\n                        month: 'short',\n                        day: 'numeric'\n                      })}\n                    </div>\n                  )}\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    className={`cell-input numeric ${!validateNumeric(row.energy_use) ? 'invalid' : ''}`}\n                    value={row.energy_use !== undefined ? row.energy_use : ''}\n                    onChange={(e) => handleCellChange(rowIndex, 'energy_use', e.target.value)}\n                    placeholder=\"0.00\"\n                  />\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    className={`cell-input numeric ${!validateNumeric(row.transport) ? 'invalid' : ''}`}\n                    value={row.transport !== undefined ? row.transport : ''}\n                    onChange={(e) => handleCellChange(rowIndex, 'transport', e.target.value)}\n                    placeholder=\"0.00\"\n                  />\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    className={`cell-input numeric ${!validateNumeric(row.waste) ? 'invalid' : ''}`}\n                    value={row.waste !== undefined ? row.waste : ''}\n                    onChange={(e) => handleCellChange(rowIndex, 'waste', e.target.value)}\n                    placeholder=\"0.00\"\n                  />\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    className={`cell-input numeric ${!validateNumeric(row.water) ? 'invalid' : ''}`}\n                    value={row.water !== undefined ? row.water : ''}\n                    onChange={(e) => handleCellChange(rowIndex, 'water', e.target.value)}\n                    placeholder=\"0.00\"\n                  />\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    className={`cell-input numeric ${!validateNumeric(row.fuel) ? 'invalid' : ''}`}\n                    value={row.fuel !== undefined ? row.fuel : ''}\n                    onChange={(e) => handleCellChange(rowIndex, 'fuel', e.target.value)}\n                    placeholder=\"0.00\"\n                  />\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    className={`cell-input numeric ${!validateNumeric(row.emissions) ? 'invalid' : ''}`}\n                    value={row.emissions !== undefined ? row.emissions : ''}\n                    onChange={(e) => handleCellChange(rowIndex, 'emissions', e.target.value)}\n                    placeholder=\"0.00\"\n                  />\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    className={`cell-input numeric ${!validateNumeric(row.production) ? 'invalid' : ''}`}\n                    value={row.production !== undefined ? row.production : ''}\n                    onChange={(e) => handleCellChange(rowIndex, 'production', e.target.value)}\n                    placeholder=\"0.00\"\n                  />\n                </td>\n                <td>\n                  <input\n                    type=\"text\"\n                    className={`cell-input numeric ${!validateNumeric(row.grid_intensity) ? 'invalid' : ''}`}\n                    value={row.grid_intensity !== undefined ? row.grid_intensity : ''}\n                    onChange={(e) => handleCellChange(rowIndex, 'grid_intensity', e.target.value)}\n                    placeholder=\"0.00\"\n                  />\n                </td>\n                <td className=\"action-cell\">\n                  <button\n                    className=\"delete-row-btn\"\n                    onClick={() => handleDeleteRow(rowIndex)}\n                    title=\"Delete this row\"\n                  >\n                    ✕\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      \n      {showSummary && tableData.length > 0 && (\n        <div className=\"data-summary-card\">\n          <h3>Data Summary Statistics</h3>\n          {renderSummaryMetrics()}\n        </div>\n      )}\n      \n      <div className=\"table-guide\">\n        <h4>File Upload Guide</h4>\n        <p>Your CSV or Excel file should have these columns:</p>\n        <div className=\"guide-columns\">\n          <ul>\n            <li><strong>date</strong>: YYYY-MM-DD format (e.g., 2023-01-01)</li>\n            <li><strong>energy_use (kWh)</strong>: Numeric value</li>\n            <li><strong>transport (km)</strong>: Numeric value</li>\n            <li><strong>waste (tons)</strong>: Numeric value</li>\n            <li><strong>water (liters)</strong>: Numeric value</li>\n            <li><strong>fuel (liters)</strong>: Numeric value</li>\n            <li><strong>emissions (tons CO2e)</strong>: Numeric value</li>\n            <li><strong>production (units)</strong>: Numeric value</li>\n            <li><strong>grid_intensity (kg CO2e/kWh)</strong>: Numeric value</li>\n          </ul>\n        </div>\n        <p className=\"guide-note\">Note: Ensure each row represents one month of data for accurate forecasting.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default DataTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}