{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\ForecastChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForecastChart = ({\n  data,\n  forecast,\n  optimizedForecast,\n  impacts\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Clean up chart on unmount\n  useEffect(() => {\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!forecast || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n    try {\n      const ctx = chartRef.current.getContext('2d');\n\n      // Process data to ensure one point per month\n      const processedData = processMonthlyData(data);\n      const processedForecast = processForecastData(forecast);\n      const processedOptimized = optimizedForecast ? processForecastData(optimizedForecast) : [];\n\n      // Add an empty month at the beginning to push January 2023 to the right\n      const monthLabels = generateMonthLabels(processedData, processedForecast, processedOptimized);\n      monthLabels.unshift(\"\"); // Add empty label at the beginning\n\n      // Create datasets with null values for the first empty month\n      const createDatasetWithPadding = (data, options) => {\n        const paddedData = [null, ...data]; // Add null as first value\n        return {\n          ...options,\n          data: paddedData\n        };\n      };\n\n      // Create chart with extra padding for first point\n      chartInstance.current = new Chart(ctx, {\n        type: 'bar',\n        // Use bar as base type for more control\n        data: {\n          labels: monthLabels,\n          datasets: [\n          // Actual data\n          createDatasetWithPadding(processedData.map(d => d.emissions), {\n            type: 'line',\n            label: 'Actual Emissions',\n            borderColor: '#00FFFF',\n            // Cyan\n            backgroundColor: 'rgba(0, 255, 255, 0.1)',\n            borderWidth: 3,\n            pointBackgroundColor: '#00FFFF',\n            pointBorderColor: '#000',\n            pointRadius: 9,\n            pointHoverRadius: 11,\n            tension: 0.4,\n            fill: false,\n            clip: false // Prevent clipping of points at edges\n          }),\n          // Forecast data\n          createDatasetWithPadding(processedForecast.map(d => d.emissions), {\n            type: 'line',\n            label: 'Forecast Emissions',\n            borderColor: '#FF00FF',\n            // Magenta\n            backgroundColor: 'rgba(255, 0, 255, 0.1)',\n            borderWidth: 3,\n            pointBackgroundColor: '#FF00FF',\n            pointBorderColor: '#000',\n            pointRadius: 9,\n            pointHoverRadius: 11,\n            tension: 0.4,\n            fill: false,\n            clip: false // Prevent clipping of points at edges\n          }),\n          // Upper bound\n          createDatasetWithPadding(processedForecast.map(d => d.upper), {\n            type: 'line',\n            label: 'Upper Bound',\n            borderColor: 'rgba(255, 0, 255, 0.3)',\n            backgroundColor: 'transparent',\n            borderWidth: 1,\n            borderDash: [5, 5],\n            pointRadius: 0,\n            fill: false,\n            clip: false\n          }),\n          // Lower bound\n          createDatasetWithPadding(processedForecast.map(d => d.lower), {\n            type: 'line',\n            label: 'Lower Bound',\n            borderColor: 'rgba(255, 0, 255, 0.3)',\n            backgroundColor: 'rgba(255, 0, 255, 0.1)',\n            borderWidth: 1,\n            borderDash: [5, 5],\n            pointRadius: 0,\n            fill: '+1',\n            clip: false\n          })].concat(\n          // Add optimized forecast if available\n          optimizedForecast ? [createDatasetWithPadding(processedOptimized.map(d => d.emissions), {\n            type: 'line',\n            label: 'Optimized Emissions',\n            borderColor: '#00FF00',\n            // Green\n            backgroundColor: 'rgba(0, 255, 0, 0.1)',\n            borderWidth: 3,\n            borderDash: [5, 5],\n            pointBackgroundColor: '#00FF00',\n            pointBorderColor: '#000',\n            pointRadius: 9,\n            pointHoverRadius: 11,\n            tension: 0.4,\n            fill: false,\n            clip: false // Prevent clipping of points at edges\n          })] : [])\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          animation: {\n            duration: 2000,\n            easing: 'easeOutQuart'\n          },\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Month',\n                color: '#fff',\n                font: {\n                  family: 'Orbitron',\n                  size: 16,\n                  weight: 'bold'\n                },\n                padding: {\n                  top: 10,\n                  bottom: 10\n                }\n              },\n              grid: {\n                color: 'rgba(255, 255, 255, 0.1)',\n                tickLength: 10\n              },\n              ticks: {\n                color: '#fff',\n                font: {\n                  family: 'Roboto',\n                  size: 12,\n                  weight: 'bold'\n                },\n                padding: 15,\n                maxRotation: 45,\n                minRotation: 45,\n                callback: function (value, index) {\n                  // Don't display the first empty label\n                  return index === 0 ? '' : monthLabels[index];\n                }\n              },\n              offset: true,\n              // Add offset to ensure bars don't overlap with axis\n              // Ensure extra space at the beginning and end\n              afterFit: function (scale) {\n                scale.paddingLeft = 80; // Add extra padding to the left\n                scale.paddingRight = 50; // Add extra padding to the right\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Emissions (tons CO2e)',\n                color: '#fff',\n                font: {\n                  family: 'Orbitron',\n                  size: 16,\n                  weight: 'bold'\n                },\n                padding: {\n                  top: 10,\n                  left: 10,\n                  right: 10,\n                  bottom: 10\n                }\n              },\n              grid: {\n                color: 'rgba(255, 255, 255, 0.1)'\n              },\n              ticks: {\n                color: '#fff',\n                font: {\n                  family: 'Roboto',\n                  size: 12,\n                  weight: 'bold'\n                },\n                padding: 15,\n                callback: function (value) {\n                  return value.toFixed(1);\n                }\n              },\n              beginAtZero: false,\n              // Ensure extra space at the top and bottom\n              afterFit: function (scale) {\n                scale.paddingTop = 20; // Add extra padding to the top\n                scale.paddingBottom = 20; // Add extra padding to the bottom\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                font: {\n                  family: 'Orbitron',\n                  size: 12,\n                  weight: 'bold'\n                },\n                color: '#fff',\n                padding: 20,\n                usePointStyle: true,\n                pointStyle: 'circle',\n                filter: function (item) {\n                  // Hide bounds from legend\n                  return !['Upper Bound', 'Lower Bound'].includes(item.text);\n                }\n              }\n            },\n            tooltip: {\n              enabled: true,\n              mode: 'index',\n              intersect: false,\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              titleFont: {\n                family: 'Orbitron',\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                family: 'Roboto',\n                size: 13\n              },\n              borderColor: 'rgba(0, 255, 255, 0.5)',\n              borderWidth: 1,\n              padding: 12,\n              callbacks: {\n                title: function (tooltipItems) {\n                  // Skip the first empty label in tooltips\n                  const index = tooltipItems[0].dataIndex;\n                  return index === 0 ? '' : monthLabels[index];\n                },\n                label: function (context) {\n                  // Skip the first empty data point in tooltips\n                  if (context.dataIndex === 0) return null;\n                  let label = context.dataset.label || '';\n                  if (label) {\n                    label += ': ';\n                  }\n                  if (context.parsed.y !== null) {\n                    label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                  }\n                  return label;\n                }\n              }\n            }\n          },\n          elements: {\n            point: {\n              radius: 9,\n              hoverRadius: 11,\n              hitRadius: 15,\n              borderWidth: 2\n            },\n            line: {\n              tension: 0.4\n            }\n          },\n          layout: {\n            padding: {\n              left: 60,\n              right: 60,\n              top: 60,\n              bottom: 60\n            }\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"Error creating chart:\", error);\n    }\n  }, [data, forecast, optimizedForecast]);\n\n  // Process actual data to ensure one point per month\n  const processMonthlyData = data => {\n    if (!data || data.length === 0) return [];\n\n    // Group by month\n    const monthlyData = {};\n    data.forEach(item => {\n      if (!item.date || !item.emissions) return;\n      const date = new Date(item.date);\n      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      if (!monthlyData[monthKey]) {\n        monthlyData[monthKey] = {\n          month: monthKey,\n          monthLabel: `${date.toLocaleString('default', {\n            month: 'long'\n          })} ${date.getFullYear()}`,\n          emissions: 0\n        };\n      }\n      monthlyData[monthKey].emissions += parseFloat(item.emissions) || 0;\n    });\n\n    // Convert to array and sort by month\n    return Object.values(monthlyData).sort((a, b) => a.month.localeCompare(b.month));\n  };\n\n  // Process forecast data\n  const processForecastData = forecastData => {\n    if (!forecastData || forecastData.length === 0) return [];\n    return forecastData.map(item => {\n      const date = new Date(item.ds);\n      return {\n        month: `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`,\n        monthLabel: `${date.toLocaleString('default', {\n          month: 'long'\n        })} ${date.getFullYear()}`,\n        emissions: item.predicted_emissions,\n        upper: item.upper_bound,\n        lower: item.lower_bound\n      };\n    }).sort((a, b) => a.month.localeCompare(b.month));\n  };\n\n  // Generate month labels for x-axis\n  const generateMonthLabels = (actualData, forecastData, optimizedData) => {\n    // Combine all months\n    const allMonths = [...actualData.map(d => ({\n      month: d.month,\n      label: d.monthLabel\n    })), ...forecastData.map(d => ({\n      month: d.month,\n      label: d.monthLabel\n    })), ...optimizedData.map(d => ({\n      month: d.month,\n      label: d.monthLabel\n    }))];\n\n    // Remove duplicates and sort\n    const uniqueMonths = Array.from(new Map(allMonths.map(item => [item.month, item.label])).values()).sort();\n    return uniqueMonths;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forecast-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Monthly Carbon Emissions Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      style: {\n        height: '500px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), impacts && Object.keys(impacts).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"impact-factors\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Key Impact Factors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"impact-list\",\n        children: Object.entries(impacts).sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score)).slice(0, 3).map(([factor, data], index) => {\n          let factorName = factor;\n          if (factor === 'energy_use') factorName = 'Energy Use';\n          if (factor === 'transport') factorName = 'Transport';\n          if (factor === 'waste') factorName = 'Waste';\n          if (factor === 'water') factorName = 'Water';\n          if (factor === 'fuel') factorName = 'Fuel';\n          if (factor === 'grid_intensity') factorName = 'Grid Intensity';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"impact-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"impact-rank\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"impact-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"impact-name\",\n                children: factorName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"impact-score\",\n                children: [\"Impact Score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"impact-value\",\n                  children: Math.abs(data.impact_score).toFixed(2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 405,\n                  columnNumber: 39\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 21\n            }, this)]\n          }, factor, true, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 377,\n    columnNumber: 5\n  }, this);\n};\n_s(ForecastChart, \"7fjJSqHc7Us8KoBJ87EcyyXXnwQ=\");\n_c = ForecastChart;\nexport default ForecastChart;\nvar _c;\n$RefreshReg$(_c, \"ForecastChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ForecastChart","data","forecast","optimizedForecast","impacts","_s","chartRef","chartInstance","current","destroy","ctx","getContext","processedData","processMonthlyData","processedForecast","processForecastData","processedOptimized","monthLabels","generateMonthLabels","unshift","createDatasetWithPadding","options","paddedData","type","labels","datasets","map","d","emissions","label","borderColor","backgroundColor","borderWidth","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","tension","fill","clip","upper","borderDash","lower","concat","responsive","maintainAspectRatio","animation","duration","easing","scales","x","title","display","text","color","font","family","size","weight","padding","top","bottom","grid","tickLength","ticks","maxRotation","minRotation","callback","value","index","offset","afterFit","scale","paddingLeft","paddingRight","y","left","right","toFixed","beginAtZero","paddingTop","paddingBottom","plugins","legend","position","usePointStyle","pointStyle","filter","item","includes","tooltip","enabled","mode","intersect","titleFont","bodyFont","callbacks","tooltipItems","dataIndex","context","dataset","parsed","elements","point","radius","hoverRadius","hitRadius","line","layout","error","console","length","monthlyData","forEach","date","Date","monthKey","getFullYear","String","getMonth","padStart","month","monthLabel","toLocaleString","parseFloat","Object","values","sort","a","b","localeCompare","forecastData","ds","predicted_emissions","upper_bound","lower_bound","actualData","optimizedData","allMonths","uniqueMonths","Array","from","Map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","ref","keys","entries","Math","abs","impact_score","slice","factor","factorName","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/ForecastChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\n\nconst ForecastChart = ({ data, forecast, optimizedForecast, impacts }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Clean up chart on unmount\n  useEffect(() => {\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!forecast || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n\n    try {\n      const ctx = chartRef.current.getContext('2d');\n      \n      // Process data to ensure one point per month\n      const processedData = processMonthlyData(data);\n      const processedForecast = processForecastData(forecast);\n      const processedOptimized = optimizedForecast ? processForecastData(optimizedForecast) : [];\n      \n      // Add an empty month at the beginning to push January 2023 to the right\n      const monthLabels = generateMonthLabels(processedData, processedForecast, processedOptimized);\n      monthLabels.unshift(\"\"); // Add empty label at the beginning\n      \n      // Create datasets with null values for the first empty month\n      const createDatasetWithPadding = (data, options) => {\n        const paddedData = [null, ...data]; // Add null as first value\n        return {\n          ...options,\n          data: paddedData\n        };\n      };\n      \n      // Create chart with extra padding for first point\n      chartInstance.current = new Chart(ctx, {\n        type: 'bar', // Use bar as base type for more control\n        data: {\n          labels: monthLabels,\n          datasets: [\n            // Actual data\n            createDatasetWithPadding(\n              processedData.map(d => d.emissions),\n              {\n                type: 'line',\n                label: 'Actual Emissions',\n                borderColor: '#00FFFF', // Cyan\n                backgroundColor: 'rgba(0, 255, 255, 0.1)',\n                borderWidth: 3,\n                pointBackgroundColor: '#00FFFF',\n                pointBorderColor: '#000',\n                pointRadius: 9,\n                pointHoverRadius: 11,\n                tension: 0.4,\n                fill: false,\n                clip: false // Prevent clipping of points at edges\n              }\n            ),\n            // Forecast data\n            createDatasetWithPadding(\n              processedForecast.map(d => d.emissions),\n              {\n                type: 'line',\n                label: 'Forecast Emissions',\n                borderColor: '#FF00FF', // Magenta\n                backgroundColor: 'rgba(255, 0, 255, 0.1)',\n                borderWidth: 3,\n                pointBackgroundColor: '#FF00FF',\n                pointBorderColor: '#000',\n                pointRadius: 9,\n                pointHoverRadius: 11,\n                tension: 0.4,\n                fill: false,\n                clip: false // Prevent clipping of points at edges\n              }\n            ),\n            // Upper bound\n            createDatasetWithPadding(\n              processedForecast.map(d => d.upper),\n              {\n                type: 'line',\n                label: 'Upper Bound',\n                borderColor: 'rgba(255, 0, 255, 0.3)',\n                backgroundColor: 'transparent',\n                borderWidth: 1,\n                borderDash: [5, 5],\n                pointRadius: 0,\n                fill: false,\n                clip: false\n              }\n            ),\n            // Lower bound\n            createDatasetWithPadding(\n              processedForecast.map(d => d.lower),\n              {\n                type: 'line',\n                label: 'Lower Bound',\n                borderColor: 'rgba(255, 0, 255, 0.3)',\n                backgroundColor: 'rgba(255, 0, 255, 0.1)',\n                borderWidth: 1,\n                borderDash: [5, 5],\n                pointRadius: 0,\n                fill: '+1',\n                clip: false\n              }\n            )\n          ].concat(\n            // Add optimized forecast if available\n            optimizedForecast ? [\n              createDatasetWithPadding(\n                processedOptimized.map(d => d.emissions),\n                {\n                  type: 'line',\n                  label: 'Optimized Emissions',\n                  borderColor: '#00FF00', // Green\n                  backgroundColor: 'rgba(0, 255, 0, 0.1)',\n                  borderWidth: 3,\n                  borderDash: [5, 5],\n                  pointBackgroundColor: '#00FF00',\n                  pointBorderColor: '#000',\n                  pointRadius: 9,\n                  pointHoverRadius: 11,\n                  tension: 0.4,\n                  fill: false,\n                  clip: false // Prevent clipping of points at edges\n                }\n              )\n            ] : []\n          )\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          animation: {\n            duration: 2000,\n            easing: 'easeOutQuart'\n          },\n          scales: {\n            x: {\n              title: {\n                display: true,\n                text: 'Month',\n                color: '#fff',\n                font: {\n                  family: 'Orbitron',\n                  size: 16,\n                  weight: 'bold'\n                },\n                padding: {top: 10, bottom: 10}\n              },\n              grid: {\n                color: 'rgba(255, 255, 255, 0.1)',\n                tickLength: 10\n              },\n              ticks: {\n                color: '#fff',\n                font: {\n                  family: 'Roboto',\n                  size: 12,\n                  weight: 'bold'\n                },\n                padding: 15,\n                maxRotation: 45,\n                minRotation: 45,\n                callback: function(value, index) {\n                  // Don't display the first empty label\n                  return index === 0 ? '' : monthLabels[index];\n                }\n              },\n              offset: true, // Add offset to ensure bars don't overlap with axis\n              // Ensure extra space at the beginning and end\n              afterFit: function(scale) {\n                scale.paddingLeft = 80;  // Add extra padding to the left\n                scale.paddingRight = 50; // Add extra padding to the right\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Emissions (tons CO2e)',\n                color: '#fff',\n                font: {\n                  family: 'Orbitron',\n                  size: 16,\n                  weight: 'bold'\n                },\n                padding: {top: 10, left: 10, right: 10, bottom: 10}\n              },\n              grid: {\n                color: 'rgba(255, 255, 255, 0.1)'\n              },\n              ticks: {\n                color: '#fff',\n                font: {\n                  family: 'Roboto',\n                  size: 12,\n                  weight: 'bold'\n                },\n                padding: 15,\n                callback: function(value) {\n                  return value.toFixed(1);\n                }\n              },\n              beginAtZero: false,\n              // Ensure extra space at the top and bottom\n              afterFit: function(scale) {\n                scale.paddingTop = 20;    // Add extra padding to the top\n                scale.paddingBottom = 20; // Add extra padding to the bottom\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                font: {\n                  family: 'Orbitron',\n                  size: 12,\n                  weight: 'bold'\n                },\n                color: '#fff',\n                padding: 20,\n                usePointStyle: true,\n                pointStyle: 'circle',\n                filter: function(item) {\n                  // Hide bounds from legend\n                  return !['Upper Bound', 'Lower Bound'].includes(item.text);\n                }\n              }\n            },\n            tooltip: {\n              enabled: true,\n              mode: 'index',\n              intersect: false,\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              titleFont: {\n                family: 'Orbitron',\n                size: 14,\n                weight: 'bold'\n              },\n              bodyFont: {\n                family: 'Roboto',\n                size: 13\n              },\n              borderColor: 'rgba(0, 255, 255, 0.5)',\n              borderWidth: 1,\n              padding: 12,\n              callbacks: {\n                title: function(tooltipItems) {\n                  // Skip the first empty label in tooltips\n                  const index = tooltipItems[0].dataIndex;\n                  return index === 0 ? '' : monthLabels[index];\n                },\n                label: function(context) {\n                  // Skip the first empty data point in tooltips\n                  if (context.dataIndex === 0) return null;\n                  \n                  let label = context.dataset.label || '';\n                  \n                  if (label) {\n                    label += ': ';\n                  }\n                  \n                  if (context.parsed.y !== null) {\n                    label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                  }\n                  \n                  return label;\n                }\n              }\n            }\n          },\n          elements: {\n            point: {\n              radius: 9,\n              hoverRadius: 11,\n              hitRadius: 15,\n              borderWidth: 2\n            },\n            line: {\n              tension: 0.4\n            }\n          },\n          layout: {\n            padding: {\n              left: 60,\n              right: 60,\n              top: 60,\n              bottom: 60\n            }\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"Error creating chart:\", error);\n    }\n  }, [data, forecast, optimizedForecast]);\n\n  // Process actual data to ensure one point per month\n  const processMonthlyData = (data) => {\n    if (!data || data.length === 0) return [];\n    \n    // Group by month\n    const monthlyData = {};\n    \n    data.forEach(item => {\n      if (!item.date || !item.emissions) return;\n      \n      const date = new Date(item.date);\n      const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      \n      if (!monthlyData[monthKey]) {\n        monthlyData[monthKey] = {\n          month: monthKey,\n          monthLabel: `${date.toLocaleString('default', { month: 'long' })} ${date.getFullYear()}`,\n          emissions: 0\n        };\n      }\n      \n      monthlyData[monthKey].emissions += parseFloat(item.emissions) || 0;\n    });\n    \n    // Convert to array and sort by month\n    return Object.values(monthlyData)\n      .sort((a, b) => a.month.localeCompare(b.month));\n  };\n  \n  // Process forecast data\n  const processForecastData = (forecastData) => {\n    if (!forecastData || forecastData.length === 0) return [];\n    \n    return forecastData.map(item => {\n      const date = new Date(item.ds);\n      return {\n        month: `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`,\n        monthLabel: `${date.toLocaleString('default', { month: 'long' })} ${date.getFullYear()}`,\n        emissions: item.predicted_emissions,\n        upper: item.upper_bound,\n        lower: item.lower_bound\n      };\n    }).sort((a, b) => a.month.localeCompare(b.month));\n  };\n  \n  // Generate month labels for x-axis\n  const generateMonthLabels = (actualData, forecastData, optimizedData) => {\n    // Combine all months\n    const allMonths = [\n      ...actualData.map(d => ({ month: d.month, label: d.monthLabel })),\n      ...forecastData.map(d => ({ month: d.month, label: d.monthLabel })),\n      ...optimizedData.map(d => ({ month: d.month, label: d.monthLabel }))\n    ];\n    \n    // Remove duplicates and sort\n    const uniqueMonths = Array.from(\n      new Map(allMonths.map(item => [item.month, item.label])).values()\n    ).sort();\n    \n    return uniqueMonths;\n  };\n\n  return (\n    <div className=\"forecast-chart-container\">\n      <h3 className=\"chart-title\">Monthly Carbon Emissions Forecast</h3>\n      <div className=\"chart-container\" style={{ height: '500px' }}>\n        <canvas ref={chartRef}></canvas>\n      </div>\n      \n      {impacts && Object.keys(impacts).length > 0 && (\n        <div className=\"impact-factors\">\n          <h4>Key Impact Factors</h4>\n          <div className=\"impact-list\">\n            {Object.entries(impacts)\n              .sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score))\n              .slice(0, 3)\n              .map(([factor, data], index) => {\n                let factorName = factor;\n                if (factor === 'energy_use') factorName = 'Energy Use';\n                if (factor === 'transport') factorName = 'Transport';\n                if (factor === 'waste') factorName = 'Waste';\n                if (factor === 'water') factorName = 'Water';\n                if (factor === 'fuel') factorName = 'Fuel';\n                if (factor === 'grid_intensity') factorName = 'Grid Intensity';\n                \n                return (\n                  <div key={factor} className=\"impact-item\">\n                    <div className=\"impact-rank\">{index + 1}</div>\n                    <div className=\"impact-info\">\n                      <div className=\"impact-name\">{factorName}</div>\n                      <div className=\"impact-score\">\n                        Impact Score: <span className=\"impact-value\">{Math.abs(data.impact_score).toFixed(2)}</span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ForecastChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}