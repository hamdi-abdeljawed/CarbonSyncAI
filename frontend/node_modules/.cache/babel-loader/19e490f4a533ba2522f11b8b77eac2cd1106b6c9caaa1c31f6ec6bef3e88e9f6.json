{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\ForecastChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport './ForecastChart.css';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst ForecastChart = ({\n  actualData,\n  forecastData,\n  optimizedData\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    if (!actualData || !forecastData) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const ctx = chartRef.current.getContext('2d');\n\n    // Prepare data\n    const actualDates = actualData.map(d => new Date(d.date));\n    const actualValues = actualData.map(d => d.emissions);\n    const forecastDates = forecastData.map(d => new Date(d.date));\n    const forecastValues = forecastData.map(d => d.predicted_emissions);\n    const lowerBounds = forecastData.map(d => d.lower_bound);\n    const upperBounds = forecastData.map(d => d.upper_bound);\n\n    // Prepare optimized data if available\n    const optimizedValues = optimizedData ? optimizedData.map(d => d.predicted_emissions) : null;\n\n    // Create datasets\n    const datasets = [{\n      label: 'Actual Emissions',\n      data: actualValues,\n      borderColor: '#00FFFF',\n      // Cyan\n      backgroundColor: 'rgba(0, 255, 255, 0.1)',\n      borderWidth: 2,\n      pointBackgroundColor: '#00FFFF',\n      pointBorderColor: '#00FFFF',\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      tension: 0.4\n    }, {\n      label: 'Forecasted Emissions',\n      data: Array(actualValues.length).fill(null).concat(forecastValues),\n      borderColor: '#FF00FF',\n      // Magenta\n      backgroundColor: 'rgba(255, 0, 255, 0.1)',\n      borderWidth: 2,\n      pointBackgroundColor: '#FF00FF',\n      pointBorderColor: '#FF00FF',\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      tension: 0.4\n    }, {\n      label: 'Upper Bound',\n      data: Array(actualValues.length).fill(null).concat(upperBounds),\n      borderColor: 'rgba(255, 0, 255, 0.3)',\n      backgroundColor: 'transparent',\n      borderWidth: 1,\n      borderDash: [5, 5],\n      pointRadius: 0,\n      fill: '+1'\n    }, {\n      label: 'Lower Bound',\n      data: Array(actualValues.length).fill(null).concat(lowerBounds),\n      borderColor: 'rgba(255, 0, 255, 0.3)',\n      backgroundColor: 'rgba(255, 0, 255, 0.1)',\n      borderWidth: 1,\n      borderDash: [5, 5],\n      pointRadius: 0,\n      fill: false\n    }];\n\n    // Add optimized forecast if available\n    if (optimizedValues) {\n      datasets.push({\n        label: 'Optimized Emissions',\n        data: Array(actualValues.length).fill(null).concat(optimizedValues),\n        borderColor: '#00FF00',\n        // Green\n        backgroundColor: 'rgba(0, 255, 0, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FF00',\n        pointBorderColor: '#00FF00',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      });\n    }\n\n    // All dates combined for x-axis\n    const allDates = [...actualDates, ...forecastDates];\n\n    // Create chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: allDates,\n        datasets: datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 2000,\n          easing: 'easeOutQuart'\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'month',\n              displayFormats: {\n                month: 'MMM yyyy'\n              }\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Emissions (tons CO2e)',\n              color: '#CCC'\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              color: '#CCC',\n              font: {\n                family: \"'Orbitron', sans-serif\",\n                size: 12\n              },\n              boxWidth: 15,\n              usePointStyle: true\n            }\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            titleFont: {\n              family: \"'Orbitron', sans-serif\"\n            },\n            bodyFont: {\n              family: \"'Roboto', sans-serif\"\n            },\n            borderColor: 'rgba(0, 255, 255, 0.3)',\n            borderWidth: 1,\n            callbacks: {\n              label: function (context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                }\n                return label;\n              }\n            }\n          }\n        }\n      }\n    });\n\n    // Apply animation to draw lines\n    chartInstance.current.options.animation = {\n      onComplete: function () {\n        const meta = chartInstance.current.getDatasetMeta(0);\n        const lineMeta = chartInstance.current.getDatasetMeta(1);\n        if (meta.controller.chart.ctx) {\n          meta.controller.chart.ctx.save();\n          meta.controller.chart.ctx.strokeStyle = '#00FFFF';\n          meta.controller.chart.ctx.lineWidth = 2;\n          meta.controller.chart.ctx.setLineDash([]);\n          meta.controller.chart.ctx.beginPath();\n          meta.data.forEach(point => {\n            meta.controller.chart.ctx.lineTo(point.x, point.y);\n          });\n          meta.controller.chart.ctx.stroke();\n          meta.controller.chart.ctx.restore();\n        }\n      }\n    };\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [actualData, forecastData, optimizedData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#00FFFF'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: \"Actual Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#FF00FF'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: \"Forecasted Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), optimizedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#00FF00'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: \"Optimized Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 216,\n    columnNumber: 5\n  }, this);\n};\n_s(ForecastChart, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = ForecastChart;\nexport default ForecastChart;\nvar _c;\n$RefreshReg$(_c, \"ForecastChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","registerables","jsxDEV","_jsxDEV","register","ForecastChart","actualData","forecastData","optimizedData","_s","chartRef","chartInstance","current","destroy","ctx","getContext","actualDates","map","d","Date","date","actualValues","emissions","forecastDates","forecastValues","predicted_emissions","lowerBounds","lower_bound","upperBounds","upper_bound","optimizedValues","datasets","label","data","borderColor","backgroundColor","borderWidth","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","tension","Array","length","fill","concat","borderDash","push","allDates","type","labels","options","responsive","maintainAspectRatio","animation","duration","easing","scales","x","time","unit","displayFormats","month","grid","color","ticks","y","title","display","text","plugins","legend","position","font","family","size","boxWidth","usePointStyle","tooltip","titleFont","bodyFont","callbacks","context","dataset","parsed","toFixed","onComplete","meta","getDatasetMeta","lineMeta","controller","chart","save","strokeStyle","lineWidth","setLineDash","beginPath","forEach","point","lineTo","stroke","restore","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/ForecastChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport './ForecastChart.css';\n\n// Register Chart.js components\nChart.register(...registerables);\n\nconst ForecastChart = ({ actualData, forecastData, optimizedData }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    if (!actualData || !forecastData) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    const ctx = chartRef.current.getContext('2d');\n\n    // Prepare data\n    const actualDates = actualData.map(d => new Date(d.date));\n    const actualValues = actualData.map(d => d.emissions);\n\n    const forecastDates = forecastData.map(d => new Date(d.date));\n    const forecastValues = forecastData.map(d => d.predicted_emissions);\n    const lowerBounds = forecastData.map(d => d.lower_bound);\n    const upperBounds = forecastData.map(d => d.upper_bound);\n\n    // Prepare optimized data if available\n    const optimizedValues = optimizedData ? optimizedData.map(d => d.predicted_emissions) : null;\n\n    // Create datasets\n    const datasets = [\n      {\n        label: 'Actual Emissions',\n        data: actualValues,\n        borderColor: '#00FFFF', // Cyan\n        backgroundColor: 'rgba(0, 255, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FFFF',\n        pointBorderColor: '#00FFFF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      },\n      {\n        label: 'Forecasted Emissions',\n        data: Array(actualValues.length).fill(null).concat(forecastValues),\n        borderColor: '#FF00FF', // Magenta\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#FF00FF',\n        pointBorderColor: '#FF00FF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      },\n      {\n        label: 'Upper Bound',\n        data: Array(actualValues.length).fill(null).concat(upperBounds),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'transparent',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: '+1'\n      },\n      {\n        label: 'Lower Bound',\n        data: Array(actualValues.length).fill(null).concat(lowerBounds),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      }\n    ];\n\n    // Add optimized forecast if available\n    if (optimizedValues) {\n      datasets.push({\n        label: 'Optimized Emissions',\n        data: Array(actualValues.length).fill(null).concat(optimizedValues),\n        borderColor: '#00FF00', // Green\n        backgroundColor: 'rgba(0, 255, 0, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FF00',\n        pointBorderColor: '#00FF00',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      });\n    }\n\n    // All dates combined for x-axis\n    const allDates = [...actualDates, ...forecastDates];\n\n    // Create chart\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: allDates,\n        datasets: datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 2000,\n          easing: 'easeOutQuart'\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'month',\n              displayFormats: {\n                month: 'MMM yyyy'\n              }\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Emissions (tons CO2e)',\n              color: '#CCC'\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              color: '#CCC',\n              font: {\n                family: \"'Orbitron', sans-serif\",\n                size: 12\n              },\n              boxWidth: 15,\n              usePointStyle: true\n            }\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            titleFont: {\n              family: \"'Orbitron', sans-serif\"\n            },\n            bodyFont: {\n              family: \"'Roboto', sans-serif\"\n            },\n            borderColor: 'rgba(0, 255, 255, 0.3)',\n            borderWidth: 1,\n            callbacks: {\n              label: function(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                }\n                return label;\n              }\n            }\n          }\n        }\n      }\n    });\n\n    // Apply animation to draw lines\n    chartInstance.current.options.animation = {\n      onComplete: function() {\n        const meta = chartInstance.current.getDatasetMeta(0);\n        const lineMeta = chartInstance.current.getDatasetMeta(1);\n        \n        if (meta.controller.chart.ctx) {\n          meta.controller.chart.ctx.save();\n          meta.controller.chart.ctx.strokeStyle = '#00FFFF';\n          meta.controller.chart.ctx.lineWidth = 2;\n          meta.controller.chart.ctx.setLineDash([]);\n          \n          meta.controller.chart.ctx.beginPath();\n          meta.data.forEach(point => {\n            meta.controller.chart.ctx.lineTo(point.x, point.y);\n          });\n          meta.controller.chart.ctx.stroke();\n          \n          meta.controller.chart.ctx.restore();\n        }\n      }\n    };\n\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [actualData, forecastData, optimizedData]);\n\n  return (\n    <div className=\"chart-container\">\n      <div className=\"chart-wrapper\">\n        <canvas ref={chartRef}></canvas>\n      </div>\n      <div className=\"chart-legend\">\n        <div className=\"legend-item\">\n          <div className=\"legend-color\" style={{ backgroundColor: '#00FFFF' }}></div>\n          <div className=\"legend-label\">Actual Emissions</div>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-color\" style={{ backgroundColor: '#FF00FF' }}></div>\n          <div className=\"legend-label\">Forecasted Emissions</div>\n        </div>\n        {optimizedData && (\n          <div className=\"legend-item\">\n            <div className=\"legend-color\" style={{ backgroundColor: '#00FF00' }}></div>\n            <div className=\"legend-label\">Optimized Emissions</div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ForecastChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAC/C,OAAO,qBAAqB;;AAE5B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAEhC,MAAMI,aAAa,GAAGA,CAAC;EAAEC,UAAU;EAAEC,YAAY;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMY,aAAa,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAElCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,UAAU,IAAI,CAACC,YAAY,EAAE;;IAElC;IACA,IAAII,aAAa,CAACC,OAAO,EAAE;MACzBD,aAAa,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;IACjC;IAEA,MAAMC,GAAG,GAAGJ,QAAQ,CAACE,OAAO,CAACG,UAAU,CAAC,IAAI,CAAC;;IAE7C;IACA,MAAMC,WAAW,GAAGV,UAAU,CAACW,GAAG,CAACC,CAAC,IAAI,IAAIC,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC;IACzD,MAAMC,YAAY,GAAGf,UAAU,CAACW,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACI,SAAS,CAAC;IAErD,MAAMC,aAAa,GAAGhB,YAAY,CAACU,GAAG,CAACC,CAAC,IAAI,IAAIC,IAAI,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC;IAC7D,MAAMI,cAAc,GAAGjB,YAAY,CAACU,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACO,mBAAmB,CAAC;IACnE,MAAMC,WAAW,GAAGnB,YAAY,CAACU,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACS,WAAW,CAAC;IACxD,MAAMC,WAAW,GAAGrB,YAAY,CAACU,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACW,WAAW,CAAC;;IAExD;IACA,MAAMC,eAAe,GAAGtB,aAAa,GAAGA,aAAa,CAACS,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACO,mBAAmB,CAAC,GAAG,IAAI;;IAE5F;IACA,MAAMM,QAAQ,GAAG,CACf;MACEC,KAAK,EAAE,kBAAkB;MACzBC,IAAI,EAAEZ,YAAY;MAClBa,WAAW,EAAE,SAAS;MAAE;MACxBC,eAAe,EAAE,wBAAwB;MACzCC,WAAW,EAAE,CAAC;MACdC,oBAAoB,EAAE,SAAS;MAC/BC,gBAAgB,EAAE,SAAS;MAC3BC,WAAW,EAAE,CAAC;MACdC,gBAAgB,EAAE,CAAC;MACnBC,OAAO,EAAE;IACX,CAAC,EACD;MACET,KAAK,EAAE,sBAAsB;MAC7BC,IAAI,EAAES,KAAK,CAACrB,YAAY,CAACsB,MAAM,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,MAAM,CAACrB,cAAc,CAAC;MAClEU,WAAW,EAAE,SAAS;MAAE;MACxBC,eAAe,EAAE,wBAAwB;MACzCC,WAAW,EAAE,CAAC;MACdC,oBAAoB,EAAE,SAAS;MAC/BC,gBAAgB,EAAE,SAAS;MAC3BC,WAAW,EAAE,CAAC;MACdC,gBAAgB,EAAE,CAAC;MACnBC,OAAO,EAAE;IACX,CAAC,EACD;MACET,KAAK,EAAE,aAAa;MACpBC,IAAI,EAAES,KAAK,CAACrB,YAAY,CAACsB,MAAM,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,MAAM,CAACjB,WAAW,CAAC;MAC/DM,WAAW,EAAE,wBAAwB;MACrCC,eAAe,EAAE,aAAa;MAC9BC,WAAW,EAAE,CAAC;MACdU,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAClBP,WAAW,EAAE,CAAC;MACdK,IAAI,EAAE;IACR,CAAC,EACD;MACEZ,KAAK,EAAE,aAAa;MACpBC,IAAI,EAAES,KAAK,CAACrB,YAAY,CAACsB,MAAM,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,MAAM,CAACnB,WAAW,CAAC;MAC/DQ,WAAW,EAAE,wBAAwB;MACrCC,eAAe,EAAE,wBAAwB;MACzCC,WAAW,EAAE,CAAC;MACdU,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAClBP,WAAW,EAAE,CAAC;MACdK,IAAI,EAAE;IACR,CAAC,CACF;;IAED;IACA,IAAId,eAAe,EAAE;MACnBC,QAAQ,CAACgB,IAAI,CAAC;QACZf,KAAK,EAAE,qBAAqB;QAC5BC,IAAI,EAAES,KAAK,CAACrB,YAAY,CAACsB,MAAM,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,MAAM,CAACf,eAAe,CAAC;QACnEI,WAAW,EAAE,SAAS;QAAE;QACxBC,eAAe,EAAE,sBAAsB;QACvCC,WAAW,EAAE,CAAC;QACdC,oBAAoB,EAAE,SAAS;QAC/BC,gBAAgB,EAAE,SAAS;QAC3BC,WAAW,EAAE,CAAC;QACdC,gBAAgB,EAAE,CAAC;QACnBC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMO,QAAQ,GAAG,CAAC,GAAGhC,WAAW,EAAE,GAAGO,aAAa,CAAC;;IAEnD;IACAZ,aAAa,CAACC,OAAO,GAAG,IAAIZ,KAAK,CAACc,GAAG,EAAE;MACrCmC,IAAI,EAAE,MAAM;MACZhB,IAAI,EAAE;QACJiB,MAAM,EAAEF,QAAQ;QAChBjB,QAAQ,EAAEA;MACZ,CAAC;MACDoB,OAAO,EAAE;QACPC,UAAU,EAAE,IAAI;QAChBC,mBAAmB,EAAE,KAAK;QAC1BC,SAAS,EAAE;UACTC,QAAQ,EAAE,IAAI;UACdC,MAAM,EAAE;QACV,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDT,IAAI,EAAE,MAAM;YACZU,IAAI,EAAE;cACJC,IAAI,EAAE,OAAO;cACbC,cAAc,EAAE;gBACdC,KAAK,EAAE;cACT;YACF,CAAC;YACDC,IAAI,EAAE;cACJC,KAAK,EAAE;YACT,CAAC;YACDC,KAAK,EAAE;cACLD,KAAK,EAAE;YACT;UACF,CAAC;UACDE,CAAC,EAAE;YACDC,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE,uBAAuB;cAC7BL,KAAK,EAAE;YACT,CAAC;YACDD,IAAI,EAAE;cACJC,KAAK,EAAE;YACT,CAAC;YACDC,KAAK,EAAE;cACLD,KAAK,EAAE;YACT;UACF;QACF,CAAC;QACDM,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,QAAQ,EAAE,KAAK;YACftB,MAAM,EAAE;cACNc,KAAK,EAAE,MAAM;cACbS,IAAI,EAAE;gBACJC,MAAM,EAAE,wBAAwB;gBAChCC,IAAI,EAAE;cACR,CAAC;cACDC,QAAQ,EAAE,EAAE;cACZC,aAAa,EAAE;YACjB;UACF,CAAC;UACDC,OAAO,EAAE;YACP3C,eAAe,EAAE,oBAAoB;YACrC4C,SAAS,EAAE;cACTL,MAAM,EAAE;YACV,CAAC;YACDM,QAAQ,EAAE;cACRN,MAAM,EAAE;YACV,CAAC;YACDxC,WAAW,EAAE,wBAAwB;YACrCE,WAAW,EAAE,CAAC;YACd6C,SAAS,EAAE;cACTjD,KAAK,EAAE,SAAAA,CAASkD,OAAO,EAAE;gBACvB,IAAIlD,KAAK,GAAGkD,OAAO,CAACC,OAAO,CAACnD,KAAK,IAAI,EAAE;gBACvC,IAAIA,KAAK,EAAE;kBACTA,KAAK,IAAI,IAAI;gBACf;gBACA,IAAIkD,OAAO,CAACE,MAAM,CAAClB,CAAC,KAAK,IAAI,EAAE;kBAC7BlC,KAAK,IAAIkD,OAAO,CAACE,MAAM,CAAClB,CAAC,CAACmB,OAAO,CAAC,CAAC,CAAC,GAAG,YAAY;gBACrD;gBACA,OAAOrD,KAAK;cACd;YACF;UACF;QACF;MACF;IACF,CAAC,CAAC;;IAEF;IACArB,aAAa,CAACC,OAAO,CAACuC,OAAO,CAACG,SAAS,GAAG;MACxCgC,UAAU,EAAE,SAAAA,CAAA,EAAW;QACrB,MAAMC,IAAI,GAAG5E,aAAa,CAACC,OAAO,CAAC4E,cAAc,CAAC,CAAC,CAAC;QACpD,MAAMC,QAAQ,GAAG9E,aAAa,CAACC,OAAO,CAAC4E,cAAc,CAAC,CAAC,CAAC;QAExD,IAAID,IAAI,CAACG,UAAU,CAACC,KAAK,CAAC7E,GAAG,EAAE;UAC7ByE,IAAI,CAACG,UAAU,CAACC,KAAK,CAAC7E,GAAG,CAAC8E,IAAI,CAAC,CAAC;UAChCL,IAAI,CAACG,UAAU,CAACC,KAAK,CAAC7E,GAAG,CAAC+E,WAAW,GAAG,SAAS;UACjDN,IAAI,CAACG,UAAU,CAACC,KAAK,CAAC7E,GAAG,CAACgF,SAAS,GAAG,CAAC;UACvCP,IAAI,CAACG,UAAU,CAACC,KAAK,CAAC7E,GAAG,CAACiF,WAAW,CAAC,EAAE,CAAC;UAEzCR,IAAI,CAACG,UAAU,CAACC,KAAK,CAAC7E,GAAG,CAACkF,SAAS,CAAC,CAAC;UACrCT,IAAI,CAACtD,IAAI,CAACgE,OAAO,CAACC,KAAK,IAAI;YACzBX,IAAI,CAACG,UAAU,CAACC,KAAK,CAAC7E,GAAG,CAACqF,MAAM,CAACD,KAAK,CAACxC,CAAC,EAAEwC,KAAK,CAAChC,CAAC,CAAC;UACpD,CAAC,CAAC;UACFqB,IAAI,CAACG,UAAU,CAACC,KAAK,CAAC7E,GAAG,CAACsF,MAAM,CAAC,CAAC;UAElCb,IAAI,CAACG,UAAU,CAACC,KAAK,CAAC7E,GAAG,CAACuF,OAAO,CAAC,CAAC;QACrC;MACF;IACF,CAAC;IAED,OAAO,MAAM;MACX,IAAI1F,aAAa,CAACC,OAAO,EAAE;QACzBD,aAAa,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,CAACP,UAAU,EAAEC,YAAY,EAAEC,aAAa,CAAC,CAAC;EAE7C,oBACEL,OAAA;IAAKmG,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BpG,OAAA;MAAKmG,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5BpG,OAAA;QAAQqG,GAAG,EAAE9F;MAAS;QAAA+F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAS;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eACNzG,OAAA;MAAKmG,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BpG,OAAA;QAAKmG,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BpG,OAAA;UAAKmG,SAAS,EAAC,cAAc;UAACO,KAAK,EAAE;YAAE1E,eAAe,EAAE;UAAU;QAAE;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC3EzG,OAAA;UAAKmG,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAgB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eACNzG,OAAA;QAAKmG,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BpG,OAAA;UAAKmG,SAAS,EAAC,cAAc;UAACO,KAAK,EAAE;YAAE1E,eAAe,EAAE;UAAU;QAAE;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC3EzG,OAAA;UAAKmG,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAoB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,EACLpG,aAAa,iBACZL,OAAA;QAAKmG,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1BpG,OAAA;UAAKmG,SAAS,EAAC,cAAc;UAACO,KAAK,EAAE;YAAE1E,eAAe,EAAE;UAAU;QAAE;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC3EzG,OAAA;UAAKmG,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAmB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnG,EAAA,CAtOIJ,aAAa;AAAAyG,EAAA,GAAbzG,aAAa;AAwOnB,eAAeA,aAAa;AAAC,IAAAyG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}