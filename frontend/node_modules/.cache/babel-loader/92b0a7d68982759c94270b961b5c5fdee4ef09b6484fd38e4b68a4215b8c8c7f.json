{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport ModelPerformance from './components/ModelPerformance';\nimport axios from 'axios';\n\n// API base URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success'\n  });\n  const [savings, setSavings] = useState(null);\n  const [impacts, setImpacts] = useState(null);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n\n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        // Rename fields to match the required format if needed\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0,\n          // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0,\n          // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      setData(processedData);\n\n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  }, []);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, [fetchSampleData]);\n\n  // Calculate standard deviation for each numeric column\n  const calculateStdDev = data => {\n    if (!data || data.length === 0) return {};\n    const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    const stdDev = {};\n    numericColumns.forEach(col => {\n      // Get values for this column, filtering out non-numeric values\n      const values = data.map(item => parseFloat(item[col])).filter(val => !isNaN(val));\n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n\n        // Calculate sum of squared differences\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const sumSquaredDiffs = squaredDiffs.reduce((sum, val) => sum + val, 0);\n\n        // Calculate standard deviation\n        stdDev[col] = Math.sqrt(sumSquaredDiffs / values.length);\n      } else {\n        stdDev[col] = 0;\n      }\n    });\n    return stdDev;\n  };\n\n  // Handle file upload\n  const handleFileUpload = async file => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0,\n          // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0,\n          // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      setData(processedData);\n\n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n\n      // Reset forecast and optimization data\n      setForecast(null);\n      setOptimizedForecast(null);\n      setSuggestions([]);\n      setImpacts(null);\n      setSavings(null);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to upload file', 'error');\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = updatedData => {\n    setData(updatedData);\n\n    // Calculate summary statistics\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      std: {},\n      total_rows: updatedData.length\n    };\n\n    // Determine available columns\n    const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    numericColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = updatedData.map(item => item[col]).filter(value => value !== '' && value !== null && value !== undefined).map(value => parseFloat(value));\n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.mean[col] = mean;\n\n        // Calculate min and max\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n\n        // Calculate standard deviation\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.std[col] = Math.sqrt(avgSquaredDiff);\n      }\n    });\n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = async () => {\n    try {\n      if (!data || data.length < 3) {\n        showNotification('Need at least 3 months of data for forecasting', 'error');\n        return;\n      }\n\n      // Validate that all required fields have values\n      const requiredFields = ['date', 'energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n      const missingFields = [];\n      data.forEach((row, index) => {\n        requiredFields.forEach(field => {\n          if (field === 'date') {\n            if (!row.date) missingFields.push(`Row ${index + 1}: date`);\n          } else {\n            if (row[field] === undefined || row[field] === null || row[field] === '') {\n              missingFields.push(`Row ${index + 1}: ${field}`);\n            }\n          }\n        });\n      });\n      if (missingFields.length > 0) {\n        showNotification(`Missing values: ${missingFields.slice(0, 3).join(', ')}${missingFields.length > 3 ? ' and more...' : ''}`, 'error');\n        return;\n      }\n\n      // Convert data to backend format\n      const formattedData = data.map(row => {\n        return {\n          ds: row.date,\n          energy_kwh: parseFloat(row.energy_use) || 0,\n          transport_km: parseFloat(row.transport) || 0,\n          waste_kg: parseFloat(row.waste) * 1000 || 0,\n          // Convert tons to kg\n          water_m3: parseFloat(row.water) / 1000 || 0,\n          // Convert liters to m3\n          fuel_l: parseFloat(row.fuel) || 0,\n          y: parseFloat(row.emissions) || 0,\n          production_units: parseFloat(row.production) || 0,\n          grid_intensity: parseFloat(row.grid_intensity) || 0\n        };\n      });\n\n      // Sort data by date to ensure chronological order\n      formattedData.sort((a, b) => new Date(a.ds) - new Date(b.ds));\n\n      // Check for duplicate dates\n      const dateSet = new Set();\n      const duplicateDates = [];\n      formattedData.forEach(row => {\n        if (dateSet.has(row.ds)) {\n          duplicateDates.push(row.ds);\n        }\n        dateSet.add(row.ds);\n      });\n      if (duplicateDates.length > 0) {\n        showNotification(`Duplicate dates found: ${duplicateDates.slice(0, 3).join(', ')}. Please ensure each row has a unique date.`, 'error');\n        return;\n      }\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/predict`, {\n        data: formattedData,\n        forecast_periods: forecastPeriods\n      });\n      setForecast(response.data.forecast);\n      setSuggestions(response.data.suggestions || []);\n      setImpacts(response.data.impacts || {});\n      setLoading(false);\n      showNotification('Forecast generated successfully', 'success');\n      setActiveTab('forecast');\n\n      // Reset optimized forecast when new forecast is generated\n      setOptimizedForecast(null);\n      setSavings(null);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error generating forecast:', error);\n      setLoading(false);\n      showNotification(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to generate forecast', 'error');\n    }\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      // Convert data to backend format\n      const formattedData = data.map(row => {\n        return {\n          ds: row.date,\n          energy_kwh: parseFloat(row.energy_use) || 0,\n          transport_km: parseFloat(row.transport) || 0,\n          waste_kg: parseFloat(row.waste) * 1000 || 0,\n          // Convert tons to kg\n          water_m3: parseFloat(row.water) / 1000 || 0,\n          // Convert liters to m3\n          fuel_l: parseFloat(row.fuel) || 0,\n          y: parseFloat(row.emissions) || 0,\n          production_units: parseFloat(row.production) || 0,\n          grid_intensity: parseFloat(row.grid_intensity) || 0\n        };\n      });\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/optimize`, {\n        data: formattedData,\n        suggestions: suggestions,\n        forecast_periods: forecastPeriods\n      });\n      setOptimizedForecast(response.data.optimized_forecast);\n      setSavings(response.data.savings);\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n      setActiveTab('forecast');\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to optimize forecast', 'error');\n    }\n  };\n\n  // Export forecast data\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n\n      // Determine which forecast to export\n      const forecastToExport = optimizedForecast || forecast;\n      if (!forecastToExport) {\n        showNotification('No forecast data to export', 'error');\n        setLoading(false);\n        return;\n      }\n      const response = await axios.post(`${API_BASE_URL}/export`, {\n        forecast: forecastToExport\n      }, {\n        responseType: 'blob'\n      });\n\n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'carbon_forecast.xlsx');\n      document.body.appendChild(link);\n      link.click();\n\n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification('Failed to export forecast', 'error');\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type = 'success') => {\n    setNotification({\n      show: true,\n      message,\n      type\n    });\n\n    // Auto-hide notification after 5 seconds\n    setTimeout(() => {\n      setNotification(prev => ({\n        ...prev,\n        show: false\n      }));\n    }, 5000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 19\n    }, this), notification.show && /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type,\n      onClose: () => setNotification(prev => ({\n        ...prev,\n        show: false\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(TabPanel, {\n        activeTab: activeTab,\n        onTabChange: setActiveTab,\n        children: [/*#__PURE__*/_jsxDEV(TabPanel.Tab, {\n          id: \"data\",\n          label: \"Data\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-tab\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"data-controls\",\n              children: /*#__PURE__*/_jsxDEV(UploadZone, {\n                onFileUpload: handleFileUpload\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n              data: data,\n              onDataUpdate: handleDataUpdate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel.Tab, {\n          id: \"forecast\",\n          label: \"Forecast\",\n          disabled: !data || data.length < 3,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forecast-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-left\",\n              children: [/*#__PURE__*/_jsxDEV(ForecastControls, {\n                forecastPeriods: forecastPeriods,\n                onForecastPeriodsChange: setForecastPeriods,\n                onGenerateForecast: handleGenerateForecast,\n                onOptimizeForecast: handleOptimizeForecast,\n                onExportForecast: handleExportForecast,\n                disableOptimize: !forecast,\n                disableExport: !forecast && !optimizedForecast\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 17\n              }, this), (forecast || optimizedForecast) && /*#__PURE__*/_jsxDEV(OptimizationPanel, {\n                savings: savings,\n                suggestions: suggestions\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"forecast-right\",\n              children: (forecast || optimizedForecast) && /*#__PURE__*/_jsxDEV(ForecastChart, {\n                data: data,\n                forecast: forecast,\n                optimizedForecast: optimizedForecast,\n                impacts: impacts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TabPanel.Tab, {\n          id: \"performance\",\n          label: \"Performance\",\n          disabled: !forecast || !impacts,\n          children: /*#__PURE__*/_jsxDEV(ModelPerformance, {\n            data: data,\n            forecast: forecast,\n            impacts: impacts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"g24Alfe5KPKzp9MdDhtIPHCx0KA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Header","DataTable","UploadZone","ForecastControls","ForecastChart","OptimizationPanel","Notification","LoadingBar","TabPanel","ModelPerformance","axios","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","data","setData","summary","setSummary","forecastPeriods","setForecastPeriods","forecast","setForecast","optimizedForecast","setOptimizedForecast","suggestions","setSuggestions","activeTab","setActiveTab","loading","setLoading","notification","setNotification","show","message","type","savings","setSavings","impacts","setImpacts","fetchSampleData","response","get","processedData","map","item","id","Date","now","Math","random","date","ds","energy_kwh","transport_km","waste_kg","water_m3","fuel_l","y","production_units","grid_intensity","enhancedSummary","std","calculateStdDev","showNotification","error","console","length","numericColumns","stdDev","forEach","col","values","parseFloat","filter","val","isNaN","mean","reduce","sum","squaredDiffs","pow","sumSquaredDiffs","sqrt","handleFileUpload","file","formData","FormData","append","post","headers","_error$response","_error$response$data","handleDataUpdate","updatedData","summaryData","min","max","total_rows","value","undefined","avgSquaredDiff","handleGenerateForecast","requiredFields","missingFields","row","index","field","push","slice","join","formattedData","energy_use","transport","waste","water","fuel","emissions","production","sort","a","b","dateSet","Set","duplicateDates","has","add","forecast_periods","_error$response2","_error$response2$data","handleOptimizeForecast","optimized_forecast","_error$response3","_error$response3$data","handleExportForecast","forecastToExport","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","revokeObjectURL","removeChild","setTimeout","prev","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onTabChange","Tab","label","onFileUpload","onDataUpdate","disabled","onForecastPeriodsChange","onGenerateForecast","onOptimizeForecast","onExportForecast","disableOptimize","disableExport","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport ModelPerformance from './components/ModelPerformance';\nimport axios from 'axios';\n\n// API base URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nfunction App() {\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' });\n  const [savings, setSavings] = useState(null);\n  const [impacts, setImpacts] = useState(null);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n      \n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        // Rename fields to match the required format if needed\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0, // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0, // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      \n      setData(processedData);\n      \n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      \n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  }, []);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, [fetchSampleData]);\n\n  // Calculate standard deviation for each numeric column\n  const calculateStdDev = (data) => {\n    if (!data || data.length === 0) return {};\n    \n    const numericColumns = [\n      'energy_use', 'transport', 'waste', 'water', \n      'fuel', 'emissions', 'production', 'grid_intensity'\n    ];\n    \n    const stdDev = {};\n    \n    numericColumns.forEach(col => {\n      // Get values for this column, filtering out non-numeric values\n      const values = data\n        .map(item => parseFloat(item[col]))\n        .filter(val => !isNaN(val));\n      \n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        \n        // Calculate sum of squared differences\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const sumSquaredDiffs = squaredDiffs.reduce((sum, val) => sum + val, 0);\n        \n        // Calculate standard deviation\n        stdDev[col] = Math.sqrt(sumSquaredDiffs / values.length);\n      } else {\n        stdDev[col] = 0;\n      }\n    });\n    \n    return stdDev;\n  };\n\n  // Handle file upload\n  const handleFileUpload = async (file) => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      // Process data to match required format\n      const processedData = response.data.data.map(item => {\n        return {\n          ...item,\n          id: item.id || Date.now() + Math.random(),\n          date: item.ds || item.date,\n          'energy_use': item.energy_kwh,\n          'transport': item.transport_km,\n          'waste': item.waste_kg ? item.waste_kg / 1000 : 0, // Convert kg to tons\n          'water': item.water_m3 ? item.water_m3 * 1000 : 0, // Convert m3 to liters\n          'fuel': item.fuel_l,\n          'emissions': item.y,\n          'production': item.production_units,\n          'grid_intensity': item.grid_intensity\n        };\n      });\n      \n      setData(processedData);\n      \n      // Update summary with standard deviation\n      const enhancedSummary = {\n        ...response.data.summary,\n        std: calculateStdDev(processedData)\n      };\n      \n      setSummary(enhancedSummary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n      \n      // Reset forecast and optimization data\n      setForecast(null);\n      setOptimizedForecast(null);\n      setSuggestions([]);\n      setImpacts(null);\n      setSavings(null);\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to upload file', 'error');\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = (updatedData) => {\n    setData(updatedData);\n    \n    // Calculate summary statistics\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      std: {},\n      total_rows: updatedData.length\n    };\n    \n    // Determine available columns\n    const numericColumns = [\n      'energy_use', 'transport', 'waste', 'water', \n      'fuel', 'emissions', 'production', 'grid_intensity'\n    ];\n    \n    numericColumns.forEach(col => {\n      // Filter out empty values and ensure numeric conversion\n      const values = updatedData\n        .map(item => item[col])\n        .filter(value => value !== '' && value !== null && value !== undefined)\n        .map(value => parseFloat(value));\n      \n      if (values.length > 0) {\n        // Calculate mean\n        const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.mean[col] = mean;\n        \n        // Calculate min and max\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n        \n        // Calculate standard deviation\n        const squaredDiffs = values.map(val => Math.pow(val - mean, 2));\n        const avgSquaredDiff = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.std[col] = Math.sqrt(avgSquaredDiff);\n      }\n    });\n    \n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = async () => {\n    try {\n      if (!data || data.length < 3) {\n        showNotification('Need at least 3 months of data for forecasting', 'error');\n        return;\n      }\n      \n      // Validate that all required fields have values\n      const requiredFields = ['date', 'energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n      const missingFields = [];\n      \n      data.forEach((row, index) => {\n        requiredFields.forEach(field => {\n          if (field === 'date') {\n            if (!row.date) missingFields.push(`Row ${index + 1}: date`);\n          } else {\n            if (row[field] === undefined || row[field] === null || row[field] === '') {\n              missingFields.push(`Row ${index + 1}: ${field}`);\n            }\n          }\n        });\n      });\n      \n      if (missingFields.length > 0) {\n        showNotification(`Missing values: ${missingFields.slice(0, 3).join(', ')}${missingFields.length > 3 ? ' and more...' : ''}`, 'error');\n        return;\n      }\n      \n      // Convert data to backend format\n      const formattedData = data.map(row => {\n        return {\n          ds: row.date,\n          energy_kwh: parseFloat(row.energy_use) || 0,\n          transport_km: parseFloat(row.transport) || 0,\n          waste_kg: parseFloat(row.waste) * 1000 || 0, // Convert tons to kg\n          water_m3: parseFloat(row.water) / 1000 || 0, // Convert liters to m3\n          fuel_l: parseFloat(row.fuel) || 0,\n          y: parseFloat(row.emissions) || 0,\n          production_units: parseFloat(row.production) || 0,\n          grid_intensity: parseFloat(row.grid_intensity) || 0\n        };\n      });\n      \n      // Sort data by date to ensure chronological order\n      formattedData.sort((a, b) => new Date(a.ds) - new Date(b.ds));\n      \n      // Check for duplicate dates\n      const dateSet = new Set();\n      const duplicateDates = [];\n      \n      formattedData.forEach(row => {\n        if (dateSet.has(row.ds)) {\n          duplicateDates.push(row.ds);\n        }\n        dateSet.add(row.ds);\n      });\n      \n      if (duplicateDates.length > 0) {\n        showNotification(`Duplicate dates found: ${duplicateDates.slice(0, 3).join(', ')}. Please ensure each row has a unique date.`, 'error');\n        return;\n      }\n      \n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/predict`, {\n        data: formattedData,\n        forecast_periods: forecastPeriods\n      });\n      \n      setForecast(response.data.forecast);\n      setSuggestions(response.data.suggestions || []);\n      setImpacts(response.data.impacts || {});\n      setLoading(false);\n      showNotification('Forecast generated successfully', 'success');\n      setActiveTab('forecast');\n      \n      // Reset optimized forecast when new forecast is generated\n      setOptimizedForecast(null);\n      setSavings(null);\n    } catch (error) {\n      console.error('Error generating forecast:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to generate forecast', 'error');\n    }\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      // Convert data to backend format\n      const formattedData = data.map(row => {\n        return {\n          ds: row.date,\n          energy_kwh: parseFloat(row.energy_use) || 0,\n          transport_km: parseFloat(row.transport) || 0,\n          waste_kg: parseFloat(row.waste) * 1000 || 0, // Convert tons to kg\n          water_m3: parseFloat(row.water) / 1000 || 0, // Convert liters to m3\n          fuel_l: parseFloat(row.fuel) || 0,\n          y: parseFloat(row.emissions) || 0,\n          production_units: parseFloat(row.production) || 0,\n          grid_intensity: parseFloat(row.grid_intensity) || 0\n        };\n      });\n      \n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/optimize`, {\n        data: formattedData,\n        suggestions: suggestions,\n        forecast_periods: forecastPeriods\n      });\n      \n      setOptimizedForecast(response.data.optimized_forecast);\n      setSavings(response.data.savings);\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n      setActiveTab('forecast');\n    } catch (error) {\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to optimize forecast', 'error');\n    }\n  };\n\n  // Export forecast data\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n      \n      // Determine which forecast to export\n      const forecastToExport = optimizedForecast || forecast;\n      \n      if (!forecastToExport) {\n        showNotification('No forecast data to export', 'error');\n        setLoading(false);\n        return;\n      }\n      \n      const response = await axios.post(\n        `${API_BASE_URL}/export`,\n        { forecast: forecastToExport },\n        { responseType: 'blob' }\n      );\n      \n      // Create download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'carbon_forecast.xlsx');\n      document.body.appendChild(link);\n      link.click();\n      \n      // Clean up\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      \n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification('Failed to export forecast', 'error');\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type = 'success') => {\n    setNotification({\n      show: true,\n      message,\n      type\n    });\n    \n    // Auto-hide notification after 5 seconds\n    setTimeout(() => {\n      setNotification(prev => ({ ...prev, show: false }));\n    }, 5000);\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      \n      {loading && <LoadingBar />}\n      \n      {notification.show && (\n        <Notification \n          message={notification.message} \n          type={notification.type} \n          onClose={() => setNotification(prev => ({ ...prev, show: false }))} \n        />\n      )}\n      \n      <div className=\"main-content\">\n        <TabPanel activeTab={activeTab} onTabChange={setActiveTab}>\n          <TabPanel.Tab id=\"data\" label=\"Data\">\n            <div className=\"data-tab\">\n              <div className=\"data-controls\">\n                <UploadZone onFileUpload={handleFileUpload} />\n              </div>\n              <DataTable \n                data={data} \n                onDataUpdate={handleDataUpdate} \n              />\n            </div>\n          </TabPanel.Tab>\n          \n          <TabPanel.Tab id=\"forecast\" label=\"Forecast\" disabled={!data || data.length < 3}>\n            <div className=\"forecast-container\">\n              <div className=\"forecast-left\">\n                <ForecastControls \n                  forecastPeriods={forecastPeriods}\n                  onForecastPeriodsChange={setForecastPeriods}\n                  onGenerateForecast={handleGenerateForecast}\n                  onOptimizeForecast={handleOptimizeForecast}\n                  onExportForecast={handleExportForecast}\n                  disableOptimize={!forecast}\n                  disableExport={!forecast && !optimizedForecast}\n                />\n                \n                {(forecast || optimizedForecast) && (\n                  <OptimizationPanel \n                    savings={savings}\n                    suggestions={suggestions}\n                  />\n                )}\n              </div>\n              \n              <div className=\"forecast-right\">\n                {(forecast || optimizedForecast) && (\n                  <ForecastChart \n                    data={data}\n                    forecast={forecast}\n                    optimizedForecast={optimizedForecast}\n                    impacts={impacts}\n                  />\n                )}\n              </div>\n            </div>\n          </TabPanel.Tab>\n          \n          <TabPanel.Tab id=\"performance\" label=\"Performance\" disabled={!forecast || !impacts}>\n            <ModelPerformance \n              data={data}\n              forecast={forecast}\n              impacts={impacts}\n            />\n          </TabPanel.Tab>\n        </TabPanel>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}