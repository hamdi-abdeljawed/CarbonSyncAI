{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\ForecastChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './ForecastChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForecastChart = ({\n  data,\n  forecast,\n  optimizedForecast,\n  impacts\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!forecast || !chartRef.current) return;\n\n    // Clear any previous content\n    chartRef.current.innerHTML = '';\n\n    // Create a simple canvas-based chart without Chart.js\n    const createSimpleChart = () => {\n      const container = chartRef.current;\n\n      // Format data for display - group by month\n      const groupedActualData = groupDataByMonth(data);\n\n      // Sort data by date\n      const actualData = Object.entries(groupedActualData).map(([dateStr, value]) => ({\n        date: new Date(dateStr),\n        value: value\n      })).sort((a, b) => a.date - b.date);\n\n      // Process forecast data - already monthly\n      const forecastData = forecast.map(d => ({\n        date: new Date(d.ds),\n        value: d.predicted_emissions,\n        lower: d.lower_bound,\n        upper: d.upper_bound\n      }));\n\n      // Process optimized data if available\n      const optimizedData = optimizedForecast ? optimizedForecast.map(d => ({\n        date: new Date(d.ds),\n        value: d.predicted_emissions\n      })) : [];\n\n      // Find min and max values for scaling\n      const allValues = [...actualData.map(d => d.value), ...forecastData.map(d => d.value), ...forecastData.map(d => d.upper), ...optimizedData.map(d => d.value)];\n      const minValue = Math.min(...allValues) * 0.9;\n      const maxValue = Math.max(...allValues) * 1.1;\n\n      // Find date range\n      const allDates = [...actualData.map(d => d.date), ...forecastData.map(d => d.date), ...optimizedData.map(d => d.date)];\n      const minDate = new Date(Math.min(...allDates));\n      const maxDate = new Date(Math.max(...allDates));\n\n      // Create chart elements\n      const chartTitle = document.createElement('h3');\n      chartTitle.className = 'chart-title';\n      chartTitle.textContent = 'Monthly Carbon Emissions Forecast';\n      container.appendChild(chartTitle);\n\n      // Create chart container\n      const chartContainer = document.createElement('div');\n      chartContainer.className = 'simple-chart-container';\n      container.appendChild(chartContainer);\n\n      // Create Y-axis labels\n      const yAxis = document.createElement('div');\n      yAxis.className = 'y-axis';\n      const numYLabels = 5;\n      for (let i = 0; i < numYLabels; i++) {\n        const label = document.createElement('div');\n        label.className = 'y-label';\n        const value = maxValue - i * (maxValue - minValue) / (numYLabels - 1);\n        label.textContent = value.toFixed(1);\n        label.style.bottom = `${i / (numYLabels - 1) * 100}%`;\n        yAxis.appendChild(label);\n      }\n      chartContainer.appendChild(yAxis);\n\n      // Create chart area\n      const chartArea = document.createElement('div');\n      chartArea.className = 'chart-area';\n      chartContainer.appendChild(chartArea);\n\n      // Create X-axis labels\n      const xAxis = document.createElement('div');\n      xAxis.className = 'x-axis';\n\n      // Calculate months between min and max date\n      const monthDiff = (maxDate.getFullYear() - minDate.getFullYear()) * 12 + (maxDate.getMonth() - minDate.getMonth());\n\n      // Create a label every 2-3 months\n      const labelInterval = Math.max(1, Math.floor(monthDiff / 5));\n      for (let i = 0; i <= monthDiff; i += labelInterval) {\n        const date = new Date(minDate);\n        date.setMonth(date.getMonth() + i);\n        const label = document.createElement('div');\n        label.className = 'x-label';\n        label.textContent = `${date.toLocaleString('default', {\n          month: 'short'\n        })} ${date.getFullYear()}`;\n        label.style.left = `${i / monthDiff * 100}%`;\n        xAxis.appendChild(label);\n      }\n      chartContainer.appendChild(xAxis);\n\n      // Function to convert data point to position\n      const getPosition = (date, value) => {\n        const x = (date - minDate) / (maxDate - minDate) * 100;\n        const y = 100 - (value - minValue) / (maxValue - minValue) * 100;\n        return {\n          x,\n          y\n        };\n      };\n\n      // Create data points and lines\n\n      // Actual data line\n      if (actualData.length > 0) {\n        const actualLine = document.createElement('div');\n        actualLine.className = 'data-line actual-line';\n        chartArea.appendChild(actualLine);\n        let pathD = '';\n        actualData.forEach((point, i) => {\n          const pos = getPosition(point.date, point.value);\n\n          // Create point\n          const dataPoint = document.createElement('div');\n          dataPoint.className = 'data-point actual-point';\n          dataPoint.style.left = `${pos.x}%`;\n          dataPoint.style.top = `${pos.y}%`;\n\n          // Format date for tooltip\n          const month = point.date.toLocaleString('default', {\n            month: 'long'\n          });\n          const year = point.date.getFullYear();\n\n          // Add tooltip\n          dataPoint.setAttribute('data-tooltip', `${month} ${year}: ${point.value.toFixed(2)} tons CO2e`);\n          chartArea.appendChild(dataPoint);\n\n          // Build path\n          if (i === 0) {\n            pathD = `M ${pos.x} ${pos.y}`;\n          } else {\n            pathD += ` L ${pos.x} ${pos.y}`;\n          }\n        });\n\n        // Create SVG for line\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('height', '100%');\n        svg.style.position = 'absolute';\n        svg.style.top = '0';\n        svg.style.left = '0';\n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', pathD);\n        path.setAttribute('fill', 'none');\n        path.setAttribute('stroke', '#00FFFF');\n        path.setAttribute('stroke-width', '2');\n        svg.appendChild(path);\n        actualLine.appendChild(svg);\n      }\n\n      // Forecast data line\n      if (forecastData.length > 0) {\n        const forecastLine = document.createElement('div');\n        forecastLine.className = 'data-line forecast-line';\n        chartArea.appendChild(forecastLine);\n        let pathD = '';\n        forecastData.forEach((point, i) => {\n          const pos = getPosition(point.date, point.value);\n\n          // Create point\n          const dataPoint = document.createElement('div');\n          dataPoint.className = 'data-point forecast-point';\n          dataPoint.style.left = `${pos.x}%`;\n          dataPoint.style.top = `${pos.y}%`;\n\n          // Format date for tooltip\n          const month = point.date.toLocaleString('default', {\n            month: 'long'\n          });\n          const year = point.date.getFullYear();\n\n          // Add tooltip\n          dataPoint.setAttribute('data-tooltip', `${month} ${year}: ${point.value.toFixed(2)} tons CO2e`);\n          chartArea.appendChild(dataPoint);\n\n          // Build path\n          if (i === 0) {\n            pathD = `M ${pos.x} ${pos.y}`;\n          } else {\n            pathD += ` L ${pos.x} ${pos.y}`;\n          }\n\n          // Add confidence interval\n          if (point.lower && point.upper) {\n            const lowerPos = getPosition(point.date, point.lower);\n            const upperPos = getPosition(point.date, point.upper);\n            const interval = document.createElement('div');\n            interval.className = 'confidence-interval';\n            interval.style.left = `${pos.x}%`;\n            interval.style.top = `${upperPos.y}%`;\n            interval.style.height = `${lowerPos.y - upperPos.y}%`;\n            chartArea.appendChild(interval);\n          }\n        });\n\n        // Create SVG for line\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('height', '100%');\n        svg.style.position = 'absolute';\n        svg.style.top = '0';\n        svg.style.left = '0';\n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', pathD);\n        path.setAttribute('fill', 'none');\n        path.setAttribute('stroke', '#FF00FF');\n        path.setAttribute('stroke-width', '2');\n        svg.appendChild(path);\n        forecastLine.appendChild(svg);\n      }\n\n      // Optimized data line\n      if (optimizedData.length > 0) {\n        const optimizedLine = document.createElement('div');\n        optimizedLine.className = 'data-line optimized-line';\n        chartArea.appendChild(optimizedLine);\n        let pathD = '';\n        optimizedData.forEach((point, i) => {\n          const pos = getPosition(point.date, point.value);\n\n          // Create point\n          const dataPoint = document.createElement('div');\n          dataPoint.className = 'data-point optimized-point';\n          dataPoint.style.left = `${pos.x}%`;\n          dataPoint.style.top = `${pos.y}%`;\n\n          // Format date for tooltip\n          const month = point.date.toLocaleString('default', {\n            month: 'long'\n          });\n          const year = point.date.getFullYear();\n\n          // Add tooltip\n          dataPoint.setAttribute('data-tooltip', `${month} ${year}: ${point.value.toFixed(2)} tons CO2e (optimized)`);\n          chartArea.appendChild(dataPoint);\n\n          // Build path\n          if (i === 0) {\n            pathD = `M ${pos.x} ${pos.y}`;\n          } else {\n            pathD += ` L ${pos.x} ${pos.y}`;\n          }\n        });\n\n        // Create SVG for line\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('height', '100%');\n        svg.style.position = 'absolute';\n        svg.style.top = '0';\n        svg.style.left = '0';\n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', pathD);\n        path.setAttribute('fill', 'none');\n        path.setAttribute('stroke', '#00FF00');\n        path.setAttribute('stroke-width', '2');\n        path.setAttribute('stroke-dasharray', '5,5');\n        svg.appendChild(path);\n        optimizedLine.appendChild(svg);\n      }\n\n      // Create legend\n      const legend = document.createElement('div');\n      legend.className = 'chart-legend';\n      if (actualData.length > 0) {\n        const actualLegend = document.createElement('div');\n        actualLegend.className = 'legend-item';\n        const actualColor = document.createElement('div');\n        actualColor.className = 'legend-color actual-color';\n        const actualLabel = document.createElement('div');\n        actualLabel.className = 'legend-label';\n        actualLabel.textContent = 'Actual Emissions';\n        actualLegend.appendChild(actualColor);\n        actualLegend.appendChild(actualLabel);\n        legend.appendChild(actualLegend);\n      }\n      const forecastLegend = document.createElement('div');\n      forecastLegend.className = 'legend-item';\n      const forecastColor = document.createElement('div');\n      forecastColor.className = 'legend-color forecast-color';\n      const forecastLabel = document.createElement('div');\n      forecastLabel.className = 'legend-label';\n      forecastLabel.textContent = 'Forecast Emissions';\n      forecastLegend.appendChild(forecastColor);\n      forecastLegend.appendChild(forecastLabel);\n      legend.appendChild(forecastLegend);\n      if (optimizedData.length > 0) {\n        const optimizedLegend = document.createElement('div');\n        optimizedLegend.className = 'legend-item';\n        const optimizedColor = document.createElement('div');\n        optimizedColor.className = 'legend-color optimized-color';\n        const optimizedLabel = document.createElement('div');\n        optimizedLabel.className = 'legend-label';\n        optimizedLabel.textContent = 'Optimized Emissions';\n        optimizedLegend.appendChild(optimizedColor);\n        optimizedLegend.appendChild(optimizedLabel);\n        legend.appendChild(optimizedLegend);\n      }\n      container.appendChild(legend);\n    };\n    createSimpleChart();\n\n    // Add impact factors section\n    if (impacts && Object.keys(impacts).length > 0) {\n      const impactSection = document.createElement('div');\n      impactSection.className = 'impact-factors';\n      const impactTitle = document.createElement('h4');\n      impactTitle.textContent = 'Key Impact Factors';\n      impactSection.appendChild(impactTitle);\n      const impactList = document.createElement('div');\n      impactList.className = 'impact-list';\n\n      // Sort impacts by score\n      const sortedImpacts = Object.entries(impacts).sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score)).slice(0, 3);\n      sortedImpacts.forEach(([factor, data], index) => {\n        let factorName = factor;\n        if (factor === 'energy_use') factorName = 'Energy Use';\n        if (factor === 'transport') factorName = 'Transport';\n        if (factor === 'waste') factorName = 'Waste';\n        if (factor === 'water') factorName = 'Water';\n        if (factor === 'fuel') factorName = 'Fuel';\n        if (factor === 'grid_intensity') factorName = 'Grid Intensity';\n        const impactItem = document.createElement('div');\n        impactItem.className = 'impact-item';\n        const impactRank = document.createElement('div');\n        impactRank.className = 'impact-rank';\n        impactRank.textContent = index + 1;\n        const impactInfo = document.createElement('div');\n        impactInfo.className = 'impact-info';\n        const impactName = document.createElement('div');\n        impactName.className = 'impact-name';\n        impactName.textContent = factorName;\n        const impactScore = document.createElement('div');\n        impactScore.className = 'impact-score';\n        const impactValue = document.createElement('span');\n        impactValue.className = 'impact-value';\n        impactValue.textContent = Math.abs(data.impact_score).toFixed(2);\n        impactScore.textContent = 'Impact Score: ';\n        impactScore.appendChild(impactValue);\n        impactInfo.appendChild(impactName);\n        impactInfo.appendChild(impactScore);\n        impactItem.appendChild(impactRank);\n        impactItem.appendChild(impactInfo);\n        impactList.appendChild(impactItem);\n      });\n      impactSection.appendChild(impactList);\n      chartRef.current.appendChild(impactSection);\n    }\n  }, [data, forecast, optimizedForecast, impacts]);\n\n  // Helper function to group data by month\n  const groupDataByMonth = data => {\n    if (!data || data.length === 0) return {};\n    const monthlyData = {};\n    data.forEach(item => {\n      if (!item.date || !item.emissions) return;\n      const date = new Date(item.date);\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n      if (!monthlyData[monthKey]) {\n        monthlyData[monthKey] = 0;\n      }\n      monthlyData[monthKey] += parseFloat(item.emissions) || 0;\n    });\n    return monthlyData;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forecast-chart-container\",\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 445,\n    columnNumber: 5\n  }, this);\n};\n_s(ForecastChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = ForecastChart;\nexport default ForecastChart;\nvar _c;\n$RefreshReg$(_c, \"ForecastChart\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ForecastChart","data","forecast","optimizedForecast","impacts","_s","chartRef","current","innerHTML","createSimpleChart","container","groupedActualData","groupDataByMonth","actualData","Object","entries","map","dateStr","value","date","Date","sort","a","b","forecastData","d","ds","predicted_emissions","lower","lower_bound","upper","upper_bound","optimizedData","allValues","minValue","Math","min","maxValue","max","allDates","minDate","maxDate","chartTitle","document","createElement","className","textContent","appendChild","chartContainer","yAxis","numYLabels","i","label","toFixed","style","bottom","chartArea","xAxis","monthDiff","getFullYear","getMonth","labelInterval","floor","setMonth","toLocaleString","month","left","getPosition","x","y","length","actualLine","pathD","forEach","point","pos","dataPoint","top","year","setAttribute","svg","createElementNS","position","path","forecastLine","lowerPos","upperPos","interval","height","optimizedLine","legend","actualLegend","actualColor","actualLabel","forecastLegend","forecastColor","forecastLabel","optimizedLegend","optimizedColor","optimizedLabel","keys","impactSection","impactTitle","impactList","sortedImpacts","abs","impact_score","slice","factor","index","factorName","impactItem","impactRank","impactInfo","impactName","impactScore","impactValue","monthlyData","item","emissions","monthKey","parseFloat","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/ForecastChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './ForecastChart.css';\n\nconst ForecastChart = ({ data, forecast, optimizedForecast, impacts }) => {\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    if (!forecast || !chartRef.current) return;\n    \n    // Clear any previous content\n    chartRef.current.innerHTML = '';\n    \n    // Create a simple canvas-based chart without Chart.js\n    const createSimpleChart = () => {\n      const container = chartRef.current;\n      \n      // Format data for display - group by month\n      const groupedActualData = groupDataByMonth(data);\n      \n      // Sort data by date\n      const actualData = Object.entries(groupedActualData)\n        .map(([dateStr, value]) => ({\n          date: new Date(dateStr),\n          value: value\n        }))\n        .sort((a, b) => a.date - b.date);\n      \n      // Process forecast data - already monthly\n      const forecastData = forecast.map(d => ({\n        date: new Date(d.ds),\n        value: d.predicted_emissions,\n        lower: d.lower_bound,\n        upper: d.upper_bound\n      }));\n      \n      // Process optimized data if available\n      const optimizedData = optimizedForecast ? optimizedForecast.map(d => ({\n        date: new Date(d.ds),\n        value: d.predicted_emissions\n      })) : [];\n      \n      // Find min and max values for scaling\n      const allValues = [\n        ...actualData.map(d => d.value),\n        ...forecastData.map(d => d.value),\n        ...forecastData.map(d => d.upper),\n        ...optimizedData.map(d => d.value)\n      ];\n      \n      const minValue = Math.min(...allValues) * 0.9;\n      const maxValue = Math.max(...allValues) * 1.1;\n      \n      // Find date range\n      const allDates = [\n        ...actualData.map(d => d.date),\n        ...forecastData.map(d => d.date),\n        ...optimizedData.map(d => d.date)\n      ];\n      \n      const minDate = new Date(Math.min(...allDates));\n      const maxDate = new Date(Math.max(...allDates));\n      \n      // Create chart elements\n      const chartTitle = document.createElement('h3');\n      chartTitle.className = 'chart-title';\n      chartTitle.textContent = 'Monthly Carbon Emissions Forecast';\n      container.appendChild(chartTitle);\n      \n      // Create chart container\n      const chartContainer = document.createElement('div');\n      chartContainer.className = 'simple-chart-container';\n      container.appendChild(chartContainer);\n      \n      // Create Y-axis labels\n      const yAxis = document.createElement('div');\n      yAxis.className = 'y-axis';\n      \n      const numYLabels = 5;\n      for (let i = 0; i < numYLabels; i++) {\n        const label = document.createElement('div');\n        label.className = 'y-label';\n        const value = maxValue - (i * (maxValue - minValue) / (numYLabels - 1));\n        label.textContent = value.toFixed(1);\n        label.style.bottom = `${(i / (numYLabels - 1)) * 100}%`;\n        yAxis.appendChild(label);\n      }\n      \n      chartContainer.appendChild(yAxis);\n      \n      // Create chart area\n      const chartArea = document.createElement('div');\n      chartArea.className = 'chart-area';\n      chartContainer.appendChild(chartArea);\n      \n      // Create X-axis labels\n      const xAxis = document.createElement('div');\n      xAxis.className = 'x-axis';\n      \n      // Calculate months between min and max date\n      const monthDiff = (maxDate.getFullYear() - minDate.getFullYear()) * 12 + \n                         (maxDate.getMonth() - minDate.getMonth());\n      \n      // Create a label every 2-3 months\n      const labelInterval = Math.max(1, Math.floor(monthDiff / 5));\n      \n      for (let i = 0; i <= monthDiff; i += labelInterval) {\n        const date = new Date(minDate);\n        date.setMonth(date.getMonth() + i);\n        \n        const label = document.createElement('div');\n        label.className = 'x-label';\n        label.textContent = `${date.toLocaleString('default', { month: 'short' })} ${date.getFullYear()}`;\n        label.style.left = `${(i / monthDiff) * 100}%`;\n        xAxis.appendChild(label);\n      }\n      \n      chartContainer.appendChild(xAxis);\n      \n      // Function to convert data point to position\n      const getPosition = (date, value) => {\n        const x = ((date - minDate) / (maxDate - minDate)) * 100;\n        const y = 100 - ((value - minValue) / (maxValue - minValue)) * 100;\n        return { x, y };\n      };\n      \n      // Create data points and lines\n      \n      // Actual data line\n      if (actualData.length > 0) {\n        const actualLine = document.createElement('div');\n        actualLine.className = 'data-line actual-line';\n        chartArea.appendChild(actualLine);\n        \n        let pathD = '';\n        \n        actualData.forEach((point, i) => {\n          const pos = getPosition(point.date, point.value);\n          \n          // Create point\n          const dataPoint = document.createElement('div');\n          dataPoint.className = 'data-point actual-point';\n          dataPoint.style.left = `${pos.x}%`;\n          dataPoint.style.top = `${pos.y}%`;\n          \n          // Format date for tooltip\n          const month = point.date.toLocaleString('default', { month: 'long' });\n          const year = point.date.getFullYear();\n          \n          // Add tooltip\n          dataPoint.setAttribute('data-tooltip', \n            `${month} ${year}: ${point.value.toFixed(2)} tons CO2e`);\n          \n          chartArea.appendChild(dataPoint);\n          \n          // Build path\n          if (i === 0) {\n            pathD = `M ${pos.x} ${pos.y}`;\n          } else {\n            pathD += ` L ${pos.x} ${pos.y}`;\n          }\n        });\n        \n        // Create SVG for line\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('height', '100%');\n        svg.style.position = 'absolute';\n        svg.style.top = '0';\n        svg.style.left = '0';\n        \n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', pathD);\n        path.setAttribute('fill', 'none');\n        path.setAttribute('stroke', '#00FFFF');\n        path.setAttribute('stroke-width', '2');\n        \n        svg.appendChild(path);\n        actualLine.appendChild(svg);\n      }\n      \n      // Forecast data line\n      if (forecastData.length > 0) {\n        const forecastLine = document.createElement('div');\n        forecastLine.className = 'data-line forecast-line';\n        chartArea.appendChild(forecastLine);\n        \n        let pathD = '';\n        \n        forecastData.forEach((point, i) => {\n          const pos = getPosition(point.date, point.value);\n          \n          // Create point\n          const dataPoint = document.createElement('div');\n          dataPoint.className = 'data-point forecast-point';\n          dataPoint.style.left = `${pos.x}%`;\n          dataPoint.style.top = `${pos.y}%`;\n          \n          // Format date for tooltip\n          const month = point.date.toLocaleString('default', { month: 'long' });\n          const year = point.date.getFullYear();\n          \n          // Add tooltip\n          dataPoint.setAttribute('data-tooltip', \n            `${month} ${year}: ${point.value.toFixed(2)} tons CO2e`);\n          \n          chartArea.appendChild(dataPoint);\n          \n          // Build path\n          if (i === 0) {\n            pathD = `M ${pos.x} ${pos.y}`;\n          } else {\n            pathD += ` L ${pos.x} ${pos.y}`;\n          }\n          \n          // Add confidence interval\n          if (point.lower && point.upper) {\n            const lowerPos = getPosition(point.date, point.lower);\n            const upperPos = getPosition(point.date, point.upper);\n            \n            const interval = document.createElement('div');\n            interval.className = 'confidence-interval';\n            interval.style.left = `${pos.x}%`;\n            interval.style.top = `${upperPos.y}%`;\n            interval.style.height = `${lowerPos.y - upperPos.y}%`;\n            \n            chartArea.appendChild(interval);\n          }\n        });\n        \n        // Create SVG for line\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('height', '100%');\n        svg.style.position = 'absolute';\n        svg.style.top = '0';\n        svg.style.left = '0';\n        \n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', pathD);\n        path.setAttribute('fill', 'none');\n        path.setAttribute('stroke', '#FF00FF');\n        path.setAttribute('stroke-width', '2');\n        \n        svg.appendChild(path);\n        forecastLine.appendChild(svg);\n      }\n      \n      // Optimized data line\n      if (optimizedData.length > 0) {\n        const optimizedLine = document.createElement('div');\n        optimizedLine.className = 'data-line optimized-line';\n        chartArea.appendChild(optimizedLine);\n        \n        let pathD = '';\n        \n        optimizedData.forEach((point, i) => {\n          const pos = getPosition(point.date, point.value);\n          \n          // Create point\n          const dataPoint = document.createElement('div');\n          dataPoint.className = 'data-point optimized-point';\n          dataPoint.style.left = `${pos.x}%`;\n          dataPoint.style.top = `${pos.y}%`;\n          \n          // Format date for tooltip\n          const month = point.date.toLocaleString('default', { month: 'long' });\n          const year = point.date.getFullYear();\n          \n          // Add tooltip\n          dataPoint.setAttribute('data-tooltip', \n            `${month} ${year}: ${point.value.toFixed(2)} tons CO2e (optimized)`);\n          \n          chartArea.appendChild(dataPoint);\n          \n          // Build path\n          if (i === 0) {\n            pathD = `M ${pos.x} ${pos.y}`;\n          } else {\n            pathD += ` L ${pos.x} ${pos.y}`;\n          }\n        });\n        \n        // Create SVG for line\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('height', '100%');\n        svg.style.position = 'absolute';\n        svg.style.top = '0';\n        svg.style.left = '0';\n        \n        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttribute('d', pathD);\n        path.setAttribute('fill', 'none');\n        path.setAttribute('stroke', '#00FF00');\n        path.setAttribute('stroke-width', '2');\n        path.setAttribute('stroke-dasharray', '5,5');\n        \n        svg.appendChild(path);\n        optimizedLine.appendChild(svg);\n      }\n      \n      // Create legend\n      const legend = document.createElement('div');\n      legend.className = 'chart-legend';\n      \n      if (actualData.length > 0) {\n        const actualLegend = document.createElement('div');\n        actualLegend.className = 'legend-item';\n        \n        const actualColor = document.createElement('div');\n        actualColor.className = 'legend-color actual-color';\n        \n        const actualLabel = document.createElement('div');\n        actualLabel.className = 'legend-label';\n        actualLabel.textContent = 'Actual Emissions';\n        \n        actualLegend.appendChild(actualColor);\n        actualLegend.appendChild(actualLabel);\n        legend.appendChild(actualLegend);\n      }\n      \n      const forecastLegend = document.createElement('div');\n      forecastLegend.className = 'legend-item';\n      \n      const forecastColor = document.createElement('div');\n      forecastColor.className = 'legend-color forecast-color';\n      \n      const forecastLabel = document.createElement('div');\n      forecastLabel.className = 'legend-label';\n      forecastLabel.textContent = 'Forecast Emissions';\n      \n      forecastLegend.appendChild(forecastColor);\n      forecastLegend.appendChild(forecastLabel);\n      legend.appendChild(forecastLegend);\n      \n      if (optimizedData.length > 0) {\n        const optimizedLegend = document.createElement('div');\n        optimizedLegend.className = 'legend-item';\n        \n        const optimizedColor = document.createElement('div');\n        optimizedColor.className = 'legend-color optimized-color';\n        \n        const optimizedLabel = document.createElement('div');\n        optimizedLabel.className = 'legend-label';\n        optimizedLabel.textContent = 'Optimized Emissions';\n        \n        optimizedLegend.appendChild(optimizedColor);\n        optimizedLegend.appendChild(optimizedLabel);\n        legend.appendChild(optimizedLegend);\n      }\n      \n      container.appendChild(legend);\n    };\n    \n    createSimpleChart();\n    \n    // Add impact factors section\n    if (impacts && Object.keys(impacts).length > 0) {\n      const impactSection = document.createElement('div');\n      impactSection.className = 'impact-factors';\n      \n      const impactTitle = document.createElement('h4');\n      impactTitle.textContent = 'Key Impact Factors';\n      impactSection.appendChild(impactTitle);\n      \n      const impactList = document.createElement('div');\n      impactList.className = 'impact-list';\n      \n      // Sort impacts by score\n      const sortedImpacts = Object.entries(impacts)\n        .sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score))\n        .slice(0, 3);\n      \n      sortedImpacts.forEach(([factor, data], index) => {\n        let factorName = factor;\n        if (factor === 'energy_use') factorName = 'Energy Use';\n        if (factor === 'transport') factorName = 'Transport';\n        if (factor === 'waste') factorName = 'Waste';\n        if (factor === 'water') factorName = 'Water';\n        if (factor === 'fuel') factorName = 'Fuel';\n        if (factor === 'grid_intensity') factorName = 'Grid Intensity';\n        \n        const impactItem = document.createElement('div');\n        impactItem.className = 'impact-item';\n        \n        const impactRank = document.createElement('div');\n        impactRank.className = 'impact-rank';\n        impactRank.textContent = index + 1;\n        \n        const impactInfo = document.createElement('div');\n        impactInfo.className = 'impact-info';\n        \n        const impactName = document.createElement('div');\n        impactName.className = 'impact-name';\n        impactName.textContent = factorName;\n        \n        const impactScore = document.createElement('div');\n        impactScore.className = 'impact-score';\n        \n        const impactValue = document.createElement('span');\n        impactValue.className = 'impact-value';\n        impactValue.textContent = Math.abs(data.impact_score).toFixed(2);\n        \n        impactScore.textContent = 'Impact Score: ';\n        impactScore.appendChild(impactValue);\n        \n        impactInfo.appendChild(impactName);\n        impactInfo.appendChild(impactScore);\n        \n        impactItem.appendChild(impactRank);\n        impactItem.appendChild(impactInfo);\n        \n        impactList.appendChild(impactItem);\n      });\n      \n      impactSection.appendChild(impactList);\n      chartRef.current.appendChild(impactSection);\n    }\n    \n  }, [data, forecast, optimizedForecast, impacts]);\n\n  // Helper function to group data by month\n  const groupDataByMonth = (data) => {\n    if (!data || data.length === 0) return {};\n    \n    const monthlyData = {};\n    \n    data.forEach(item => {\n      if (!item.date || !item.emissions) return;\n      \n      const date = new Date(item.date);\n      const monthKey = `${date.getFullYear()}-${date.getMonth() + 1}`;\n      \n      if (!monthlyData[monthKey]) {\n        monthlyData[monthKey] = 0;\n      }\n      \n      monthlyData[monthKey] += parseFloat(item.emissions) || 0;\n    });\n    \n    return monthlyData;\n  };\n\n  return (\n    <div className=\"forecast-chart-container\" ref={chartRef}></div>\n  );\n};\n\nexport default ForecastChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}