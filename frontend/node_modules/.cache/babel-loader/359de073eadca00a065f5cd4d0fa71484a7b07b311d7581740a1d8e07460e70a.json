{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport axios from 'axios';\n\n// API base URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:5000/api';\nfunction App() {\n  _s();\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({\n    show: false,\n    message: '',\n    type: 'success'\n  });\n  const [savings, setSavings] = useState(null);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, []);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n      setData(response.data.data);\n\n      // Calculate summary\n      const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n      const summaryData = {\n        mean: {},\n        min: {},\n        max: {},\n        total_rows: response.data.data.length,\n        departments: [...new Set(response.data.data.map(item => item.department))]\n      };\n      numericColumns.forEach(col => {\n        const values = response.data.data.map(item => parseFloat(item[col]));\n        summaryData.mean[col] = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n      });\n      setSummary(summaryData);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  };\n\n  // Handle file upload\n  const handleFileUpload = async file => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setData(response.data.data);\n      setSummary(response.data.summary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to upload file', 'error');\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = updatedData => {\n    setData(updatedData);\n\n    // Recalculate summary\n    const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      total_rows: updatedData.length,\n      departments: [...new Set(updatedData.map(item => item.department))]\n    };\n    numericColumns.forEach(col => {\n      const values = updatedData.map(item => parseFloat(item[col]));\n      summaryData.mean[col] = values.reduce((sum, val) => sum + val, 0) / values.length;\n      summaryData.min[col] = Math.min(...values);\n      summaryData.max[col] = Math.max(...values);\n    });\n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/predict`, {\n        data: data,\n        forecast_periods: forecastPeriods\n      });\n      setForecast(response.data.forecast);\n      setSuggestions(response.data.suggestions);\n      setLoading(false);\n      showNotification('Forecast generated successfully', 'success');\n      setActiveTab('forecast');\n\n      // Reset optimized forecast when new forecast is generated\n      setOptimizedForecast(null);\n      setSavings(null);\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error generating forecast:', error);\n      setLoading(false);\n      showNotification(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to generate forecast', 'error');\n    }\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/optimize`, {\n        data: data,\n        suggestions: suggestions,\n        forecast_periods: forecastPeriods\n      });\n      setOptimizedForecast(response.data.optimized_forecast);\n      setSavings({\n        total: response.data.total_savings,\n        percentage: response.data.savings_percentage\n      });\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to optimize forecast', 'error');\n    }\n  };\n\n  // Export forecast to CSV\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/export`, {\n        forecast: optimizedForecast || forecast\n      }, {\n        responseType: 'blob'\n      });\n\n      // Create a download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'forecast_output.csv');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification('Failed to export forecast', 'error');\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type) => {\n    setNotification({\n      show: true,\n      message,\n      type\n    });\n    setTimeout(() => {\n      setNotification({\n        show: false,\n        message: '',\n        type: 'success'\n      });\n    }, 5000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(LoadingBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 19\n    }, this), notification.show && /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification.message,\n      type: notification.type,\n      onClose: () => setNotification({\n        show: false,\n        message: '',\n        type: 'success'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"left-panel\",\n        children: [/*#__PURE__*/_jsxDEV(UploadZone, {\n          onFileUpload: handleFileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ForecastControls, {\n          forecastPeriods: forecastPeriods,\n          onForecastPeriodsChange: setForecastPeriods,\n          onGenerateForecast: handleGenerateForecast,\n          onOptimizeForecast: handleOptimizeForecast,\n          onExportForecast: handleExportForecast,\n          disableOptimize: !forecast,\n          disableExport: !forecast && !optimizedForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(OptimizationPanel, {\n          suggestions: suggestions,\n          savings: savings,\n          onOptimize: handleOptimizeForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"right-panel\",\n        children: [/*#__PURE__*/_jsxDEV(TabPanel, {\n          activeTab: activeTab,\n          onTabChange: setActiveTab,\n          tabs: [{\n            id: 'data',\n            label: 'Data'\n          }, {\n            id: 'forecast',\n            label: 'Forecast',\n            disabled: !forecast\n          }, {\n            id: 'plot',\n            label: 'Plot',\n            disabled: !forecast\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), activeTab === 'data' && /*#__PURE__*/_jsxDEV(DataTable, {\n          data: data,\n          onDataUpdate: handleDataUpdate,\n          summary: summary\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this), activeTab === 'forecast' && forecast && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-table-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Forecast Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n            data: optimizedForecast || forecast,\n            readOnly: true,\n            isForecasted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), activeTab === 'plot' && forecast && /*#__PURE__*/_jsxDEV(ForecastChart, {\n          actualData: data,\n          forecastData: forecast,\n          optimizedData: optimizedForecast\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"baNMYE62qnulYeJ/2b74QK/099M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","DataTable","UploadZone","ForecastControls","ForecastChart","OptimizationPanel","Notification","LoadingBar","TabPanel","axios","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","data","setData","summary","setSummary","forecastPeriods","setForecastPeriods","forecast","setForecast","optimizedForecast","setOptimizedForecast","suggestions","setSuggestions","activeTab","setActiveTab","loading","setLoading","notification","setNotification","show","message","type","savings","setSavings","fetchSampleData","response","get","numericColumns","summaryData","mean","min","max","total_rows","length","departments","Set","map","item","department","forEach","col","values","parseFloat","reduce","sum","val","Math","showNotification","error","console","handleFileUpload","file","formData","FormData","append","post","headers","_error$response","_error$response$data","handleDataUpdate","updatedData","handleGenerateForecast","forecast_periods","_error$response2","_error$response2$data","handleOptimizeForecast","optimized_forecast","total","total_savings","percentage","savings_percentage","_error$response3","_error$response3$data","handleExportForecast","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onFileUpload","onForecastPeriodsChange","onGenerateForecast","onOptimizeForecast","onExportForecast","disableOptimize","disableExport","onOptimize","onTabChange","tabs","id","label","disabled","onDataUpdate","readOnly","isForecasted","actualData","forecastData","optimizedData","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport DataTable from './components/DataTable';\nimport UploadZone from './components/UploadZone';\nimport ForecastControls from './components/ForecastControls';\nimport ForecastChart from './components/ForecastChart';\nimport OptimizationPanel from './components/OptimizationPanel';\nimport Notification from './components/Notification';\nimport LoadingBar from './components/LoadingBar';\nimport TabPanel from './components/TabPanel';\nimport axios from 'axios';\n\n// API base URL\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nfunction App() {\n  // State management\n  const [data, setData] = useState([]);\n  const [summary, setSummary] = useState(null);\n  const [forecastPeriods, setForecastPeriods] = useState(12);\n  const [forecast, setForecast] = useState(null);\n  const [optimizedForecast, setOptimizedForecast] = useState(null);\n  const [suggestions, setSuggestions] = useState([]);\n  const [activeTab, setActiveTab] = useState('data');\n  const [loading, setLoading] = useState(false);\n  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' });\n  const [savings, setSavings] = useState(null);\n\n  // Load sample data on initial render\n  useEffect(() => {\n    fetchSampleData();\n  }, []);\n\n  // Fetch sample data from the backend\n  const fetchSampleData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${API_BASE_URL}/sample`);\n      setData(response.data.data);\n      \n      // Calculate summary\n      const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n      const summaryData = {\n        mean: {},\n        min: {},\n        max: {},\n        total_rows: response.data.data.length,\n        departments: [...new Set(response.data.data.map(item => item.department))]\n      };\n      \n      numericColumns.forEach(col => {\n        const values = response.data.data.map(item => parseFloat(item[col]));\n        summaryData.mean[col] = values.reduce((sum, val) => sum + val, 0) / values.length;\n        summaryData.min[col] = Math.min(...values);\n        summaryData.max[col] = Math.max(...values);\n      });\n      \n      setSummary(summaryData);\n      setLoading(false);\n      showNotification('Sample data loaded successfully', 'success');\n    } catch (error) {\n      console.error('Error fetching sample data:', error);\n      setLoading(false);\n      showNotification('Failed to load sample data', 'error');\n    }\n  };\n\n  // Handle file upload\n  const handleFileUpload = async (file) => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      const response = await axios.post(`${API_BASE_URL}/upload`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      \n      setData(response.data.data);\n      setSummary(response.data.summary);\n      setLoading(false);\n      showNotification('File uploaded successfully', 'success');\n      setActiveTab('data');\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to upload file', 'error');\n    }\n  };\n\n  // Handle data update from the table\n  const handleDataUpdate = (updatedData) => {\n    setData(updatedData);\n    \n    // Recalculate summary\n    const numericColumns = ['energy_use', 'transport', 'waste', 'water', 'fuel', 'emissions', 'production', 'grid_intensity'];\n    const summaryData = {\n      mean: {},\n      min: {},\n      max: {},\n      total_rows: updatedData.length,\n      departments: [...new Set(updatedData.map(item => item.department))]\n    };\n    \n    numericColumns.forEach(col => {\n      const values = updatedData.map(item => parseFloat(item[col]));\n      summaryData.mean[col] = values.reduce((sum, val) => sum + val, 0) / values.length;\n      summaryData.min[col] = Math.min(...values);\n      summaryData.max[col] = Math.max(...values);\n    });\n    \n    setSummary(summaryData);\n  };\n\n  // Generate forecast\n  const handleGenerateForecast = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/predict`, {\n        data: data,\n        forecast_periods: forecastPeriods\n      });\n      \n      setForecast(response.data.forecast);\n      setSuggestions(response.data.suggestions);\n      setLoading(false);\n      showNotification('Forecast generated successfully', 'success');\n      setActiveTab('forecast');\n      \n      // Reset optimized forecast when new forecast is generated\n      setOptimizedForecast(null);\n      setSavings(null);\n    } catch (error) {\n      console.error('Error generating forecast:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to generate forecast', 'error');\n    }\n  };\n\n  // Generate optimized forecast\n  const handleOptimizeForecast = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(`${API_BASE_URL}/optimize`, {\n        data: data,\n        suggestions: suggestions,\n        forecast_periods: forecastPeriods\n      });\n      \n      setOptimizedForecast(response.data.optimized_forecast);\n      setSavings({\n        total: response.data.total_savings,\n        percentage: response.data.savings_percentage\n      });\n      setLoading(false);\n      showNotification('Optimization completed successfully', 'success');\n    } catch (error) {\n      console.error('Error optimizing forecast:', error);\n      setLoading(false);\n      showNotification(error.response?.data?.error || 'Failed to optimize forecast', 'error');\n    }\n  };\n\n  // Export forecast to CSV\n  const handleExportForecast = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post(\n        `${API_BASE_URL}/export`,\n        { forecast: optimizedForecast || forecast },\n        { responseType: 'blob' }\n      );\n      \n      // Create a download link\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'forecast_output.csv');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      setLoading(false);\n      showNotification('Forecast exported successfully', 'success');\n    } catch (error) {\n      console.error('Error exporting forecast:', error);\n      setLoading(false);\n      showNotification('Failed to export forecast', 'error');\n    }\n  };\n\n  // Show notification\n  const showNotification = (message, type) => {\n    setNotification({ show: true, message, type });\n    setTimeout(() => {\n      setNotification({ show: false, message: '', type: 'success' });\n    }, 5000);\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      \n      {loading && <LoadingBar />}\n      \n      {notification.show && (\n        <Notification \n          message={notification.message} \n          type={notification.type} \n          onClose={() => setNotification({ show: false, message: '', type: 'success' })} \n        />\n      )}\n      \n      <main className=\"main-content\">\n        <div className=\"left-panel\">\n          <UploadZone onFileUpload={handleFileUpload} />\n          \n          <ForecastControls \n            forecastPeriods={forecastPeriods}\n            onForecastPeriodsChange={setForecastPeriods}\n            onGenerateForecast={handleGenerateForecast}\n            onOptimizeForecast={handleOptimizeForecast}\n            onExportForecast={handleExportForecast}\n            disableOptimize={!forecast}\n            disableExport={!forecast && !optimizedForecast}\n          />\n          \n          {suggestions.length > 0 && (\n            <OptimizationPanel \n              suggestions={suggestions} \n              savings={savings}\n              onOptimize={handleOptimizeForecast}\n            />\n          )}\n        </div>\n        \n        <div className=\"right-panel\">\n          <TabPanel \n            activeTab={activeTab} \n            onTabChange={setActiveTab}\n            tabs={[\n              { id: 'data', label: 'Data' },\n              { id: 'forecast', label: 'Forecast', disabled: !forecast },\n              { id: 'plot', label: 'Plot', disabled: !forecast }\n            ]}\n          />\n          \n          {activeTab === 'data' && (\n            <DataTable \n              data={data} \n              onDataUpdate={handleDataUpdate}\n              summary={summary}\n            />\n          )}\n          \n          {activeTab === 'forecast' && forecast && (\n            <div className=\"forecast-table-container\">\n              <h3>Forecast Results</h3>\n              <DataTable \n                data={optimizedForecast || forecast} \n                readOnly={true}\n                isForecasted={true}\n              />\n            </div>\n          )}\n          \n          {activeTab === 'plot' && forecast && (\n            <ForecastChart \n              actualData={data}\n              forecastData={forecast}\n              optimizedData={optimizedForecast}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}