{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\ModelPerformance.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport './ModelPerformance.css';\n\n// Register ChartJS components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Title, Tooltip, Legend, Filler);\nconst ModelPerformance = ({\n  data,\n  forecast,\n  impacts\n}) => {\n  _s();\n  const [actualVsPredicted, setActualVsPredicted] = useState(null);\n  const [errorMetrics, setErrorMetrics] = useState(null);\n  const [regressorImportance, setRegressorImportance] = useState(null);\n  const [isAnimated, setIsAnimated] = useState(false);\n\n  // Prepare data for actual vs predicted chart\n  const prepareActualVsPredictedData = useCallback(() => {\n    if (!data || !forecast) return;\n\n    // Get the last 12 months of actual data\n    const actualData = data.slice(-12);\n\n    // Format dates for display\n    const labels = actualData.map(item => {\n      const date = new Date(item.date || item.ds);\n      return date.toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n      });\n    });\n\n    // Get actual emissions values\n    const actualValues = actualData.map(item => item.emissions || item.y);\n\n    // Get predicted values for the same period (if available)\n    const predictedValues = forecast.slice(0, 12).map(item => item.predicted_emissions);\n\n    // Create chart data\n    const chartData = {\n      labels,\n      datasets: [{\n        label: 'Actual Emissions',\n        data: actualValues,\n        borderColor: '#00FFFF',\n        backgroundColor: 'rgba(0, 255, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FFFF',\n        pointBorderColor: '#00FFFF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4,\n        fill: false\n      }, {\n        label: 'Predicted Emissions',\n        data: predictedValues,\n        borderColor: '#FF00FF',\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#FF00FF',\n        pointBorderColor: '#FF00FF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4,\n        fill: false\n      }]\n    };\n    setActualVsPredicted(chartData);\n  }, [data, forecast]);\n\n  // Prepare error metrics data\n  const prepareErrorMetricsData = useCallback(() => {\n    if (!data || !forecast) return;\n\n    // Calculate MAE and RMSE\n    let mae = 0;\n    let rmse = 0;\n    let count = 0;\n\n    // Get the last 12 months of actual data\n    const actualData = data.slice(-12);\n\n    // Get predicted values for the same period (if available)\n    const forecastData = forecast.slice(0, 12);\n\n    // Calculate errors\n    actualData.forEach((actual, index) => {\n      if (index < forecastData.length) {\n        const actualValue = actual.emissions || actual.y;\n        const predictedValue = forecastData[index].predicted_emissions;\n        const error = Math.abs(actualValue - predictedValue);\n        mae += error;\n        rmse += error * error;\n        count++;\n      }\n    });\n\n    // Calculate final metrics\n    mae = count > 0 ? mae / count : 0;\n    rmse = count > 0 ? Math.sqrt(rmse / count) : 0;\n\n    // Create chart data\n    const chartData = {\n      labels: ['MAE', 'RMSE'],\n      datasets: [{\n        label: 'Error Metrics',\n        data: [mae, rmse],\n        backgroundColor: ['rgba(0, 255, 255, 0.7)', 'rgba(255, 0, 255, 0.7)'],\n        borderColor: ['#00FFFF', '#FF00FF'],\n        borderWidth: 1,\n        hoverBackgroundColor: ['rgba(0, 255, 255, 0.9)', 'rgba(255, 0, 255, 0.9)']\n      }]\n    };\n    setErrorMetrics(chartData);\n  }, [data, forecast]);\n\n  // Prepare regressor importance data\n  const prepareRegressorImportanceData = useCallback(() => {\n    if (!impacts) return;\n\n    // Extract regressor impacts\n    const labels = [];\n    const values = [];\n    const colors = [];\n\n    // Generate neon colors\n    const neonColors = ['rgba(0, 255, 255, 0.7)',\n    // Cyan\n    'rgba(255, 0, 255, 0.7)',\n    // Magenta\n    'rgba(0, 255, 0, 0.7)',\n    // Green\n    'rgba(255, 255, 0, 0.7)',\n    // Yellow\n    'rgba(255, 128, 0, 0.7)',\n    // Orange\n    'rgba(128, 0, 255, 0.7)',\n    // Purple\n    'rgba(0, 128, 255, 0.7)',\n    // Blue\n    'rgba(255, 0, 128, 0.7)' // Pink\n    ];\n\n    // Sort impacts by importance\n    Object.entries(impacts).forEach(([key, impact], index) => {\n      // Format key for display\n      let displayKey = key;\n      if (key === 'energy_kwh') displayKey = 'Energy Use';else if (key === 'transport_km') displayKey = 'Transport';else if (key === 'waste_kg') displayKey = 'Waste';else if (key === 'water_m3') displayKey = 'Water';else if (key === 'fuel_l') displayKey = 'Fuel';else if (key === 'grid_intensity') displayKey = 'Grid Intensity';else if (key === 'production_units') displayKey = 'Production';\n      labels.push(displayKey);\n      values.push(Math.abs(impact.impact_score));\n      colors.push(neonColors[index % neonColors.length]);\n    });\n\n    // Create chart data\n    const chartData = {\n      labels,\n      datasets: [{\n        data: values,\n        backgroundColor: colors,\n        borderColor: colors.map(color => color.replace('0.7', '1')),\n        borderWidth: 1,\n        hoverBackgroundColor: colors.map(color => color.replace('0.7', '0.9')),\n        hoverBorderColor: colors.map(color => color.replace('0.7', '1'))\n      }]\n    };\n    setRegressorImportance(chartData);\n  }, [impacts]);\n  useEffect(() => {\n    if (data && forecast && impacts) {\n      // Prepare data for actual vs predicted chart\n      prepareActualVsPredictedData();\n\n      // Prepare error metrics data\n      prepareErrorMetricsData();\n\n      // Prepare regressor importance data\n      prepareRegressorImportanceData();\n\n      // Trigger animation after data is loaded\n      setTimeout(() => setIsAnimated(true), 300);\n    }\n  }, [data, forecast, impacts, prepareActualVsPredictedData, prepareErrorMetricsData, prepareRegressorImportanceData]);\n\n  // Chart options\n  const lineOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: isAnimated ? 2000 : 0,\n      easing: 'easeOutQuart'\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          font: {\n            family: 'Orbitron',\n            size: 12\n          },\n          color: '#fff'\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleFont: {\n          family: 'Orbitron',\n          size: 14\n        },\n        bodyFont: {\n          family: 'Roboto',\n          size: 13\n        },\n        borderColor: 'rgba(0, 255, 255, 0.3)',\n        borderWidth: 1\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#ccc',\n          font: {\n            family: 'Roboto',\n            size: 11\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#ccc',\n          font: {\n            family: 'Roboto',\n            size: 11\n          }\n        }\n      }\n    }\n  };\n  const barOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: isAnimated ? 1500 : 0,\n      easing: 'easeOutQuart'\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleFont: {\n          family: 'Orbitron',\n          size: 14\n        },\n        bodyFont: {\n          family: 'Roboto',\n          size: 13\n        },\n        borderColor: 'rgba(0, 255, 255, 0.3)',\n        borderWidth: 1\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#ccc',\n          font: {\n            family: 'Orbitron',\n            size: 12\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#ccc',\n          font: {\n            family: 'Roboto',\n            size: 11\n          }\n        }\n      }\n    }\n  };\n  const pieOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: isAnimated ? 1800 : 0,\n      easing: 'easeOutQuart'\n    },\n    plugins: {\n      legend: {\n        position: 'right',\n        labels: {\n          font: {\n            family: 'Roboto',\n            size: 12\n          },\n          color: '#fff',\n          padding: 15\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleFont: {\n          family: 'Orbitron',\n          size: 14\n        },\n        bodyFont: {\n          family: 'Roboto',\n          size: 13\n        },\n        borderColor: 'rgba(0, 255, 255, 0.3)',\n        borderWidth: 1\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"model-performance-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"performance-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Model Performance Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"performance-subtitle\",\n        children: \"Analyzing Prophet model accuracy and factor importance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"performance-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Actual vs. Predicted Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: actualVsPredicted ? /*#__PURE__*/_jsxDEV(Line, {\n            data: actualVsPredicted,\n            options: lineOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-chart\",\n            children: \"Loading chart data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Error Metrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container\",\n          children: errorMetrics ? /*#__PURE__*/_jsxDEV(Bar, {\n            data: errorMetrics,\n            options: barOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-chart\",\n            children: \"Loading chart data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metric-explanation\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"MAE:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 16\n            }, this), \" Mean Absolute Error - Average absolute difference between actual and predicted values\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"RMSE:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 16\n            }, this), \" Root Mean Square Error - Square root of the average squared differences\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Factor Importance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chart-container pie-container\",\n          children: regressorImportance ? /*#__PURE__*/_jsxDEV(Pie, {\n            data: regressorImportance,\n            options: pieOptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-chart\",\n            children: \"Loading chart data...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"importance-explanation\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Relative importance of each factor in predicting carbon emissions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 5\n  }, this);\n};\n_s(ModelPerformance, \"Sdf4PX3eYBp1EBww6NUT0V9wU9g=\");\n_c = ModelPerformance;\nexport default ModelPerformance;\nvar _c;\n$RefreshReg$(_c, \"ModelPerformance\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Line","Bar","Pie","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","ArcElement","Title","Tooltip","Legend","Filler","jsxDEV","_jsxDEV","register","ModelPerformance","data","forecast","impacts","_s","actualVsPredicted","setActualVsPredicted","errorMetrics","setErrorMetrics","regressorImportance","setRegressorImportance","isAnimated","setIsAnimated","prepareActualVsPredictedData","actualData","slice","labels","map","item","date","Date","ds","toLocaleDateString","month","year","actualValues","emissions","y","predictedValues","predicted_emissions","chartData","datasets","label","borderColor","backgroundColor","borderWidth","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","tension","fill","prepareErrorMetricsData","mae","rmse","count","forecastData","forEach","actual","index","length","actualValue","predictedValue","error","Math","abs","sqrt","hoverBackgroundColor","prepareRegressorImportanceData","values","colors","neonColors","Object","entries","key","impact","displayKey","push","impact_score","color","replace","hoverBorderColor","setTimeout","lineOptions","responsive","maintainAspectRatio","animation","duration","easing","plugins","legend","position","font","family","size","tooltip","titleFont","bodyFont","scales","x","grid","ticks","barOptions","display","pieOptions","padding","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/ModelPerformance.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n} from 'chart.js';\nimport './ModelPerformance.css';\n\n// Register ChartJS components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler\n);\n\nconst ModelPerformance = ({ data, forecast, impacts }) => {\n  const [actualVsPredicted, setActualVsPredicted] = useState(null);\n  const [errorMetrics, setErrorMetrics] = useState(null);\n  const [regressorImportance, setRegressorImportance] = useState(null);\n  const [isAnimated, setIsAnimated] = useState(false);\n\n  // Prepare data for actual vs predicted chart\n  const prepareActualVsPredictedData = useCallback(() => {\n    if (!data || !forecast) return;\n    \n    // Get the last 12 months of actual data\n    const actualData = data.slice(-12);\n    \n    // Format dates for display\n    const labels = actualData.map(item => {\n      const date = new Date(item.date || item.ds);\n      return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n    });\n    \n    // Get actual emissions values\n    const actualValues = actualData.map(item => item.emissions || item.y);\n    \n    // Get predicted values for the same period (if available)\n    const predictedValues = forecast.slice(0, 12).map(item => item.predicted_emissions);\n    \n    // Create chart data\n    const chartData = {\n      labels,\n      datasets: [\n        {\n          label: 'Actual Emissions',\n          data: actualValues,\n          borderColor: '#00FFFF',\n          backgroundColor: 'rgba(0, 255, 255, 0.1)',\n          borderWidth: 2,\n          pointBackgroundColor: '#00FFFF',\n          pointBorderColor: '#00FFFF',\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          tension: 0.4,\n          fill: false\n        },\n        {\n          label: 'Predicted Emissions',\n          data: predictedValues,\n          borderColor: '#FF00FF',\n          backgroundColor: 'rgba(255, 0, 255, 0.1)',\n          borderWidth: 2,\n          pointBackgroundColor: '#FF00FF',\n          pointBorderColor: '#FF00FF',\n          pointRadius: 4,\n          pointHoverRadius: 6,\n          tension: 0.4,\n          fill: false\n        }\n      ]\n    };\n    \n    setActualVsPredicted(chartData);\n  }, [data, forecast]);\n\n  // Prepare error metrics data\n  const prepareErrorMetricsData = useCallback(() => {\n    if (!data || !forecast) return;\n    \n    // Calculate MAE and RMSE\n    let mae = 0;\n    let rmse = 0;\n    let count = 0;\n    \n    // Get the last 12 months of actual data\n    const actualData = data.slice(-12);\n    \n    // Get predicted values for the same period (if available)\n    const forecastData = forecast.slice(0, 12);\n    \n    // Calculate errors\n    actualData.forEach((actual, index) => {\n      if (index < forecastData.length) {\n        const actualValue = actual.emissions || actual.y;\n        const predictedValue = forecastData[index].predicted_emissions;\n        \n        const error = Math.abs(actualValue - predictedValue);\n        mae += error;\n        rmse += error * error;\n        count++;\n      }\n    });\n    \n    // Calculate final metrics\n    mae = count > 0 ? mae / count : 0;\n    rmse = count > 0 ? Math.sqrt(rmse / count) : 0;\n    \n    // Create chart data\n    const chartData = {\n      labels: ['MAE', 'RMSE'],\n      datasets: [\n        {\n          label: 'Error Metrics',\n          data: [mae, rmse],\n          backgroundColor: [\n            'rgba(0, 255, 255, 0.7)',\n            'rgba(255, 0, 255, 0.7)'\n          ],\n          borderColor: [\n            '#00FFFF',\n            '#FF00FF'\n          ],\n          borderWidth: 1,\n          hoverBackgroundColor: [\n            'rgba(0, 255, 255, 0.9)',\n            'rgba(255, 0, 255, 0.9)'\n          ]\n        }\n      ]\n    };\n    \n    setErrorMetrics(chartData);\n  }, [data, forecast]);\n\n  // Prepare regressor importance data\n  const prepareRegressorImportanceData = useCallback(() => {\n    if (!impacts) return;\n    \n    // Extract regressor impacts\n    const labels = [];\n    const values = [];\n    const colors = [];\n    \n    // Generate neon colors\n    const neonColors = [\n      'rgba(0, 255, 255, 0.7)',   // Cyan\n      'rgba(255, 0, 255, 0.7)',   // Magenta\n      'rgba(0, 255, 0, 0.7)',     // Green\n      'rgba(255, 255, 0, 0.7)',   // Yellow\n      'rgba(255, 128, 0, 0.7)',   // Orange\n      'rgba(128, 0, 255, 0.7)',   // Purple\n      'rgba(0, 128, 255, 0.7)',   // Blue\n      'rgba(255, 0, 128, 0.7)'    // Pink\n    ];\n    \n    // Sort impacts by importance\n    Object.entries(impacts).forEach(([key, impact], index) => {\n      // Format key for display\n      let displayKey = key;\n      \n      if (key === 'energy_kwh') displayKey = 'Energy Use';\n      else if (key === 'transport_km') displayKey = 'Transport';\n      else if (key === 'waste_kg') displayKey = 'Waste';\n      else if (key === 'water_m3') displayKey = 'Water';\n      else if (key === 'fuel_l') displayKey = 'Fuel';\n      else if (key === 'grid_intensity') displayKey = 'Grid Intensity';\n      else if (key === 'production_units') displayKey = 'Production';\n      \n      labels.push(displayKey);\n      values.push(Math.abs(impact.impact_score));\n      colors.push(neonColors[index % neonColors.length]);\n    });\n    \n    // Create chart data\n    const chartData = {\n      labels,\n      datasets: [\n        {\n          data: values,\n          backgroundColor: colors,\n          borderColor: colors.map(color => color.replace('0.7', '1')),\n          borderWidth: 1,\n          hoverBackgroundColor: colors.map(color => color.replace('0.7', '0.9')),\n          hoverBorderColor: colors.map(color => color.replace('0.7', '1')),\n        }\n      ]\n    };\n    \n    setRegressorImportance(chartData);\n  }, [impacts]);\n\n  useEffect(() => {\n    if (data && forecast && impacts) {\n      // Prepare data for actual vs predicted chart\n      prepareActualVsPredictedData();\n      \n      // Prepare error metrics data\n      prepareErrorMetricsData();\n      \n      // Prepare regressor importance data\n      prepareRegressorImportanceData();\n      \n      // Trigger animation after data is loaded\n      setTimeout(() => setIsAnimated(true), 300);\n    }\n  }, [data, forecast, impacts, prepareActualVsPredictedData, prepareErrorMetricsData, prepareRegressorImportanceData]);\n\n  // Chart options\n  const lineOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: isAnimated ? 2000 : 0,\n      easing: 'easeOutQuart'\n    },\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          font: {\n            family: 'Orbitron',\n            size: 12\n          },\n          color: '#fff'\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleFont: {\n          family: 'Orbitron',\n          size: 14\n        },\n        bodyFont: {\n          family: 'Roboto',\n          size: 13\n        },\n        borderColor: 'rgba(0, 255, 255, 0.3)',\n        borderWidth: 1\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#ccc',\n          font: {\n            family: 'Roboto',\n            size: 11\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#ccc',\n          font: {\n            family: 'Roboto',\n            size: 11\n          }\n        }\n      }\n    }\n  };\n\n  const barOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: isAnimated ? 1500 : 0,\n      easing: 'easeOutQuart'\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleFont: {\n          family: 'Orbitron',\n          size: 14\n        },\n        bodyFont: {\n          family: 'Roboto',\n          size: 13\n        },\n        borderColor: 'rgba(0, 255, 255, 0.3)',\n        borderWidth: 1\n      }\n    },\n    scales: {\n      x: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#ccc',\n          font: {\n            family: 'Orbitron',\n            size: 12\n          }\n        }\n      },\n      y: {\n        grid: {\n          color: 'rgba(255, 255, 255, 0.1)'\n        },\n        ticks: {\n          color: '#ccc',\n          font: {\n            family: 'Roboto',\n            size: 11\n          }\n        }\n      }\n    }\n  };\n\n  const pieOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    animation: {\n      duration: isAnimated ? 1800 : 0,\n      easing: 'easeOutQuart'\n    },\n    plugins: {\n      legend: {\n        position: 'right',\n        labels: {\n          font: {\n            family: 'Roboto',\n            size: 12\n          },\n          color: '#fff',\n          padding: 15\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n        titleFont: {\n          family: 'Orbitron',\n          size: 14\n        },\n        bodyFont: {\n          family: 'Roboto',\n          size: 13\n        },\n        borderColor: 'rgba(0, 255, 255, 0.3)',\n        borderWidth: 1\n      }\n    }\n  };\n\n  return (\n    <div className=\"model-performance-container\">\n      <div className=\"performance-header\">\n        <h2>Model Performance Analysis</h2>\n        <p className=\"performance-subtitle\">\n          Analyzing Prophet model accuracy and factor importance\n        </p>\n      </div>\n      \n      <div className=\"performance-grid\">\n        <div className=\"chart-card\">\n          <h3>Actual vs. Predicted Emissions</h3>\n          <div className=\"chart-container\">\n            {actualVsPredicted ? (\n              <Line data={actualVsPredicted} options={lineOptions} />\n            ) : (\n              <div className=\"loading-chart\">Loading chart data...</div>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"chart-card\">\n          <h3>Error Metrics</h3>\n          <div className=\"chart-container\">\n            {errorMetrics ? (\n              <Bar data={errorMetrics} options={barOptions} />\n            ) : (\n              <div className=\"loading-chart\">Loading chart data...</div>\n            )}\n          </div>\n          <div className=\"metric-explanation\">\n            <p><strong>MAE:</strong> Mean Absolute Error - Average absolute difference between actual and predicted values</p>\n            <p><strong>RMSE:</strong> Root Mean Square Error - Square root of the average squared differences</p>\n          </div>\n        </div>\n        \n        <div className=\"chart-card\">\n          <h3>Factor Importance</h3>\n          <div className=\"chart-container pie-container\">\n            {regressorImportance ? (\n              <Pie data={regressorImportance} options={pieOptions} />\n            ) : (\n              <div className=\"loading-chart\">Loading chart data...</div>\n            )}\n          </div>\n          <div className=\"importance-explanation\">\n            <p>Relative importance of each factor in predicting carbon emissions</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ModelPerformance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}