{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\ForecastChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForecastChart = ({\n  actualData,\n  forecastData,\n  optimizedData\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Clean up chart on unmount\n  useEffect(() => {\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!actualData || !forecastData || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n    const ctx = chartRef.current.getContext('2d');\n\n    // Format data for chart\n    const formatData = () => {\n      // Process actual data\n      const actualDates = actualData.map(d => new Date(d.ds || d.date));\n      const actualValues = actualData.map(d => {\n        // Use y field for emissions in the new format\n        const val = d.y || d.emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process forecast data\n      const forecastDates = forecastData.map(d => new Date(d.ds || d.date));\n      const forecastValues = forecastData.map(d => {\n        const val = d.y || d.predicted_emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process bounds if available\n      let lowerBounds = [];\n      let upperBounds = [];\n      if (forecastData[0] && 'lower_bound' in forecastData[0]) {\n        lowerBounds = forecastData.map(d => {\n          const val = d.lower_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n        upperBounds = forecastData.map(d => {\n          const val = d.upper_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n\n      // Process optimized data if available\n      let optimizedValues = [];\n      if (optimizedData) {\n        optimizedValues = optimizedData.map(d => {\n          const val = d.y || d.predicted_emissions;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n      return {\n        actualDates,\n        actualValues,\n        forecastDates,\n        forecastValues,\n        lowerBounds,\n        upperBounds,\n        optimizedValues\n      };\n    };\n    const {\n      actualDates,\n      actualValues,\n      forecastDates,\n      forecastValues,\n      lowerBounds,\n      upperBounds,\n      optimizedValues\n    } = formatData();\n\n    // Create datasets\n    const datasets = [{\n      label: 'Actual Emissions',\n      data: actualDates.map((date, index) => ({\n        x: date,\n        y: actualValues[index]\n      })),\n      borderColor: '#00FFFF',\n      // Cyan\n      backgroundColor: 'rgba(0, 255, 255, 0.1)',\n      borderWidth: 2,\n      pointBackgroundColor: '#00FFFF',\n      pointBorderColor: '#00FFFF',\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      tension: 0.4\n    }, {\n      label: 'Forecasted Emissions',\n      data: forecastDates.map((date, index) => ({\n        x: date,\n        y: forecastValues[index]\n      })),\n      borderColor: '#FF00FF',\n      // Magenta\n      backgroundColor: 'rgba(255, 0, 255, 0.1)',\n      borderWidth: 2,\n      pointBackgroundColor: '#FF00FF',\n      pointBorderColor: '#FF00FF',\n      pointRadius: 4,\n      pointHoverRadius: 6,\n      tension: 0.4\n    }];\n\n    // Add bounds if available\n    if (lowerBounds.length > 0 && upperBounds.length > 0) {\n      datasets.push({\n        label: 'Upper Bound',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: upperBounds[index]\n        })),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'transparent',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n      datasets.push({\n        label: 'Lower Bound',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: lowerBounds[index]\n        })),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n    }\n\n    // Add optimized forecast if available\n    if (optimizedValues.length > 0) {\n      datasets.push({\n        label: 'Optimized Emissions',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: optimizedValues[index]\n        })),\n        borderColor: '#00FF00',\n        // Green\n        backgroundColor: 'rgba(0, 255, 0, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FF00',\n        pointBorderColor: '#00FF00',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      });\n    }\n\n    // Create chart configuration\n    const config = {\n      type: 'line',\n      data: {\n        datasets: datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 1000,\n          easing: 'easeOutQuart'\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'month',\n              tooltipFormat: 'MMM yyyy',\n              displayFormats: {\n                month: 'MMM yyyy'\n              }\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC',\n              maxRotation: 45,\n              minRotation: 45\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Emissions (tons CO2e)',\n              color: '#CCC'\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              color: '#CCC',\n              font: {\n                family: \"'Orbitron', sans-serif\",\n                size: 12\n              },\n              boxWidth: 15,\n              usePointStyle: true\n            }\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            titleFont: {\n              family: \"'Orbitron', sans-serif\"\n            },\n            bodyFont: {\n              family: \"'Roboto', sans-serif\"\n            },\n            borderColor: 'rgba(0, 255, 255, 0.3)',\n            borderWidth: 1,\n            callbacks: {\n              label: function (context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                }\n                return label;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    // Create new chart\n    chartInstance.current = new Chart(ctx, config);\n  }, [actualData, forecastData, optimizedData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#00FFFF'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: \"Actual Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#FF00FF'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: \"Forecasted Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), optimizedData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#00FF00'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: \"Optimized Emissions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 5\n  }, this);\n};\n_s(ForecastChart, \"7fjJSqHc7Us8KoBJ87EcyyXXnwQ=\");\n_c = ForecastChart;\nexport default ForecastChart;\nvar _c;\n$RefreshReg$(_c, \"ForecastChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ForecastChart","actualData","forecastData","optimizedData","_s","chartRef","chartInstance","current","destroy","ctx","getContext","formatData","actualDates","map","d","Date","ds","date","actualValues","val","y","emissions","parseFloat","forecastDates","forecastValues","predicted_emissions","lowerBounds","upperBounds","lower_bound","upper_bound","optimizedValues","datasets","label","data","index","x","borderColor","backgroundColor","borderWidth","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","tension","length","push","borderDash","fill","config","type","options","responsive","maintainAspectRatio","animation","duration","easing","scales","time","unit","tooltipFormat","displayFormats","month","grid","color","ticks","maxRotation","minRotation","title","display","text","plugins","legend","position","labels","font","family","size","boxWidth","usePointStyle","tooltip","titleFont","bodyFont","callbacks","context","dataset","parsed","toFixed","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/ForecastChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\n\nconst ForecastChart = ({ actualData, forecastData, optimizedData }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Clean up chart on unmount\n  useEffect(() => {\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!actualData || !forecastData || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n\n    const ctx = chartRef.current.getContext('2d');\n\n    // Format data for chart\n    const formatData = () => {\n      // Process actual data\n      const actualDates = actualData.map(d => new Date(d.ds || d.date));\n      const actualValues = actualData.map(d => {\n        // Use y field for emissions in the new format\n        const val = d.y || d.emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process forecast data\n      const forecastDates = forecastData.map(d => new Date(d.ds || d.date));\n      const forecastValues = forecastData.map(d => {\n        const val = d.y || d.predicted_emissions;\n        return typeof val === 'number' ? val : parseFloat(val) || 0;\n      });\n\n      // Process bounds if available\n      let lowerBounds = [];\n      let upperBounds = [];\n      if (forecastData[0] && 'lower_bound' in forecastData[0]) {\n        lowerBounds = forecastData.map(d => {\n          const val = d.lower_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n        upperBounds = forecastData.map(d => {\n          const val = d.upper_bound;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n\n      // Process optimized data if available\n      let optimizedValues = [];\n      if (optimizedData) {\n        optimizedValues = optimizedData.map(d => {\n          const val = d.y || d.predicted_emissions;\n          return typeof val === 'number' ? val : parseFloat(val) || 0;\n        });\n      }\n\n      return {\n        actualDates,\n        actualValues,\n        forecastDates,\n        forecastValues,\n        lowerBounds,\n        upperBounds,\n        optimizedValues\n      };\n    };\n\n    const {\n      actualDates,\n      actualValues,\n      forecastDates,\n      forecastValues,\n      lowerBounds,\n      upperBounds,\n      optimizedValues\n    } = formatData();\n\n    // Create datasets\n    const datasets = [\n      {\n        label: 'Actual Emissions',\n        data: actualDates.map((date, index) => ({\n          x: date,\n          y: actualValues[index]\n        })),\n        borderColor: '#00FFFF', // Cyan\n        backgroundColor: 'rgba(0, 255, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FFFF',\n        pointBorderColor: '#00FFFF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      },\n      {\n        label: 'Forecasted Emissions',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: forecastValues[index]\n        })),\n        borderColor: '#FF00FF', // Magenta\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#FF00FF',\n        pointBorderColor: '#FF00FF',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      }\n    ];\n\n    // Add bounds if available\n    if (lowerBounds.length > 0 && upperBounds.length > 0) {\n      datasets.push({\n        label: 'Upper Bound',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: upperBounds[index]\n        })),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'transparent',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n      \n      datasets.push({\n        label: 'Lower Bound',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: lowerBounds[index]\n        })),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n    }\n\n    // Add optimized forecast if available\n    if (optimizedValues.length > 0) {\n      datasets.push({\n        label: 'Optimized Emissions',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: optimizedValues[index]\n        })),\n        borderColor: '#00FF00', // Green\n        backgroundColor: 'rgba(0, 255, 0, 0.1)',\n        borderWidth: 2,\n        pointBackgroundColor: '#00FF00',\n        pointBorderColor: '#00FF00',\n        pointRadius: 4,\n        pointHoverRadius: 6,\n        tension: 0.4\n      });\n    }\n\n    // Create chart configuration\n    const config = {\n      type: 'line',\n      data: {\n        datasets: datasets\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        animation: {\n          duration: 1000,\n          easing: 'easeOutQuart'\n        },\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'month',\n              tooltipFormat: 'MMM yyyy',\n              displayFormats: {\n                month: 'MMM yyyy'\n              }\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC',\n              maxRotation: 45,\n              minRotation: 45\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Emissions (tons CO2e)',\n              color: '#CCC'\n            },\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#CCC'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              color: '#CCC',\n              font: {\n                family: \"'Orbitron', sans-serif\",\n                size: 12\n              },\n              boxWidth: 15,\n              usePointStyle: true\n            }\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.7)',\n            titleFont: {\n              family: \"'Orbitron', sans-serif\"\n            },\n            bodyFont: {\n              family: \"'Roboto', sans-serif\"\n            },\n            borderColor: 'rgba(0, 255, 255, 0.3)',\n            borderWidth: 1,\n            callbacks: {\n              label: function(context) {\n                let label = context.dataset.label || '';\n                if (label) {\n                  label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                  label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                }\n                return label;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    // Create new chart\n    chartInstance.current = new Chart(ctx, config);\n\n  }, [actualData, forecastData, optimizedData]);\n\n  return (\n    <div className=\"chart-container\">\n      <div className=\"chart-wrapper\">\n        <canvas ref={chartRef}></canvas>\n      </div>\n      <div className=\"chart-legend\">\n        <div className=\"legend-item\">\n          <div className=\"legend-color\" style={{ backgroundColor: '#00FFFF' }}></div>\n          <div className=\"legend-label\">Actual Emissions</div>\n        </div>\n        <div className=\"legend-item\">\n          <div className=\"legend-color\" style={{ backgroundColor: '#FF00FF' }}></div>\n          <div className=\"legend-label\">Forecasted Emissions</div>\n        </div>\n        {optimizedData && (\n          <div className=\"legend-item\">\n            <div className=\"legend-color\" style={{ backgroundColor: '#00FF00' }}></div>\n            <div className=\"legend-label\">Optimized Emissions</div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ForecastChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}