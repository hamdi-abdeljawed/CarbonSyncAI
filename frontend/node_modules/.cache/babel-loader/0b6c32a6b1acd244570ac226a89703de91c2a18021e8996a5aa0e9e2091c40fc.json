{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SETUP\\\\Desktop\\\\yap-t carbonsync ai\\\\frontend\\\\src\\\\components\\\\ForecastChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForecastChart = ({\n  data,\n  forecast,\n  optimizedForecast,\n  impacts\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Clean up chart on unmount\n  useEffect(() => {\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!forecast || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n    try {\n      const ctx = chartRef.current.getContext('2d');\n\n      // Group actual data by month\n      const monthlyData = {};\n      if (data && data.length > 0) {\n        data.forEach(item => {\n          if (!item.date || !item.emissions) return;\n          const date = new Date(item.date);\n          // Format as YYYY-MM for grouping\n          const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          if (!monthlyData[monthKey]) {\n            monthlyData[monthKey] = {\n              date: new Date(date.getFullYear(), date.getMonth(), 1),\n              emissions: 0\n            };\n          }\n          monthlyData[monthKey].emissions += parseFloat(item.emissions) || 0;\n        });\n      }\n\n      // Convert to array and sort by date\n      const actualData = Object.values(monthlyData).sort((a, b) => a.date - b.date);\n\n      // Format data for chart\n      const actualDates = actualData.map(d => d.date);\n      const actualValues = actualData.map(d => d.emissions);\n\n      // Process forecast data\n      const forecastDates = forecast.map(d => new Date(d.ds));\n      const forecastValues = forecast.map(d => d.predicted_emissions);\n      const lowerBounds = forecast.map(d => d.lower_bound);\n      const upperBounds = forecast.map(d => d.upper_bound);\n\n      // Process optimized data if available\n      let optimizedDates = [];\n      let optimizedValues = [];\n      if (optimizedForecast && optimizedForecast.length > 0) {\n        optimizedDates = optimizedForecast.map(d => new Date(d.ds));\n        optimizedValues = optimizedForecast.map(d => d.predicted_emissions);\n      }\n\n      // Create datasets\n      const datasets = [];\n\n      // Add actual data if available\n      if (actualData.length > 0) {\n        datasets.push({\n          label: 'Actual Emissions',\n          data: actualDates.map((date, index) => ({\n            x: date,\n            y: actualValues[index]\n          })),\n          borderColor: '#00FFFF',\n          // Cyan\n          backgroundColor: 'rgba(0, 255, 255, 0.1)',\n          borderWidth: 3,\n          pointBackgroundColor: '#00FFFF',\n          pointBorderColor: '#00FFFF',\n          pointRadius: 6,\n          pointHoverRadius: 8,\n          tension: 0.4,\n          fill: false\n        });\n      }\n\n      // Add forecast data\n      datasets.push({\n        label: 'Forecast Emissions',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: forecastValues[index]\n        })),\n        borderColor: '#FF00FF',\n        // Magenta\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 3,\n        pointBackgroundColor: '#FF00FF',\n        pointBorderColor: '#FF00FF',\n        pointRadius: 6,\n        pointHoverRadius: 8,\n        tension: 0.4,\n        fill: false\n      });\n\n      // Add confidence interval\n      datasets.push({\n        label: 'Confidence Interval',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: upperBounds[index]\n        })),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'transparent',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n      datasets.push({\n        label: 'Confidence Interval',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: lowerBounds[index]\n        })),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: '-1'\n      });\n\n      // Add optimized forecast if available\n      if (optimizedValues.length > 0) {\n        datasets.push({\n          label: 'Optimized Emissions',\n          data: optimizedDates.map((date, index) => ({\n            x: date,\n            y: optimizedValues[index]\n          })),\n          borderColor: '#00FF00',\n          // Green\n          backgroundColor: 'rgba(0, 255, 0, 0.1)',\n          borderWidth: 3,\n          borderDash: [5, 5],\n          pointBackgroundColor: '#00FF00',\n          pointBorderColor: '#00FF00',\n          pointRadius: 6,\n          pointHoverRadius: 8,\n          tension: 0.4,\n          fill: false\n        });\n      }\n\n      // Create chart\n      chartInstance.current = new Chart(ctx, {\n        type: 'line',\n        data: {\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          animation: {\n            duration: 2000,\n            easing: 'easeOutQuart'\n          },\n          scales: {\n            x: {\n              type: 'time',\n              time: {\n                unit: 'month',\n                displayFormats: {\n                  month: 'MMM yyyy'\n                }\n              },\n              title: {\n                display: true,\n                text: 'Month',\n                color: '#ccc',\n                font: {\n                  family: 'Orbitron',\n                  size: 14\n                }\n              },\n              grid: {\n                color: 'rgba(255, 255, 255, 0.1)'\n              },\n              ticks: {\n                color: '#ccc',\n                font: {\n                  family: 'Roboto',\n                  size: 12\n                }\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Monthly Emissions (tons CO2e)',\n                color: '#ccc',\n                font: {\n                  family: 'Orbitron',\n                  size: 14\n                }\n              },\n              grid: {\n                color: 'rgba(255, 255, 255, 0.1)'\n              },\n              ticks: {\n                color: '#ccc',\n                font: {\n                  family: 'Roboto',\n                  size: 12\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                font: {\n                  family: 'Orbitron',\n                  size: 12\n                },\n                color: '#fff',\n                padding: 20,\n                filter: function (item) {\n                  // Hide one of the confidence interval labels\n                  return item.text !== 'Confidence Interval' || item.datasetIndex === 2;\n                }\n              }\n            },\n            tooltip: {\n              enabled: true,\n              mode: 'nearest',\n              intersect: false,\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              titleFont: {\n                family: 'Orbitron',\n                size: 14\n              },\n              bodyFont: {\n                family: 'Roboto',\n                size: 13\n              },\n              borderColor: 'rgba(0, 255, 255, 0.3)',\n              borderWidth: 1,\n              callbacks: {\n                title: function (tooltipItems) {\n                  if (tooltipItems.length > 0) {\n                    const date = new Date(tooltipItems[0].parsed.x);\n                    return date.toLocaleDateString('default', {\n                      month: 'long',\n                      year: 'numeric'\n                    });\n                  }\n                  return '';\n                },\n                label: function (context) {\n                  let label = context.dataset.label || '';\n                  if (label) {\n                    label += ': ';\n                  }\n                  if (context.parsed.y !== null) {\n                    label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                  }\n                  return label;\n                }\n              }\n            }\n          },\n          elements: {\n            point: {\n              radius: 6,\n              hoverRadius: 8,\n              hitRadius: 8\n            }\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"Error creating chart:\", error);\n    }\n  }, [data, forecast, optimizedForecast]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forecast-chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: \"Monthly Carbon Emissions Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), impacts && Object.keys(impacts).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"impact-factors\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Key Impact Factors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"impact-list\",\n        children: Object.entries(impacts).sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score)).slice(0, 3).map(([factor, data], index) => {\n          let factorName = factor;\n          if (factor === 'energy_use') factorName = 'Energy Use';\n          if (factor === 'transport') factorName = 'Transport';\n          if (factor === 'waste') factorName = 'Waste';\n          if (factor === 'water') factorName = 'Water';\n          if (factor === 'fuel') factorName = 'Fuel';\n          if (factor === 'grid_intensity') factorName = 'Grid Intensity';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"impact-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"impact-rank\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"impact-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"impact-name\",\n                children: factorName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"impact-score\",\n                children: [\"Impact Score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"impact-value\",\n                  children: Math.abs(data.impact_score).toFixed(2)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 329,\n                  columnNumber: 39\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 21\n            }, this)]\n          }, factor, true, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n_s(ForecastChart, \"7fjJSqHc7Us8KoBJ87EcyyXXnwQ=\");\n_c = ForecastChart;\nexport default ForecastChart;\nvar _c;\n$RefreshReg$(_c, \"ForecastChart\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","jsxDEV","_jsxDEV","ForecastChart","data","forecast","optimizedForecast","impacts","_s","chartRef","chartInstance","current","destroy","ctx","getContext","monthlyData","length","forEach","item","date","emissions","Date","monthKey","getFullYear","String","getMonth","padStart","parseFloat","actualData","Object","values","sort","a","b","actualDates","map","d","actualValues","forecastDates","ds","forecastValues","predicted_emissions","lowerBounds","lower_bound","upperBounds","upper_bound","optimizedDates","optimizedValues","datasets","push","label","index","x","y","borderColor","backgroundColor","borderWidth","pointBackgroundColor","pointBorderColor","pointRadius","pointHoverRadius","tension","fill","borderDash","type","options","responsive","maintainAspectRatio","animation","duration","easing","scales","time","unit","displayFormats","month","title","display","text","color","font","family","size","grid","ticks","plugins","legend","position","labels","padding","filter","datasetIndex","tooltip","enabled","mode","intersect","titleFont","bodyFont","callbacks","tooltipItems","parsed","toLocaleDateString","year","context","dataset","toFixed","elements","point","radius","hoverRadius","hitRadius","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","keys","entries","Math","abs","impact_score","slice","factor","factorName","_c","$RefreshReg$"],"sources":["C:/Users/SETUP/Desktop/yap-t carbonsync ai/frontend/src/components/ForecastChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\nimport 'chartjs-adapter-date-fns';\nimport './ForecastChart.css';\n\nconst ForecastChart = ({ data, forecast, optimizedForecast, impacts }) => {\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Clean up chart on unmount\n  useEffect(() => {\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n        chartInstance.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!forecast || !chartRef.current) return;\n\n    // Destroy previous chart if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n      chartInstance.current = null;\n    }\n\n    try {\n      const ctx = chartRef.current.getContext('2d');\n\n      // Group actual data by month\n      const monthlyData = {};\n      \n      if (data && data.length > 0) {\n        data.forEach(item => {\n          if (!item.date || !item.emissions) return;\n          \n          const date = new Date(item.date);\n          // Format as YYYY-MM for grouping\n          const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          \n          if (!monthlyData[monthKey]) {\n            monthlyData[monthKey] = {\n              date: new Date(date.getFullYear(), date.getMonth(), 1),\n              emissions: 0\n            };\n          }\n          \n          monthlyData[monthKey].emissions += parseFloat(item.emissions) || 0;\n        });\n      }\n      \n      // Convert to array and sort by date\n      const actualData = Object.values(monthlyData).sort((a, b) => a.date - b.date);\n      \n      // Format data for chart\n      const actualDates = actualData.map(d => d.date);\n      const actualValues = actualData.map(d => d.emissions);\n      \n      // Process forecast data\n      const forecastDates = forecast.map(d => new Date(d.ds));\n      const forecastValues = forecast.map(d => d.predicted_emissions);\n      const lowerBounds = forecast.map(d => d.lower_bound);\n      const upperBounds = forecast.map(d => d.upper_bound);\n      \n      // Process optimized data if available\n      let optimizedDates = [];\n      let optimizedValues = [];\n      \n      if (optimizedForecast && optimizedForecast.length > 0) {\n        optimizedDates = optimizedForecast.map(d => new Date(d.ds));\n        optimizedValues = optimizedForecast.map(d => d.predicted_emissions);\n      }\n      \n      // Create datasets\n      const datasets = [];\n      \n      // Add actual data if available\n      if (actualData.length > 0) {\n        datasets.push({\n          label: 'Actual Emissions',\n          data: actualDates.map((date, index) => ({\n            x: date,\n            y: actualValues[index]\n          })),\n          borderColor: '#00FFFF', // Cyan\n          backgroundColor: 'rgba(0, 255, 255, 0.1)',\n          borderWidth: 3,\n          pointBackgroundColor: '#00FFFF',\n          pointBorderColor: '#00FFFF',\n          pointRadius: 6,\n          pointHoverRadius: 8,\n          tension: 0.4,\n          fill: false\n        });\n      }\n      \n      // Add forecast data\n      datasets.push({\n        label: 'Forecast Emissions',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: forecastValues[index]\n        })),\n        borderColor: '#FF00FF', // Magenta\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 3,\n        pointBackgroundColor: '#FF00FF',\n        pointBorderColor: '#FF00FF',\n        pointRadius: 6,\n        pointHoverRadius: 8,\n        tension: 0.4,\n        fill: false\n      });\n      \n      // Add confidence interval\n      datasets.push({\n        label: 'Confidence Interval',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: upperBounds[index]\n        })),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'transparent',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: false\n      });\n      \n      datasets.push({\n        label: 'Confidence Interval',\n        data: forecastDates.map((date, index) => ({\n          x: date,\n          y: lowerBounds[index]\n        })),\n        borderColor: 'rgba(255, 0, 255, 0.3)',\n        backgroundColor: 'rgba(255, 0, 255, 0.1)',\n        borderWidth: 1,\n        borderDash: [5, 5],\n        pointRadius: 0,\n        fill: '-1'\n      });\n      \n      // Add optimized forecast if available\n      if (optimizedValues.length > 0) {\n        datasets.push({\n          label: 'Optimized Emissions',\n          data: optimizedDates.map((date, index) => ({\n            x: date,\n            y: optimizedValues[index]\n          })),\n          borderColor: '#00FF00', // Green\n          backgroundColor: 'rgba(0, 255, 0, 0.1)',\n          borderWidth: 3,\n          borderDash: [5, 5],\n          pointBackgroundColor: '#00FF00',\n          pointBorderColor: '#00FF00',\n          pointRadius: 6,\n          pointHoverRadius: 8,\n          tension: 0.4,\n          fill: false\n        });\n      }\n      \n      // Create chart\n      chartInstance.current = new Chart(ctx, {\n        type: 'line',\n        data: {\n          datasets: datasets\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          animation: {\n            duration: 2000,\n            easing: 'easeOutQuart'\n          },\n          scales: {\n            x: {\n              type: 'time',\n              time: {\n                unit: 'month',\n                displayFormats: {\n                  month: 'MMM yyyy'\n                }\n              },\n              title: {\n                display: true,\n                text: 'Month',\n                color: '#ccc',\n                font: {\n                  family: 'Orbitron',\n                  size: 14\n                }\n              },\n              grid: {\n                color: 'rgba(255, 255, 255, 0.1)'\n              },\n              ticks: {\n                color: '#ccc',\n                font: {\n                  family: 'Roboto',\n                  size: 12\n                }\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: 'Monthly Emissions (tons CO2e)',\n                color: '#ccc',\n                font: {\n                  family: 'Orbitron',\n                  size: 14\n                }\n              },\n              grid: {\n                color: 'rgba(255, 255, 255, 0.1)'\n              },\n              ticks: {\n                color: '#ccc',\n                font: {\n                  family: 'Roboto',\n                  size: 12\n                }\n              }\n            }\n          },\n          plugins: {\n            legend: {\n              position: 'top',\n              labels: {\n                font: {\n                  family: 'Orbitron',\n                  size: 12\n                },\n                color: '#fff',\n                padding: 20,\n                filter: function(item) {\n                  // Hide one of the confidence interval labels\n                  return item.text !== 'Confidence Interval' || item.datasetIndex === 2;\n                }\n              }\n            },\n            tooltip: {\n              enabled: true,\n              mode: 'nearest',\n              intersect: false,\n              backgroundColor: 'rgba(0, 0, 0, 0.8)',\n              titleFont: {\n                family: 'Orbitron',\n                size: 14\n              },\n              bodyFont: {\n                family: 'Roboto',\n                size: 13\n              },\n              borderColor: 'rgba(0, 255, 255, 0.3)',\n              borderWidth: 1,\n              callbacks: {\n                title: function(tooltipItems) {\n                  if (tooltipItems.length > 0) {\n                    const date = new Date(tooltipItems[0].parsed.x);\n                    return date.toLocaleDateString('default', { month: 'long', year: 'numeric' });\n                  }\n                  return '';\n                },\n                label: function(context) {\n                  let label = context.dataset.label || '';\n                  \n                  if (label) {\n                    label += ': ';\n                  }\n                  \n                  if (context.parsed.y !== null) {\n                    label += context.parsed.y.toFixed(2) + ' tons CO2e';\n                  }\n                  \n                  return label;\n                }\n              }\n            }\n          },\n          elements: {\n            point: {\n              radius: 6,\n              hoverRadius: 8,\n              hitRadius: 8\n            }\n          }\n        }\n      });\n    } catch (error) {\n      console.error(\"Error creating chart:\", error);\n    }\n  }, [data, forecast, optimizedForecast]);\n\n  return (\n    <div className=\"forecast-chart-container\">\n      <h3 className=\"chart-title\">Monthly Carbon Emissions Forecast</h3>\n      <div className=\"chart-container\">\n        <canvas ref={chartRef}></canvas>\n      </div>\n      \n      {impacts && Object.keys(impacts).length > 0 && (\n        <div className=\"impact-factors\">\n          <h4>Key Impact Factors</h4>\n          <div className=\"impact-list\">\n            {Object.entries(impacts)\n              .sort((a, b) => Math.abs(b[1].impact_score) - Math.abs(a[1].impact_score))\n              .slice(0, 3)\n              .map(([factor, data], index) => {\n                let factorName = factor;\n                if (factor === 'energy_use') factorName = 'Energy Use';\n                if (factor === 'transport') factorName = 'Transport';\n                if (factor === 'waste') factorName = 'Waste';\n                if (factor === 'water') factorName = 'Water';\n                if (factor === 'fuel') factorName = 'Fuel';\n                if (factor === 'grid_intensity') factorName = 'Grid Intensity';\n                \n                return (\n                  <div key={factor} className=\"impact-item\">\n                    <div className=\"impact-rank\">{index + 1}</div>\n                    <div className=\"impact-info\">\n                      <div className=\"impact-name\">{factorName}</div>\n                      <div className=\"impact-score\">\n                        Impact Score: <span className=\"impact-value\">{Math.abs(data.impact_score).toFixed(2)}</span>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ForecastChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}